{"version":3,"sources":["lure.all.js","lure.core.js","lure.content.js","lure.basic.js","lure.chart.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","Date","format","Lure","_DateFormat","this","LureClass","Plugin","$this","Debug","isEditableEventsEnabled","regexEach","RegExp","regexIfOuter","regexIfInner","regexExpressions","regexEditable","spaces","preCompileIfOuter","s","replace","bkt","condition","expression","preParseObjectChecker","preCompileIfInner","preCompileEach","EachList","match","lvl","current","isInnerEach","StartPoint","indexOf","EndPoint","prevStarts","slice","prevEnds","string_Each","ObjectName","a","name","eachComplied","repeat","preParse","preCompileEditable","editable","content","b","checking","c","containsSpecialObject","containsSpecialObjectTreeBuiler","isSpecialSymbol","isString","isIterator","isNumber","isNaN","parent","isCheckExpression","arguments","undefined","Compile","DomString","isListElement","string_Function","val","function_f","Function","e","console","info","error","_EditablesEventListenerRun","AddEventListenerGlobal","Editable","RemoveEdits","AddEdits","currentTarget","closest","value","valPrev","parentElement","dataset","classList","add","remove","keyCode","Save","EditableElement","querySelector","isHasEditablesEventsEnabled","document","addEventListener","contains","querySelectorAll","CreateElementFromString","string","ownerTagName","frag","createDocumentFragment","elem","createElement","innerHTML","childNodes","appendChild","CreateElementsFromString","nodes","push","Select","query","Node","SelectAll","Selector","tagName","eventName","selector","handler","thisArg","isIt","event","_EventClone","elems","call","isVisible","HTMLElement","isVisibleSelf","element","ContentStyle","window","getComputedStyle","display","opacity","visibility","parseInt","minWidth","width","minHeight","height","isVisibleParent","ClonedEvent","clone","p","d","getOwnPropertyDescriptor","get","set","setPrototypeOf","GetFileText","url","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","Error","statusText","location","protocol","host","href","substring","lastIndexOf","log","open","send","GetInlineSize","fontSize","hiddenStyle","k","style","all","setAttribute","body","sizes","clientWidth","clientHeight","removeChild","isNumeric","n","parseFloat","isFinite","date","data","getDate","mo","getMonth","year","getFullYear","hour","getHours","min","getMinutes","sec","getSeconds","toString","Culture","MonthNames","EditMode","RemoveWaiting","waiedites","forEach","item","editables","_innerHTML","ValuePrev","SaveButton","string_Select","SelectData","eval","Property","SelectOptions","attributes","EditType","focus","select","ValueNew","Content","Controller","MonsieurController","DataObject","Data","ErrorHint","LineSave","Settings","DialogBlur","DialogAnimation","EditableClass","EditableWaiting","MonthNamesShort","WeekDays","WeekDaysShort","TemplatorList","ContentList","_DialogCount","perfStart","text","x","Math","floor","performance","now","Caption","Message","_ref","_ref$CaptionColor","CaptionColor","_ref$CaptionBackgroun","CaptionBackground","_ref$OnAgree","OnAgree","_ref$OnCancel","OnCancel","activeElement","blur","dialog","title","color","background","msg","buttons","btnOk","onclick","wrap","getElementsByClassName","btnCancel","Confirm","object","div","position","animate","duration","setTimeout","onfinish","Version","LureContent","_ref2","MakeContent","Array","isArray","group","matche","Target","construct","Type","Name","AllContents","Refresh","bind","GetParent","stringName","Parent","GetContent","found","searcher","isContent","GetIndex","children","AddEventListener","func","AddTutor","buttonTutorStarter","MonsieurTutor","_SortBy","f","sort","_Sorting","Sorted","kf","hasOwnProperty","_FilterBy","filters","_d","_Filter","_DataDefault","_loop","Filter","filter","toLowerCase","_sorter","_Data","PageSize","_PageSize","_PageCursor","_Rebuilder","mr","PerformanceNow","Props","GetSet","Methods","Show","isActive","Control","Active","transitionDuration","durationAni","animationDuration","Hide","Dialog","DialogWrapper","zIndexWrapper","zIndex","zIndexContent","Number","BeforeShow","Shower","clearTimeout","__private","ToggleTimer","Disactive","Hider","Toggle","OnClick","SubContent","cname","TitleContent","Title","Visible","isController","isHasEditable","Sorting","_loop2","Filtering","_loop3","from","AfterBuild","_ref2$Target","_ref2$Content","_ref2$CSS","CSS","_ref2$Name","_ref2$Global","Global","_ref2$Title","_ref2$Type","_ref2$Visible","_ref2$SubContent","_ref2$Dialog","_ref2$DialogWrapper","_ref2$DialogBlur","_ref2$DialogAnimation","_ref2$Show","_ref2$Hide","_ref2$Shower","_ref2$Hider","_ref2$BeforeShow","_ref2$Refresh","_ref2$Sorting","_ref2$Filtering","_ref2$OnClick","_ref2$Controller","_ref2$Control","_ref2$Props","_ref2$Methods","_ref2$GetSet","_ref2$AfterBuild","_ref2$Disabled","Disabled","_ref2$Parent","then","node","RefreshOne","removeData","Remove","itemData","extraclass","isPrepend","addData","Add","index","Edit","t","Items","LureControl","control","owner","_this","controls","_loop4","random","substr","_Content","isGlobal","OnChange","onchange","type","Templator","_ref3","_ref3$Target","_ref3$Data","_ref3$ListElement","ListElement","_ref3$EmptyMessage","EmptyMessage","_ref3$EmptyHide","EmptyHide","_ref3$PageSize","_ref3$DataCount","DataCount","_ref3$PageGet","PageGet","_ref3$ShowAllButton","ShowAllButton","_ref3$LineSave","line","property","newValue","callback","_ref3$LineAdd","LineAdd","dataObject","_ref3$EditModeSwitch","EditModeSwitch","_ref3$NoAnimation","DataSaveAll","NoAnimation","_ref3$NoBuild","NoBuild","_ref3$BeforeBuild","BeforeBuild","_ref3$AfterBuild","_ref3$AfterAdd","AfterAdd","_ref3$Parent","_DataCount","_PageGet","isShowAllButton","isNoAnimaton","isEmptyHide","Dictionary","_Dictionary","Refresher","j","fields","isAttribute","NewValue","BuildValue","split","lines","NextCount","Limit","paginator","tag","empty","_LineBuilder","also","showAll","isTable","colspan","btnNext","BuildWithIt","Build","btnNextAll","FieldAdd","elemAttributes","WhatFields","PageCursor","newItem","itemOld","parentNode","replaceChild","fragment","unshift","prepend","splice","SwitchToEditMode","isListElementCssSelector","outerHTML","list_element","list_elementClassed","pos","checked","click","AllChildren","TreeBuilder","_ref4","_ref4$Target","_ref4$Data","_ref4$ListElement","_ref4$Drop","Drop","_ref4$SubSelector","SubSelector","_ref4$SubSelectorHand","SubSelectorHandler","_ref4$BeforeBuild","_ref4$AfterBuild","_ref4$Parent","SubTreeClass","Lvl","Branch","html","entag","LineBuilder","Index","BuildElement","indexJ","extra","$lvl","$key","$index","$j","ObjItem","sub","Tutor","TargetButton","TargetContent","MT","ContentBG","_Description","_Step","_ButtonNext","_ButtonStop","ButtonNextText","TutorPosition","temp","ColorTransparent","backgroundColor","ElemCssRestore","Element","outline","nElements","ElemCssSet","Run","desc","GoStep","Stop","ElementDesc","ElemParent","posX","offsetLeft","posY","offsetTop","innerWidth","documentElement","scrollTop","innerHeight","offsetHeight","left","top","Load","MonsieurLoading","_ref5","_ref5$Target","cx","cy","_DoArc","radius","maxAngle","angle","rad","PI","cos","y","sin","svg","Timeout","TimeoutHide","Tooltip","MonsieurTooltip","_ref6","_ref6$Target","_ref6$Attribute","Attribute","_ref6$Delay","Delay","_ref6$Time","Time","_ref6$Custom","Cursor","Custom","_ref6$AfterBuild","ToolTip","Timer","Destr","Chart","Core","LureChart","Builder","Legend","AxeY","AxeX","Grid","Svg","isGraph","chart","Options","Series","PathBuilder","Builders","MakeGraph","MakeLegend","MakeAxisY","_ScaleY","Scales","Dict","Color","MakeAxisX","MakeGrid","Labels","_ref7","_ref7$Type","_ref7$Title","_ref7$Labels","Rotation","_ref7$Series","OwnAxis","_ref7$Tooltip","Template","_ref7$AxisY","AxisY","Scale","Height","SeriesOptions","ColorsDefault","Buffer","AxisX","Width","Abscissa","SeriesPoints","ParametersAxisX","_Series","__InitSeries","Se","ep","Point","GetSeriePointOptions","BarStack","BarGradient","Block","_Legend","_AxisX","_AxisY","_ChartArea","_Grid","_Svg","v","ChartArea","Serie","accum","scale","caption","labels","Angle","MarginTop","MarginLeft","GetGrid","serie","mm","MinMax","DataOrdinata","GetOrdinata","DataAbscissa","GetAbscissa","points","GetPoints","GetPath","CalcAxisX","size","w","h","wFact","round","sqrt","pow","__GetPath","__GetPathLine","__GetPathBar","xs","ys","dys","dxs","ds","ms","dots","GetPathLineDot","Radius","wd","bricks","GradientId","GetScaleY","SvgBar","SvgLine","Prop","_Timer","_Timer2","options","Value","Do","DoCircle","DoBar","circle","o","bar","superdata","_Abscissa","DataPoints","Path","pointSize","SuperData","TestB","per","Perf","series","ctx","max","isAutoScale","isAutoStep","sc","order","step","toFixed","stepX","map","scaleCoefficient","ordinata","X","Y","GetPathLine","GetPathBar","isDots","sizeX","sizeY","grid","__GenegateString","gen"],"mappings":"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","file":"lure.all.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//\n// Lure Framework v0.9.1 [29.08.2017]\n//\n//<utils>;\nif (!Date.prototype.format) {\n    Date.prototype.format = function (format) {\n        return Lure._DateFormat(this, format);\n    };\n}\n//</utils>\nvar Lure = function () {\n    var LureClass = function () {\n        function LureClass() {\n            _classCallCheck(this, LureClass);\n\n            this.Plugin = {};\n            var $this = this;\n            this.Debug = false;\n            this.isEditableEventsEnabled = false;\n            //regexes\n            var regexEach = new RegExp(/{{#each\\s+([^}]+)}}/g);\n            var regexIfOuter = new RegExp(/{{#if\\s+([^}]+)}}([\\s\\S]*?){{#endif}}/g);\n            var regexIfInner = new RegExp(/{{#if([\\s\\S]*?)}}/g);\n            var regexExpressions = new RegExp(/{{([^#}]+)}}/g);\n            var regexEditable = new RegExp(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/g);\n            //compile helpers\n            var spaces = \"    \";\n            var preCompileIfOuter = function preCompileIfOuter(s) {\n                s = s.replace(/#IF/g, '#if').replace(/#ENDIF/g, '#endif').replace(regexIfOuter, function (bkt, condition, expression) {\n                    return '`+\\n/* OUTER \"IF\" */\\n(function($this){\\n    if (' + preParseObjectChecker(condition) + ') {\\n        return `' + expression + '`;\\n    }\\n    return \\'\\';\\n})($this)+`';\n                });\n                return s;\n            };\n            var preCompileIfInner = function preCompileIfInner(s) {\n                s = s.replace(regexIfInner, function (s, condition) {\n                    condition = condition.replace(/&gt;/g, \">\").replace(/&lt;/g, \"<\").replace(/#less/g, \" < \").replace(/#more/g, \" > \").replace(/&amp;/g, \"&\").replace(/\\|/g, '\"');\n                    return '`+\\n    /* LOCAL \"IF\" */\\n    (function(){\\n        return (' + condition + '); \\n        return \\'\\';})()+`';\n                });\n                return s;\n            };\n            var preCompileEach = function preCompileEach(s) {\n                s = s.replace(/{{#EACH/g, \"{{#each\").replace(/{{#ENDEACH/g, \"{{#endeach\");\n                var EachList = s.match(regexEach);\n                var lvl = 0;\n                if (EachList !== null) {\n                    for (var i = EachList.length - 1; i >= 0; i--) {\n                        var current = EachList[i];\n                        var isInnerEach = false;\n                        lvl++;\n                        var StartPoint = s.indexOf(current);\n                        var EndPoint = s.indexOf(\"{{#endeach}}\", StartPoint);\n\n                        var prevStarts = s.slice(0, StartPoint).match(regexEach);\n                        prevStarts = prevStarts !== null ? prevStarts.length : 0;\n                        var prevEnds = s.slice(0, StartPoint).match(/{{#endeach}}/g);\n                        prevEnds = prevEnds !== null ? prevEnds.length : 0;\n                        if (prevStarts > prevEnds) {\n                            isInnerEach = true;\n                            lvl = 0;\n                        }\n                        ////\n                        var string_Each = s.slice(StartPoint, EndPoint + 12);\n                        var expression = string_Each.slice(current.length, string_Each.length - 12);\n                        var ObjectName = current.replace(/{{#each\\s+([\\s\\S]+)}}/, function (a, name) {\n                            return name;\n                        });\n                        ObjectName = preParseObjectChecker(ObjectName);\n                        //the each template\n                        var eachComplied = '`+' + spaces.repeat(lvl) + '/* EACH */(function(inner, $parent){                                                                   \\r\\n' + spaces.repeat(lvl) + '    if (!inner || (Object.keys(inner).length === 0 && inner.constructor === Object && isNaN(inner)))   \\r\\n' + spaces.repeat(lvl) + '        return \"\";                                                                                     \\r\\n' + spaces.repeat(lvl) + '    let string_result= \"\";                                                                             \\r\\n' + spaces.repeat(lvl) + '    for(let j = 0; j < inner.length; j++){                                                             \\r\\n' + spaces.repeat(lvl) + '        let $this = inner[j];                                                                          \\r\\n' + spaces.repeat(lvl) + '        let o = inner[j];                                                                              \\r\\n' + spaces.repeat(lvl) + '        string_result = string_result + \\`' + preParse(expression) + '\\`;                                \\r\\n' + spaces.repeat(lvl) + '    }                                                                                                  \\r\\n' + spaces.repeat(lvl) + '    return string_result;                                                                              \\r\\n' + spaces.repeat(lvl) + '})(' + ObjectName + ', {$parent: typeof $parent !== \"undefined\"?$parent:null, $this: $this, i: i} ) +`         ';\n                        s = s.replace(string_Each, eachComplied);\n                    }\n                }\n                return s;\n            };\n            var preCompileEditable = function preCompileEditable(s) {\n                return s.replace(regexEditable, function (match, editable, content) {\n                    match = match.replace(/<[\\s\\S]+?(>)/, function (a, b) {\n                        return a.replace(b, ' data-line=\"{{i}}\" data-property=\"' + content.replace('{{', '').replace('}}', '') + '\">');\n                    });\n                    return match.replace(content, '<div class=\"editable-helper editable-value\">' + content + '</div><div class=\"editable-helper editable-icon\"></div>');\n                });\n            };\n            var preParseObjectChecker = function preParseObjectChecker(ObjectName) {\n                //ok check if it's expression\n                if (ObjectName.indexOf('Available + Dis') > -1) ; //debugger;\n                function checking(c) {\n\n                    var s = c.replace(/\\s/g, \"\");\n                    var containsSpecialObject = s.indexOf('$item') > -1 || s.indexOf('$this') > -1 || s.indexOf('$parent') > -1;\n                    var containsSpecialObjectTreeBuiler = s.indexOf('$index') > -1 || s.indexOf('$j') > -1 || s.indexOf('$key') > -1 || s.indexOf('$lvl') > -1 || s.indexOf('$g.') > -1;\n                    var isSpecialSymbol = s === \"?\" || s.indexOf(\"=\") > -1 || s.indexOf(\">\") > -1 || s.indexOf(\"<\") > -1;\n                    var isString = s.match(/^[\"'\\\\][\\s\\S]*[\"'\\\\]$/) !== null;\n                    var isIterator = s === \"i\" || s === \"j\";\n                    var isNumber = !isNaN(s);\n                    if (containsSpecialObject || containsSpecialObjectTreeBuiler || isIterator || isNumber || isString || isSpecialSymbol) {\n                        if (s.indexOf('$g.') > -1) {\n                            //if global object\n                            return s.replace('$g.', '');\n                        }\n                        return c;\n                    }\n                    return \"o.\" + s;\n                }\n                ObjectName = ObjectName.replace(/[^\\-+\\/%()*]+/g, function (c) {\n                    var parent = c.match(/&/g);\n                    if (parent !== null) {\n                        for (var i = 0; i < parent.length; i++) {\n                            if (i < parent.length - 1) c = c.replace('&', \"$parent\");else c = c.replace('&', \"$parent.$this\");\n                        }\n                        return c;\n                    } else {\n                        return checking(c);\n                    }\n                });\n                ObjectName = ObjectName.replace(/\\\\'/g, \"'\");\n                ObjectName = \"(\" + ObjectName + \")\"; //fucking concatenation shell\n                return ObjectName;\n            };\n            var preParse = function preParse(c) {\n                var isCheckExpression = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n                return c.replace(regexExpressions, function (bkt, expression) {\n                    if (isCheckExpression) return '${' + preParseObjectChecker(expression) + '}';else return '${' + expression + '}';\n                });\n            };\n            /**\r\n             * Template compiler\r\n             * @param {string} DomString\r\n             * @param {boolean} isListElement\r\n             * @return {Function}\r\n             * @constructor\r\n             */\n            this.Compile = function (DomString, isListElement) {\n                DomString = DomString.replace(/[\\n]+/g, \" \").replace(/[ ]{3,}/g, '');\n                //shell '\n                DomString = DomString.replace(/'/g, \"\\\\'\");\n                //.replace(/&gt;/g, \">\").replace(/&lt;/g, \"<\").replace(/&amp;/g, \"&\");\n                if (isListElement) {\n                    DomString = preCompileEditable(DomString);\n                    DomString = preCompileIfOuter(DomString);\n                    DomString = preCompileEach(DomString);\n                }\n\n                DomString = preParse(DomString);\n                DomString = preCompileIfInner(DomString);\n                var string_Function = '\\nlet $this = o;\\nlet $item = o;\\nlet $num = i+1;\\nlet $denum = length-i;\\n//treebuilder\\'s\\nlet $index;\\nlet $key;\\nlet $lvl;\\nlet $j;\\nif (extra){\\n    $index = extra.$index;\\n    $key = extra.$key;\\n    $lvl = extra.$lvl;\\n    $j = extra.$j;\\n}\\nlet string_Result = \"\";\\nif (o === undefined || (Object.keys(o).length === 0 && o.constructor === Object && isNaN(o)) ) \\n    return \\'\\';\\nreturn `';\n                string_Function += DomString + '`;';\n                //if ie\n                //let isUnbrowser = true;\n                //if (isUnbrowser){\n                string_Function = string_Function.replace(/`/g, '\\'').replace(/\\$\\{([^}]*)\\}/g, function (match, val) {\n                    return '\\'+' + val + '+\\'';\n                });\n                //}\n\n                var function_f = void 0;\n                try {\n                    function_f = new Function('o', 'i', 'length', 'extra', string_Function);\n                } catch (e) {\n                    console.info(string_Function);\n                    console.error(e);\n                }\n                //console.log('Compiled:');\n                //console.log(f);\n                return function_f;\n            };\n            this._EditablesEventListenerRun = function (content) {\n                $this.AddEventListenerGlobal('dblclick', '.editable', function (e) {\n                    $this.Editable.RemoveEdits();\n                    $this.Editable.AddEdits(e.currentTarget);\n                }, content);\n                $this.AddEventListenerGlobal('click', '.editable-icon', function (e) {\n                    $this.Editable.RemoveEdits();\n                    $this.Editable.AddEdits(e.currentTarget.closest('.editable'));\n                }, content);\n                $this.AddEventListenerGlobal('dblclick', '.editable', function (e) {\n                    $this.Editable.RemoveEdits();\n                    $this.Editable.AddEdits(e.currentTarget);\n                }, content);\n                //editing\n                $this.AddEventListenerGlobal('change', '.editable-editor', function (e) {\n                    var val = e.currentTarget.value;\n                    var valPrev = e.currentTarget.parentElement.dataset['value'];\n                    if (val !== valPrev) e.currentTarget.parentElement.classList.add('editable-waiting');else e.currentTarget.parentElement.classList.remove('editable-waiting');\n                }, content);\n\n                $this.AddEventListenerGlobal('keyup', '.editable-textbox', function (e) {\n                    if (e.keyCode === 13) {\n                        $this.Editable.Save(e.currentTarget.closest('.editable'), e.currentTarget.value);\n                        return false;\n                    }\n\n                    var val = e.currentTarget.value;\n                    var valPrev = e.currentTarget.parentElement.dataset['value'];\n                    if (val !== valPrev) e.currentTarget.parentElement.classList.add('editable-waiting');else e.currentTarget.parentElement.classList.remove('editable-waiting');\n                }, content);\n\n                //save\n                $this.AddEventListenerGlobal('click', '.editable-save-button', function (e) {\n                    var EditableElement = e.currentTarget.closest('.editable');\n                    $this.Editable.Save(e.currentTarget.closest('.editable'), EditableElement.querySelector('.editable-editor').value);\n                }, content);\n\n                if ($this.isHasEditablesEventsEnabled) return;\n                document.addEventListener('click', function (e) {\n                    if (e.target.classList.contains('editable-helper') && document.querySelectorAll('.editable-helper, .editable-editing') !== null) {\n                        return;\n                    }\n                    $this.Editable.RemoveEdits();\n                });\n                $this.isHasEditablesEventsEnabled = true;\n            };\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {DocumentFragment}\r\n             * @constructor\r\n             */\n            this.CreateElementFromString = function (string) {\n                var ownerTagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"div\";\n\n                var frag = document.createDocumentFragment();\n                var elem = document.createElement(ownerTagName);\n                elem.innerHTML = string;\n                while (elem.childNodes[0]) {\n                    frag.appendChild(elem.childNodes[0]);\n                }\n                return frag.childNodes[0];\n            };\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {Array}\r\n             * @constructor\r\n             */\n            this.CreateElementsFromString = function (string) {\n                var ownerTagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"div\";\n\n                var frag = document.createDocumentFragment();\n                var elem = document.createElement(ownerTagName);\n                elem.innerHTML = string;\n                while (elem.childNodes[0]) {\n                    frag.appendChild(elem.childNodes[0]);\n                }\n                if (frag.childNodes.length > 0) {\n                    var nodes = [];\n                    for (var i = 0; i < frag.childNodes.length; i++) {\n                        nodes.push(frag.childNodes[i]);\n                    }return nodes;\n                }\n                return null;\n            };\n            /**\r\n             *\r\n             * @param {css, HTMLElement} query\r\n             * @param parent\r\n             * @return {HTMLElement}\r\n             * @constructor\r\n             */\n            this.Select = function (query) {\n                var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n\n                if (query === '' || query === null) return null;\n                return query instanceof Node ? query : parent.querySelector(query);\n            };\n            /**\r\n             *\r\n             * @param {string} Selector\r\n             * @param {HTMLElement} parent\r\n             * @return {NodeList}\r\n             * @constructor\r\n             */\n            this.SelectAll = function (Selector) {\n                var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n\n                if (typeof Selector === 'undefined') return [];\n                if (typeof Selector.tagName !== 'undefined' || Selector === document) return [Selector];\n                return parent.querySelectorAll(Selector);\n            };\n            /**\r\n             *\r\n             * @param {string} eventName\r\n             * @param {string} selector\r\n             * @param {function} handler\r\n             * @param {HTMLElement} parent\r\n             * @param {Lure.Content} thisArg\r\n             * @constructor\r\n             */\n            this.AddEventListenerGlobal = function (eventName, selector, handler) {\n                var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : document;\n                var thisArg = arguments[4];\n\n                parent.addEventListener(eventName, function (e) {\n                    var target = e.target;\n                    var isIt = false;\n                    var event = Lure._EventClone(e);\n                    var elems = parent.querySelectorAll(selector);\n                    if (elems[0] === target) {\n                        event.currentTarget = target;\n                        isIt = true;\n                    }\n                    if (!isIt) {\n                        for (var i = 0; i < elems.length; i++) {\n                            if (elems[i].contains(target)) {\n                                isIt = true;\n                                event.currentTarget = target.closest(selector);\n                                break;\n                            }\n                        }\n                    }\n                    if (isIt) {\n                        handler.call(thisArg ? thisArg : event.currentTarget, event);\n                    }\n                });\n            };\n            /**\r\n             *\r\n             * @param {HTMLElement} HTMLElement\r\n             * @return {boolean}\r\n             */\n            this.isVisible = function (HTMLElement) {\n                //check invisible state;\n                var isVisibleSelf = function isVisibleSelf(element) {\n                    var ContentStyle = window.getComputedStyle(element);\n                    if (ContentStyle.display === \"none\" || ContentStyle.opacity === \"0\" || ContentStyle.visibility === \"hidden\") return false;\n                    //check for null-size\n                    if ((parseInt(ContentStyle.minWidth) === 0 || ContentStyle.minWidth === \"auto\") && parseInt(ContentStyle.width) === 0) return false;\n                    if ((parseInt(ContentStyle.minHeight) === 0 || ContentStyle.minHeight === \"auto\") && parseInt(ContentStyle.height) === 0) return false;\n                    return true;\n                };\n                var isVisibleParent = function isVisibleParent(element) {\n                    while (element.parentElement) {\n                        if (!isVisibleSelf(element.parentElement)) {\n                            return false;\n                        }\n                        element = element.parentElement;\n                    }\n                    return true;\n                };\n                if (!isVisibleSelf(HTMLElement)) {\n                    return false;\n                }\n\n                return isVisibleParent(HTMLElement);\n\n                return true;\n            };\n            /**\r\n             *\r\n             * @param e\r\n             * @return {ClonedEvent}\r\n             * @constructor\r\n             */\n            this._EventClone = function (e) {\n                function ClonedEvent() {}\n                var clone = new ClonedEvent();\n                for (var p in e) {\n                    var d = Object.getOwnPropertyDescriptor(e, p);\n                    if (d && (!d.writable || !d.configurable || !d.enumerable || d.get || d.set)) {\n                        Object.defineProperty(clone, p, d);\n                    } else {\n                        clone[p] = e[p];\n                    }\n                }\n                Object.setPrototypeOf(clone, e);\n                return clone;\n            };\n\n            this.GetFileText = function (url) {\n                return new Promise(function (resolve, reject) {\n                    var xhr = new XMLHttpRequest();\n                    xhr.onload = function () {\n                        resolve(xhr.response);\n                    };\n                    xhr.onerror = function () {\n                        reject(new Error('XMLHttpRequest Error: ' + this.statusText));\n                    };\n                    if (url.indexOf('..') > -1) url = url.replace('..', document.location.protocol + \"//\" + document.location.host);else {\n                        url = document.location.href.substring(0, document.location.href.lastIndexOf('/') + 1) + url;\n                    }\n                    console.log('Lure.GetFileText', url);\n                    xhr.open('GET', url);\n                    //xhr.setRequestHeader('Content-Type',\"text/plain; charset=x-user-defined\");\n                    xhr.send();\n                });\n            };\n            this.GetInlineSize = function (elem) {\n                var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1rem';\n\n                var hiddenStyle = \"left:-10000px;top:-10000px;height:auto;width:auto;position:absolute;\";\n                var clone = document.createElement('div');\n                for (var k in elem.style) {\n                    try {\n                        if (elem.style[k] !== '' && elem.style[k].indexOf(\":\") > 0) {\n                            clone.style[k] = elem.style[k];\n                        }\n                    } catch (e) {}\n                }\n                document.all ? clone.style.setAttribute('cssText', hiddenStyle) : clone.setAttribute('style', hiddenStyle);\n                clone.style.fontSize = fontSize;\n                clone.innerHTML = elem.innerHTML;\n                parent.document.body.appendChild(clone);\n                var sizes = { width: clone.clientWidth, height: clone.clientHeight };\n                parent.document.body.removeChild(clone);\n                return sizes;\n            };\n            this.isNumeric = function (n) {\n                return !isNaN(parseFloat(n)) && isFinite(n);\n            };\n            //this.Content = Lure.Content;\n            //this.Templator = Templator;\n            /*editable*/\n            //this.Editables = '.editable-waiting';\n            this._DateFormat = function (date) {\n                var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"DD.MM.YYYY HH:mm:ss\";\n\n                if (date === null || typeof date === 'undefined') return '';\n                var data = date.getDate();\n                var mo = date.getMonth();\n                var year = date.getFullYear();\n                var hour = date.getHours();\n                var min = date.getMinutes();\n                var sec = date.getSeconds();\n\n                return format.replace('DD', data.toString().length < 2 ? '0' + data : data).replace('D', data).replace('MMM', $this.Culture.MonthNames[mo]).replace('MM', mo.toString().length < 2 ? '0' + mo : mo).replace('M', mo).replace('YYYY', year).replace('YY', year.toString().substring(2, 2)).replace('Y', year).replace('HH', hour.toString().length < 2 ? '0' + hour : hour).replace('hh', hour).replace('mm', min.toString().length < 2 ? '0' + min : min).replace('ss', sec.toString().length < 2 ? '0' + sec : sec);\n            };\n            this.Editable = {\n                EditMode: false,\n                RemoveWaiting: function RemoveWaiting() {\n                    var waiedites = document.querySelectorAll('.editable-waiting');\n                    waiedites.forEach(function (item) {\n                        item.classList.remove('editable-waiting');\n                    });\n                },\n                RemoveEdits: function RemoveEdits() {\n                    if ($this.Editable.EditMode) return;\n                    var editables = document.querySelectorAll('.editable-editing');\n                    editables.forEach(function (item) {\n                        item.innerHTML = item._innerHTML;\n                        item.classList.remove('editable-editing');\n                    });\n                    $this.Editable.RemoveWaiting();\n                },\n                AddEdits: function AddEdits(EditableElement) {\n                    EditableElement._innerHTML = EditableElement.innerHTML;\n                    var ValuePrev = EditableElement.querySelector('.editable-value').innerHTML;\n                    EditableElement.classList.add('editable-editing');\n                    EditableElement.dataset['value'] = ValuePrev;\n                    // EditableElement.style.paddingBottom = '0px';\n                    //EditableElement.style.paddingTop = '0px';\n                    var SaveButton = $this.Editable.EditMode ? '' : '<div class=\"editable-helper editable-save-button\"></div>';\n                    if (!EditableElement.dataset['object']) //if no selectable data, just text editor is needed\n                        {\n                            var EditType = EditableElement.dataset['type'];\n                            if (typeof EditType === 'undefined') EditType = 'text';\n                            EditableElement.innerHTML = '<input class=\"textbox editable-helper editable-editor editable-textbox\" type=\"' + EditType + '\" value=\"' + ValuePrev + '\"> ' + SaveButton;\n                            EditableElement.querySelector('.editable-editor').focus();\n                            EditableElement.querySelector('.editable-editor').select();\n                        } else //selectable data\n                        {\n                            var string_Select = '<select class=\"select editable-helper editable-editor editable-select\">';\n                            var SelectData = eval(EditableElement.dataset['object']);\n                            //console.log('-SelectData data-', SelectData);\n                            var Property = EditableElement.dataset['property'];\n                            var SelectOptions = '';\n                            SelectData.forEach(function (item) {\n                                //SelectOptions += ``\n                                var attributes = '';\n                                if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === _typeof({})) {\n                                    for (var key in item) {\n                                        attributes += ' data-property_' + key + '=\"' + item[key] + '\"';\n                                    }\n                                    string_Select += '<option class=\"editable-helper\" ' + attributes + '>' + item[Property] + '</option>';\n                                } else {\n                                    string_Select += '<option class=\"editable-helper\" ' + (item === ValuePrev ? \"selected\" : \"\") + '>' + item + '</option>';\n                                }\n                            });\n                            string_Select += '</select>' + SaveButton + '</div>';\n                            //let Select = Lure.CreateElementFromString(string_Select);\n                            //Select.value = ValuePrev;\n                            EditableElement.innerHTML = string_Select;\n                        }\n                },\n                Save: function Save(EditableElement, ValueNew) {\n                    var Content = EditableElement.closest('.mt-content');\n                    var Controller = Content.MonsieurController;\n                    var i = EditableElement.dataset['line'];\n                    var Property = EditableElement.dataset['property'];\n                    var DataObject = Controller.Data[i];\n                    if (ValueNew === '' || ValueNew === null || typeof ValueNew === 'undefined') {\n                        console.info('New Value is empty');\n                        Lure.ErrorHint(EditableElement, \"Пустое поле или неправильные данные\");\n                        return;\n                    }\n                    EditableElement.innerHTML = EditableElement._innerHTML;\n                    EditableElement.dataset['value'] = ValueNew;\n                    EditableElement.querySelector('.editable-value').innerHTML = ValueNew;\n                    EditableElement.classList.remove('editable-editing');\n                    if (Property !== '$this' && Property !== \"$item\") DataObject[Property] = ValueNew;else DataObject = ValueNew;\n\n                    //so server now\n                    Controller.LineSave(i, Property, ValueNew, function () {\n                        Lure.Editable.RemoveWaiting();\n                        if (Property !== '$this' && Property !== \"$item\") Controller.Data[i][Property] = ValueNew;else Controller.Data[i] = ValueNew;\n                    });\n                }\n            };\n            ///\n            this.Settings = {\n                DialogBlur: null, //{string, jQuery, HTMLElement} - where blur on dialog\n                DialogAnimation: 'lure-animation-dialog', //{string} -  css-animation class\n                EditableClass: 'editable',\n                EditableWaiting: 'editable-waiting'\n            };\n            this.Culture = {\n                MonthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"],\n                MonthNamesShort: [\"янв.\", \"фев.\", \"мар.\", \"апр.\", \"май\", \"июн.\", \"июл.\", \"авг.\", \"сен.\", \"окт.\", \"ноя.\", \"дек.\"],\n                WeekDays: [\"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\", \"Воскресенье\"],\n                WeekDaysShort: [\"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\", \"вс\"]\n            };\n            this.TemplatorList = [];\n            this.ContentList = {};\n\n            /////\n            this._DialogCount = 0;\n        }\n\n        _createClass(LureClass, [{\n            key: 'Perf',\n            value: function Perf(perfStart) {\n                var text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Perf';\n\n                var x = Math.floor((window.performance.now() - perfStart) * 100) / 100;\n                console.info(\"[\" + text + \"]: \" + x + \"ms\");\n                return x;\n            }\n\n            /**\r\n             * Confirmation dialog\r\n             * @param Caption\r\n             * @param Message\r\n             * @param CaptionColor\r\n             * @param CaptionBackground\r\n             * @param OnAgree\r\n             * @param OnCancel\r\n             * @constructor\r\n             */\n\n        }, {\n            key: 'Confirm',\n            value: function Confirm() {\n                var Caption = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Achtung\";\n                var Message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n                var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n                    _ref$CaptionColor = _ref.CaptionColor,\n                    CaptionColor = _ref$CaptionColor === undefined ? '' : _ref$CaptionColor,\n                    _ref$CaptionBackgroun = _ref.CaptionBackground,\n                    CaptionBackground = _ref$CaptionBackgroun === undefined ? '' : _ref$CaptionBackgroun,\n                    _ref$OnAgree = _ref.OnAgree,\n                    OnAgree = _ref$OnAgree === undefined ? function () {} : _ref$OnAgree,\n                    _ref$OnCancel = _ref.OnCancel,\n                    OnCancel = _ref$OnCancel === undefined ? null : _ref$OnCancel;\n\n                document.activeElement.blur();\n\n                var dialog = document.createElement('div');\n                dialog.classList.add('lure-confirm');\n                if (Lure.Settings.DialogAnimation) dialog.classList.add(Lure.Settings.DialogAnimation);\n                //###title\n                var title = document.createElement(\"div\");\n                title.classList.add('cd-caption');\n                title.innerHTML = Caption;\n                title.style.color = CaptionColor;\n                title.style.background = CaptionBackground;\n                dialog.appendChild(title);\n                //###message field\n                var msg = document.createElement(\"div\");\n                msg.classList.add('cd-text');\n                msg.innerHTML = Message;\n                dialog.appendChild(msg);\n                //###buttonfield\n                var buttons = document.createElement(\"div\");\n                buttons.classList.add(\"cd-buttons\");\n                dialog.appendChild(buttons);\n                //###button confirm\n                var btnOk = document.createElement(\"div\");\n                btnOk.classList.add(\"button\", \"cd-button\", \"btn-diag-confirm\");\n                btnOk.innerHTML = \"Ok\";\n                btnOk.onclick = function () {\n                    Lure._DialogCount--;\n                    if (OnAgree !== null && OnAgree !== undefined) OnAgree();\n                    if (Lure.Settings.DialogBlur && Lure._DialogCount < 1) Lure.Select(Lure.Settings.DialogBlur).classList.remove('lure-blur');\n                    //$(Lure.Settings.DialogBlur).removeClass('lure-blur');\n                    wrap.remove();\n                    dialog.remove();\n                };\n                dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnOk);\n                //###button cancel\n                if (OnCancel !== null) {\n                    var btnCancel = document.createElement(\"div\");\n                    btnCancel.classList.add(\"button\", \"cd-button\", \"btn-diag-cancel\");\n                    btnCancel.innerHTML = \"Отмена\";\n                    btnCancel.onclick = function () {\n                        Lure._DialogCount--;\n                        if (OnCancel !== null) OnCancel();\n                        if (Lure.Settings.DialogBlur && Lure._DialogCount < 1) Lure.Select(Lure.Settings.DialogBlur).classList.remove('lure-blur');\n                        //$(Lure.Settings.DialogBlur).removeClass('lure-blur');\n                        wrap.remove();\n                        dialog.remove();\n                    };\n                    dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnCancel);\n                }\n                //### Dialog-Wrapper\n                var wrap = document.createElement(\"div\");\n                wrap.classList.add('ConfirmDialog-wrapper');\n                document.body.appendChild(wrap);\n                document.body.appendChild(dialog);\n                Lure._DialogCount++;\n                if (Lure.Settings.DialogBlur) {\n                    wrap.style.background = 'none';\n                    Lure.Select(Lure.Settings.DialogBlur).classList.add('lure-blur');\n                    //$(Lure.Settings.DialogBlur).addClass('lure-blur');\n                }\n            }\n            //Confirmation dialog teamplate just\n\n        }, {\n            key: 'NoFeature',\n            value: function NoFeature() {\n                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n                if (name !== \"\") name = \"\\\"\" + name + \"\\\"\";\n                this.Confirm(\"Error\", \"Sorry, function \" + name + \" is not available yet\");\n            }\n\n            /**\r\n             *\r\n             * @param object\r\n             * @param msg\r\n             * @constructor\r\n             */\n\n        }, {\n            key: 'ErrorHint',\n            value: function ErrorHint(object, msg) {\n                if (!msg) msg = \"Поле не может быть пустым\";\n                var div = document.createElement('div');\n                div.classList.add('lure-error-hint');\n                div.innerHTML = msg;\n                object.parentElement.style.position = 'relative';\n                object.parentElement.appendChild(div);\n                div.style.display = 'block';\n                try {\n                    div.animate({ opacity: [0, 1] }, { duration: 300 });\n                } catch (e) {}\n\n                setTimeout(function () {\n\n                    try {\n                        div.animate({ opacity: [1, 0] }, { duration: 300 }).onfinish = function () {\n                            div.style.display = 'none';\n                        };\n                    } catch (e) {\n                        div.style.display = 'none';\n                    }\n                    //TODO CHECK FADEIN FADEOUT\n                    setTimeout(function () {\n                        object.parentElement.style.position = '';\n                        div.remove();\n                    }, 500);\n                }, 2000);\n            }\n        }]);\n\n        return LureClass;\n    }();\n\n    return new LureClass();\n}();\n//sets = {\n//  SubContent: [\n//      {sets},                             -same object to create subs\n// ],\n//\n// Controller:{                                   - if needs some Template master\n//    Type: Templator,                                    - class link [optional] Templator by default\n//    Target: {string|HTMLElement}                        -[optional] if Controller.Target is undefined, Controller.Target = sets.Target\n//    Data: {array|object},                               - data array [optional] Data === [] by default\n//    ListElement: {string|HTMLElement},                  - repeated element\n//    EmptyMessage: \"no items\",                           - render if Data.length === 0;\n\n//  Control: {\n//    Target: {string, jQuery, HTMLElement},\n//    Global: {bool}                               - set global event listener. Set true if control renders after init or it renders dynamicly\n//    OnClick: {function}                          - here this === current Lure.Content\n//    OnChange: {function}                         - here this === current Lure.Content\n// },}\n\nLure.Plugin.Content = {\n    Version: '0.9.1',\n    Content: function () {\n        function LureContent(_ref2) {\n            var _ref2$Target = _ref2.Target,\n                Target = _ref2$Target === undefined ? null : _ref2$Target,\n                _ref2$Content = _ref2.Content,\n                Content = _ref2$Content === undefined ? null : _ref2$Content,\n                _ref2$CSS = _ref2.CSS,\n                CSS = _ref2$CSS === undefined ? '' : _ref2$CSS,\n                _ref2$Name = _ref2.Name,\n                Name = _ref2$Name === undefined ? null : _ref2$Name,\n                _ref2$Global = _ref2.Global,\n                Global = _ref2$Global === undefined ? false : _ref2$Global,\n                _ref2$Title = _ref2.Title,\n                Title = _ref2$Title === undefined ? \"\" : _ref2$Title,\n                _ref2$Type = _ref2.Type,\n                Type = _ref2$Type === undefined ? \"Untyped\" : _ref2$Type,\n                _ref2$Visible = _ref2.Visible,\n                Visible = _ref2$Visible === undefined ? undefined : _ref2$Visible,\n                _ref2$SubContent = _ref2.SubContent,\n                SubContent = _ref2$SubContent === undefined ? [] : _ref2$SubContent,\n                _ref2$Dialog = _ref2.Dialog,\n                Dialog = _ref2$Dialog === undefined ? false : _ref2$Dialog,\n                _ref2$DialogWrapper = _ref2.DialogWrapper,\n                DialogWrapper = _ref2$DialogWrapper === undefined ? true : _ref2$DialogWrapper,\n                _ref2$DialogBlur = _ref2.DialogBlur,\n                DialogBlur = _ref2$DialogBlur === undefined ? null : _ref2$DialogBlur,\n                _ref2$DialogAnimation = _ref2.DialogAnimation,\n                DialogAnimation = _ref2$DialogAnimation === undefined ? null : _ref2$DialogAnimation,\n                _ref2$Show = _ref2.Show,\n                Show = _ref2$Show === undefined ? null : _ref2$Show,\n                _ref2$Hide = _ref2.Hide,\n                Hide = _ref2$Hide === undefined ? null : _ref2$Hide,\n                _ref2$Shower = _ref2.Shower,\n                Shower = _ref2$Shower === undefined ? function () {\n                this.Content.style.display = '';\n            } : _ref2$Shower,\n                _ref2$Hider = _ref2.Hider,\n                Hider = _ref2$Hider === undefined ? function () {\n                this.Content.style.display = 'none';\n            } : _ref2$Hider,\n                _ref2$BeforeShow = _ref2.BeforeShow,\n                BeforeShow = _ref2$BeforeShow === undefined ? function () {} : _ref2$BeforeShow,\n                _ref2$Refresh = _ref2.Refresh,\n                Refresh = _ref2$Refresh === undefined ? function (data, i) {\n                if (this.Controller) this.Controller.Refresh(data, i);\n            } : _ref2$Refresh,\n                _ref2$Sorting = _ref2.Sorting,\n                Sorting = _ref2$Sorting === undefined ? false : _ref2$Sorting,\n                _ref2$Filtering = _ref2.Filtering,\n                Filtering = _ref2$Filtering === undefined ? false : _ref2$Filtering,\n                _ref2$OnClick = _ref2.OnClick,\n                OnClick = _ref2$OnClick === undefined ? null : _ref2$OnClick,\n                _ref2$Controller = _ref2.Controller,\n                Controller = _ref2$Controller === undefined ? null : _ref2$Controller,\n                _ref2$Control = _ref2.Control,\n                Control = _ref2$Control === undefined ? null : _ref2$Control,\n                _ref2$Props = _ref2.Props,\n                Props = _ref2$Props === undefined ? function () {} : _ref2$Props,\n                _ref2$Methods = _ref2.Methods,\n                Methods = _ref2$Methods === undefined ? function () {} : _ref2$Methods,\n                _ref2$GetSet = _ref2.GetSet,\n                GetSet = _ref2$GetSet === undefined ? {} : _ref2$GetSet,\n                _ref2$AfterBuild = _ref2.AfterBuild,\n                AfterBuild = _ref2$AfterBuild === undefined ? function () {} : _ref2$AfterBuild,\n                _ref2$Disabled = _ref2.Disabled,\n                Disabled = _ref2$Disabled === undefined ? false : _ref2$Disabled,\n                _ref2$Parent = _ref2.Parent,\n                Parent = _ref2$Parent === undefined ? null : _ref2$Parent;\n\n            _classCallCheck(this, LureContent);\n\n            if (Disabled) return;\n            var $this = this;\n            this.isContent = true;\n            this.isActive = true;\n            if (Name === 'Tooltipchek') ; //debugger;\n\n            this.Parent = Parent;\n            if (Parent !== null) {\n                this.Target = Global ? Lure.Select(Target) : Lure.Select(Target, this.Parent.Content);\n                if (this.Target === null) this.Target = this.Parent.Content;\n            } else if (Target !== null) {\n                this.Target = Lure.Select(Target);\n            }\n            // debugger;\n            ////\n            if (Content === null) {\n                this.Content = this.Target;\n                construct.call($this);\n            } else {\n                if (Content.match(/<[^>]+>/) === null) {\n                    //if not dom string\n                    console.log('get load');\n                    Lure.GetFileText(Content).then(function (x) {\n                        // debugger;\n                        //     console.log('x', x);\n                        MakeContent.call($this, x);\n                        construct.call($this);\n                    });\n                } else {\n                    MakeContent.call($this, Content);\n                    construct.call($this);\n                }\n            }\n            function MakeContent(Content) {\n                if (Controller === null || Array.isArray(Controller.Data)) {\n                    this.Content = Lure.CreateElementFromString(Content);\n                } else if (Controller !== null && !Array.isArray(Controller.Data)) {\n                    /*Content = Content.replace(/<[^>]+>([^<]*{{([^#}]+)}}[^<]*)<[^>]+>/g, function (match, group) {\r\n                     let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                     return match.replace(match, `<span>${match}</span>`);\r\n                     });\r\n                     return  match.replace(group, newGroup);\r\n                     });*/\n                    Content = Content.replace(/>[^>]*({{[^#}]+}})[^>]*</g, function (match, group) {\n                        /*let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                         return match.replace(match, `<span>${match}</span>`);\r\n                         });*/\n                        var x = match.replace(/{{[^#}]+}}/g, function (matche) {\n                            return '<span>' + matche + '</span>';\n                        });\n                        return x; // match.replace(group, `<span>${group}</span>`);\n                    });\n                    this.Content = Lure.CreateElementFromString(Content);\n                }\n                //this._Content = Content;\n                this.Target.appendChild(this.Content);\n            }\n\n            /////\n            if (this.Content === null || this.Target === null) {\n                this.isContent = false;\n                return;\n            }\n\n            //### CONSTRUCTION\n            if (CSS !== '') {\n                var node = document.createElement('style');\n                node.innerHTML = CSS;\n                document.body.appendChild(node);\n            }\n            function construct() {\n                this.Type = Type;\n                this.Name = Name;\n                this.AllContents = Lure.ContentList;\n\n                //### METHODS\n                /**\r\n                 * @param {object} Data\r\n                 * @param {int} index\r\n                 */\n                this.Refresh = Refresh.bind(this);\n                /**\r\n                 *\r\n                 * @param {selector|HTMLElement} s\r\n                 * @returns {HTMLElement}\r\n                 * @constructor\r\n                 */\n                this.Select = function (s) {\n                    return Lure.Select(s, $this.Content);\n                };\n                /**\r\n                 *\r\n                 * @param {selector|HTMLElement} s\r\n                 * @returns {NodeList}\r\n                 * @constructor\r\n                 */\n                this.SelectAll = function (s) {\n                    return Lure.SelectAll(s, $this.Content);\n                };\n                /**\r\n                 *\r\n                 * @param {string}stringName\r\n                 * @constructor\r\n                 * @returns {Lure.Content}\r\n                 */\n                this.GetParent = function () {\n                    var stringName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'root';\n\n                    var content = $this;\n                    while (content.Parent !== null && content.Name !== stringName) {\n                        content = content.Parent;\n                    }return content;\n                };\n                /**\r\n                 *\r\n                 * @param {string}stringName\r\n                 * @constructor\r\n                 * @returns {Lure.Content}\r\n                 */\n                this.GetContent = function () {\n                    var stringName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'root';\n\n                    var parent = this.GetParent(stringName);\n                    if (parent.Name === stringName) return parent;\n                    // let root = parent;\n                    var found = parent;\n                    if (stringName === 'root') return found;\n                    var searcher0 = function searcher0(content) {\n                        if (content.isContent && content.__private.ContentNames) for (var i = 0; i < content.__private.ContentNames.length; i++) {\n                            var name = content.__private.ContentNames[i];\n                            if (name === stringName) return content[name];\n                            found = searcher(content[name]);\n                        }\n                        return found;\n                    };\n                    var searcher = function searcher(content) {\n                        // debugger;\n                        for (var key in content) {\n                            if (key !== \"Parent\" && !!content[key] && content[key].isContent) {\n\n                                if (content[key].Name === stringName) return content[key];\n                                found = searcher(content[key]);\n                            }\n                        }\n                        return found;\n                    };\n                    return searcher(found);\n                };\n                /**\r\n                 *\r\n                 * @param {HTMLElement|string} HTMLElement\r\n                 * @returns {number|Number}\r\n                 * @constructor\r\n                 */\n                this.GetIndex = function (HTMLElement) {\n                    HTMLElement = $this.Select(HTMLElement);\n                    return Array.prototype.slice.call(HTMLElement.parentElement.children).indexOf(HTMLElement);\n                };\n                /**\r\n                 *\r\n                 * @param {string} eventName\r\n                 * @param {string} selector\r\n                 * @param {function} func\r\n                 * @constructor\r\n                 */\n                this.AddEventListener = function (eventName, selector, func) {\n                    Lure.AddEventListenerGlobal(eventName, selector, func, $this.Content, $this);\n                };\n                /**\r\n                 *\r\n                 * @param {string|HTMLElement} buttonTutorStarter\r\n                 * @constructor\r\n                 */\n                this.AddTutor = function (buttonTutorStarter) {\n                    $this.MonsieurTutor = new MonsieurTutor($this.Select(buttonTutorStarter), $this.Content);\n                };\n                //private\n                this._SortBy = function (f, data) {\n                    var isSorted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n                    if (data.length < 2) return;\n                    console.log('sort by', f);\n                    data.sort(function (a, b) {\n                        if (a[f] < b[f] && $this._Sorting[f].Sorted) return 1;else if (a[f] > b[f] && $this._Sorting[f].Sorted) return -1;else if (a[f] < b[f] && !$this._Sorting[f].Sorted) return -1;else if (a[f] > b[f] && !$this._Sorting[f].Sorted) return 1;\n                        return 0;\n                    });\n                    $this._Sorting[f].Sorted = !$this._Sorting[f].Sorted;\n                    for (var kf in $this._Sorting) {\n                        if ($this._Sorting.hasOwnProperty(kf) && kf !== '_sorter') {\n                            $this._Sorting[kf].Target.classList.remove('mt-sorting-up');\n                            $this._Sorting[kf].Target.classList.remove('mt-sorting-down');\n                            if (f !== kf) $this._Sorting[kf].Sorted = false;\n                        }\n                    }\n                    $this._Sorting[f].Target.classList.add($this._Sorting[f].Sorted ? 'mt-sorting-down' : 'mt-sorting-up');\n                    $this.Refresh();\n                };\n                this._FilterBy = function () {\n                    var p = performance.now();\n                    var filters = 0;\n                    var _d = $this._Filter._DataDefault.slice(0);\n\n                    var _loop = function _loop(f) {\n                        if ($this._Filter.hasOwnProperty(f) && $this._Filter[f].Filter && $this._Filter[f].Filter !== '') {\n                            _d = _d.filter(function (x) {\n                                return x[f].toString().toLowerCase().indexOf($this._Filter[f].Filter) > -1;\n                            });\n                            filters++;\n                        }\n                    };\n\n                    for (var f in $this._Filter) {\n                        _loop(f);\n                    }\n                    console.log(_d);\n                    if (filters === 0) {\n                        if ($this._Sorting._sorter) {\n                            $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\n                            $this._SortBy($this._Sorting._sorter, $this.Controller._Data);\n                        }\n                        $this.Controller.Refresh();\n                    } else {\n                        if ($this._Sorting._sorter) {\n                            $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\n                            $this._SortBy($this._Sorting._sorter, _d);\n                        }\n                        $this.Controller.PageSize = $this._PageSize;\n                        $this.Controller._PageCursor = 0;\n                        $this.Controller._Rebuilder(_d);\n                    }\n\n                    mr.PerformanceNow(p, 'FilterBy');\n                };\n\n                //extra properties\n                Props.call(this);\n                //extra getters/setters\n                for (var k in GetSet) {\n                    Object.defineProperty($this, k, Object.getOwnPropertyDescriptor(GetSet, k));\n                }\n                //extra methods\n                Methods.call(this);\n                //--\n                this.Show = function (e) {\n                    this.isActive = true;\n                    if (this.Control) this.Control.Active();\n                    var style = window.getComputedStyle($this.Content);\n                    var duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\n                    var durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\n                    if (duration < durationAni) duration = durationAni;\n                    duration++;\n                    if ($this.Type !== \"Untyped\" && !$this.isVisible) {\n                        Lure.ContentList[$this.Type].forEach(function (item) {\n                            if (item !== $this && item.isActive) item.Hide();\n                        });\n                    }\n                    if (Dialog) {\n                        Lure._DialogCount++;\n                        $this.Content.classList.add('lure-dialog');\n                        //    console.log('DialogWrapper', DialogWrapper);\n                        if (DialogWrapper) {\n                            $this.DialogWrapper = Lure.CreateElementFromString('<div class=\"dialog-wrapper\">');\n                            document.body.appendChild($this.DialogWrapper);\n                            $this.DialogWrapper.onclick = $this.Hide.bind($this);\n\n                            var zIndexWrapper = parseInt(window.getComputedStyle($this.DialogWrapper).zIndex);\n                            var zIndexContent = parseInt(window.getComputedStyle($this.Content).zIndex);\n                            if (Number.isNaN(zIndexContent) || zIndexContent < zIndexWrapper) $this.Content.style.zIndex = zIndexWrapper + 1;\n                        }\n\n                        if (DialogBlur) {\n                            $this.DialogWrapper.style.background = 'none';\n                            Lure.Select(DialogBlur).classList.add('lure-blur');\n                        }\n                        if (DialogAnimation) {\n                            $this.Content.classList.add(DialogAnimation);\n                        }\n                    }\n                    BeforeShow.call($this, e);\n                    Shower.call($this, e);\n                    $this.Content.style.display = '';\n                    clearTimeout($this.__private.ToggleTimer);\n                    //this.Content.addEventListener('transitionend', Show.bind($this, e));\n                    if (Show !== null) {\n                        $this.__private.ToggleTimer = setTimeout(function () {\n                            Show.call($this, e);\n                        }, duration);\n                    }\n                };\n                this.Hide = function (e) {\n                    this.isActive = false;\n                    if (this.Control) this.Control.Disactive();\n                    var style = window.getComputedStyle($this.Content);\n                    var duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\n                    var durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\n                    if (duration < durationAni) duration = durationAni;\n                    duration++;\n                    if (Dialog) {\n                        Lure._DialogCount--;\n                        if ($this.DialogWrapper) $this.DialogWrapper.remove();\n                        if (DialogBlur && Lure._DialogCount < 1) Lure.Select(DialogBlur).classList.remove('lure-blur');\n                    }\n\n                    Hider.call($this, e);\n                    clearTimeout($this.__private.ToggleTimer);\n                    if (Hide !== null) $this.__private.ToggleTimer = setTimeout(function () {\n                        Hide.call($this, e);\n                    }, duration);\n                };\n                this.Toggle = function (e) {\n                    if ($this.isVisible) $this.Hide(e);else $this.Show(e);\n                };\n\n                this.__private = {};\n                this.__private.ToggleTimer = null;\n                this.Control = new Lure.Plugin.Content.Control(Control, $this);\n                this.Content.onclick = OnClick ? OnClick.bind($this) : null;\n                //SubContent\n                if (Array.isArray(SubContent)) {\n                    for (var i = 0; i < SubContent.length; i++) {\n                        {\n                            if (!SubContent[i].Parent) SubContent[i].Parent = $this;\n                            //  $this.__private.ContentNames.push(SubContent[i].Name);\n                            $this[SubContent[i].Name] = new Lure.Content(SubContent[i]);\n                        }\n                    }\n                } else {\n                    for (var cname in SubContent) {\n                        SubContent[cname].Parent = $this;\n                        SubContent[cname].Name = cname;\n                        //       $this.__private.ContentNames.push(cname);\n                        $this[cname] = new Lure.Content(SubContent[cname]);\n                    }\n                }\n                //title\n                this.TitleContent = Lure.Select(Title, this.Content);\n\n                if (Type === \"Untyped\" && Visible !== false && !Dialog) Visible = true;else if (Type !== \"Untyped\" && Visible !== true || Dialog && Visible !== true) Visible = false;\n                //if (Typed) Content is Visible\n                if (Visible) {\n                    this.Content.style.display = '';\n                    if (this.Control) this.Control.Active();\n                } else {\n                    //not undefined\n                    this.isActive = false;\n                    this.Content.style.display = 'none';\n                }\n                if (Controller) {\n                    if (Controller.isController) {\n                        this.Controller = Controller;\n                        this.Controller.Parent = this;\n                    } else {\n                        if (!Controller.Target) Controller.Target = this.Content;\n                        if (!Controller.Type) Controller.Type = \"Templator\";\n                        Controller.Parent = this;\n                        this.Controller = new Lure.Plugin.Content.Controller[Controller.Type](Controller);\n                    }\n                    if (this.Controller.isHasEditable) {\n                        Lure._EditablesEventListenerRun($this.Content);\n                    }\n                }\n\n                if (Sorting) {\n                    $this._Sorting = {};\n                    $this._Sorting._sorter = null;\n\n                    var _loop2 = function _loop2(f) {\n                        if (Sorting.hasOwnProperty(f) && f !== '_sorter') {\n                            $this._Sorting[f] = {\n                                Target: $this.Select(Sorting[f]),\n                                Sorted: false\n                            };\n                            $this._Sorting[f].Target.classList.add('mt-sorting');\n                            $this._Sorting[f].Target.addEventListener('click', function () {\n                                $this._Sorting._sorter = f;\n                                $this._SortBy(f, $this.Controller._Data);\n                            });\n                        }\n                    };\n\n                    for (var f in Sorting) {\n                        _loop2(f);\n                    }\n                    console.info('mt-sortable', $this._Sorting);\n                }\n                if (Filtering) {\n                    $this._Filter = {};\n                    $this._Filter._DataDefault = $this.Controller._Data.slice(0);\n\n                    var _loop3 = function _loop3(f) {\n                        if (Filtering.hasOwnProperty(f) && f !== '_format') {\n                            $this._Filter[f] = {\n                                Target: $this.Select(Filtering[f]),\n                                Filter: ''\n                            };\n                            $this._Filter[f].Target.classList.add('mt-filtering');\n                            $this._Filter[f].Target.innerHTML = '<input type=\"text\" class=\"mt-filtering-input\">';\n                            $this._Filter[f].Target.querySelector('.mt-filtering-input').addEventListener('keyup', function (e) {\n                                //$this._SortBy(f);\n                                $this._Filter[f].Filter = e.target.value.toLowerCase();\n                                $this._FilterBy();\n                            });\n                        }\n                    };\n\n                    for (var f in Filtering) {\n                        _loop3(f);\n                    }\n                }\n                if (!Lure.ContentList[$this.Type]) //if list is empty, create it, else just add\n                    Lure.ContentList[$this.Type] = [];\n                Lure.ContentList[$this.Type].push(this);\n\n                //close button\n                Array.from(this.Content.children).forEach(function (item) {\n                    if (item.classList.contains(\"close\")) item.onclick = function (e) {\n                        $this.Hide(e);\n                    };\n                });\n\n                setTimeout(function () {\n                    AfterBuild.call($this);\n                }, 1);\n            }\n        }\n\n        _createClass(LureContent, [{\n            key: 'RefreshOne',\n            value: function RefreshOne(i) {\n                if (this.Controller) this.Controller.RefreshOne(i);\n            }\n        }, {\n            key: 'Remove',\n            value: function Remove(i, removeData) {\n                if (this.Controller) this.Controller.Remove(i, removeData);\n            }\n        }, {\n            key: 'Add',\n            value: function Add(itemData) {\n                var extraclass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var isPrepend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var addData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n                if (this.Controller) this.Controller.Add(itemData, extraclass, isPrepend, addData);\n            }\n\n            /**\r\n             *\r\n             * @param {object} itemData\r\n             * @param {int} index\r\n             * @constructor\r\n             */\n\n        }, {\n            key: 'Edit',\n            value: function Edit(itemData, index) {\n                if (this.Controller) this.Controller.Edit(itemData, index);\n            }\n        }, {\n            key: 'Dispose',\n            value: function Dispose() {\n                this.Content.remove();\n                this.Control.Disactive();\n                delete this.Controller;\n                delete this.Control;\n            }\n        }, {\n            key: 'isVisible',\n            get: function get() {\n                return Lure.isVisible(this.Content);\n            }\n        }, {\n            key: 'Title',\n            get: function get() {\n                return this.TitleContent.innerHTML;\n            },\n            set: function set(t) {\n                this.TitleContent.innerHTML = t;\n            }\n        }, {\n            key: 'Data',\n            get: function get() {\n                if (this.Controller) return this.Controller.Data;\n                return null;\n            },\n            set: function set(data) {\n                if (this.Controller) this.Controller.Data = data;\n            }\n        }, {\n            key: 'Items',\n            get: function get() {\n                if (this.Controller) return this.Controller.Items;\n                return null;\n            }\n        }]);\n\n        return LureContent;\n    }(),\n    Control: function () {\n        function LureControl(control, owner) {\n            var _this = this;\n\n            _classCallCheck(this, LureControl);\n\n            if (control === null) return;\n            if (control.length > 0) //if control list not empty\n                {\n                    (function () {\n                        var controls = _this;\n\n                        var _loop4 = function _loop4(i) {\n                            if (!control[i].Name) control[i].Name = \"unnamed_\" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);\n                            controls[control[i].Name] = {\n                                Content: Lure.SelectAll(control[i].Target),\n                                _Content: control[i].Target,\n                                Type: control[i].Type ? control[i].Type : \"Untyped\",\n                                isGlobal: control[i].Global,\n                                OnClick: control[i].OnClick ? control[i].OnClick : owner.Show,\n                                OnChange: control[i].OnChange,\n                                Active: function Active() {\n                                    Lure.SelectAll(control[i].Target).forEach(function (item) {\n                                        item.classList.add('active');\n                                    });\n                                },\n                                Disactive: function Disactive() {\n                                    Lure.SelectAll(control[i].Target).forEach(function (item) {\n                                        item.classList.remove('active');\n                                    });\n                                }\n\n                            };\n                            //onclick\n                            controls[control[i].Name].Content.forEach(function (item) {\n                                item.classList.add('pointer');\n                            });\n                            if (control[i].Global) {\n\n                                Lure.AddEventListenerGlobal('click', control[i].Target, function (e) {\n                                    Lure.SelectAll(control[i].Target).forEach(function (item) {\n                                        item.classList.remove('active');\n                                    });\n                                    e.target.classList.add('active');\n                                    if (controls[control[i].Name].OnClick) controls[control[i].Name].OnClick.call(owner, e);\n                                });\n                            } else {\n                                controls[control[i].Name].Content.forEach(function (item) {\n                                    item.onclick = function (e) {\n                                        Lure.ContentList[owner.Type].forEach(function (item) {\n                                            if (item !== owner) {\n                                                if (item.Control) item.Control.Disactive();\n                                            }\n                                        });\n                                        //console.log('remover', e);\n                                        controls[control[i].Name].Content.forEach(function (item) {\n                                            item.classList.remove('active');\n                                        });\n                                        e.currentTarget.classList.add('active');\n                                        controls[control[i].Name].OnClick.call(owner, e);\n                                    };\n                                });\n                            }\n\n                            if (control[i].OnChange) {\n                                if (control[i].Global) {\n                                    Lure.AddEventListenerGlobal('change', control[i].Target, function (e) {\n                                        control[i].OnChange.call(owner, e);\n                                    });\n                                } else {\n                                    controls[control[i].Name].Content.forEach(function (item) {\n                                        item.onchange = function (e) {\n                                            control[i].OnChange.call(owner, e);\n                                        };\n                                    });\n                                }\n                            }\n                        };\n\n                        for (var i = 0; i < control.length; i++) {\n                            _loop4(i);\n                        }\n                    })();\n                }\n        }\n\n        _createClass(LureControl, [{\n            key: 'Active',\n            value: function Active() {\n                var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Untyped\";\n\n                for (var k in this) {\n                    if (this[k].Type === type) this[k].Content.forEach(function (item) {\n                        item.classList.add('active');\n                    });\n                }\n            }\n        }, {\n            key: 'Disactive',\n            value: function Disactive() {\n                var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Untyped\";\n\n                for (var k in this) {\n                    if (this[k].Type === type) {\n                        this[k].Content.forEach(function (item) {\n                            item.classList.remove('active');\n                        });\n                        if (this[k].isGlobal) Lure.SelectAll(this[k]._Content).forEach(function (item) {\n                            item.classList.remove('active');\n                        });\n                    }\n                }\n            }\n        }]);\n\n        return LureControl;\n    }(),\n    Controller: {\n        Templator: function () {\n            function Templator() {\n                var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                    _ref3$Target = _ref3.Target,\n                    Target = _ref3$Target === undefined ? null : _ref3$Target,\n                    _ref3$Data = _ref3.Data,\n                    Data = _ref3$Data === undefined ? [] : _ref3$Data,\n                    _ref3$ListElement = _ref3.ListElement,\n                    ListElement = _ref3$ListElement === undefined ? \".list_element\" : _ref3$ListElement,\n                    _ref3$EmptyMessage = _ref3.EmptyMessage,\n                    EmptyMessage = _ref3$EmptyMessage === undefined ? \"\" : _ref3$EmptyMessage,\n                    _ref3$EmptyHide = _ref3.EmptyHide,\n                    EmptyHide = _ref3$EmptyHide === undefined ? false : _ref3$EmptyHide,\n                    _ref3$PageSize = _ref3.PageSize,\n                    PageSize = _ref3$PageSize === undefined ? -1 : _ref3$PageSize,\n                    _ref3$DataCount = _ref3.DataCount,\n                    DataCount = _ref3$DataCount === undefined ? -1 : _ref3$DataCount,\n                    _ref3$PageGet = _ref3.PageGet,\n                    PageGet = _ref3$PageGet === undefined ? null : _ref3$PageGet,\n                    _ref3$ShowAllButton = _ref3.ShowAllButton,\n                    ShowAllButton = _ref3$ShowAllButton === undefined ? true : _ref3$ShowAllButton,\n                    _ref3$LineSave = _ref3.LineSave,\n                    LineSave = _ref3$LineSave === undefined ? function (line, property, newValue) {\n                    var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n                    setTimeout(function () {\n                        callback();\n                    }, 500);\n                } : _ref3$LineSave,\n                    _ref3$LineAdd = _ref3.LineAdd,\n                    LineAdd = _ref3$LineAdd === undefined ? function (dataObject) {\n                    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n                    setTimeout(function () {\n                        callback();\n                    }, 500);\n                } : _ref3$LineAdd,\n                    _ref3$EditModeSwitch = _ref3.EditModeSwitch,\n                    EditModeSwitch = _ref3$EditModeSwitch === undefined ? null : _ref3$EditModeSwitch,\n                    _ref3$DataSaveAll = _ref3.DataSaveAll,\n                    DataSaveAll = _ref3$DataSaveAll === undefined ? function () {} : _ref3$DataSaveAll,\n                    _ref3$NoAnimation = _ref3.NoAnimation,\n                    NoAnimation = _ref3$NoAnimation === undefined ? false : _ref3$NoAnimation,\n                    _ref3$NoBuild = _ref3.NoBuild,\n                    NoBuild = _ref3$NoBuild === undefined ? false : _ref3$NoBuild,\n                    _ref3$BeforeBuild = _ref3.BeforeBuild,\n                    BeforeBuild = _ref3$BeforeBuild === undefined ? function () {} : _ref3$BeforeBuild,\n                    _ref3$AfterBuild = _ref3.AfterBuild,\n                    AfterBuild = _ref3$AfterBuild === undefined ? function () {} : _ref3$AfterBuild,\n                    _ref3$AfterAdd = _ref3.AfterAdd,\n                    AfterAdd = _ref3$AfterAdd === undefined ? function () {} : _ref3$AfterAdd,\n                    _ref3$Parent = _ref3.Parent,\n                    Parent = _ref3$Parent === undefined ? null : _ref3$Parent;\n\n                _classCallCheck(this, Templator);\n\n                //### DEFINES\n                var $this = this;\n                this.isController = true;\n                if (Parent !== null) this.Content = Lure.Select(Target, Parent.Content);else this.Content = Lure.Select(Target);\n                this.Target = this.Content;\n                this._Data = Data;\n                this.EmptyMessage = EmptyMessage;\n                this.ListElement = \"\";\n\n                this.BeforeBuild = BeforeBuild.bind(this);\n                this.AfterBuild = AfterBuild.bind(this);\n                this.AfterAdd = AfterAdd.bind(this);\n                this.Parent = Parent;\n                //paginating\n                this.PageSize = PageSize;\n                this._PageSize = PageSize;\n                this._DataCount = DataCount > 0 ? DataCount : this._Data.length;\n                this._PageCursor = 0;\n                this._PageGet = PageGet;\n\n                //server handling\n                this.LineAdd = LineAdd;\n                this.LineSave = LineSave;\n                this.Type = null; // Refresh or ItemList\n\n                //settings\n                this.isShowAllButton = ShowAllButton;\n                this.isNoAnimaton = NoAnimation;\n                this.isEmptyHide = EmptyHide;\n\n                //fields to refresh (for refresh type)\n                var Dictionary = [];\n                this._Dictionary = Dictionary;\n                var Refresher = function Refresher() {\n                    //TODO refresh only changes\n                    if (!$this._Data) $this._Data = {};\n                    for (var i = 0; i < Dictionary.length; i++) {\n\n                        for (var j = 0; j < Dictionary[i].fields.length; j++) {\n                            var isAttribute = Dictionary[i].fields[j].Target.indexOf('attributes') > -1;\n                            var NewValue = Dictionary[i].fields[j].BuildValue($this._Data);\n                            if (isAttribute) {\n\n                                Dictionary[i].obj.attributes[Dictionary[i].fields[j].Target.split(\".\")[1]].value = NewValue;\n                            } else {\n                                Dictionary[i].obj[Dictionary[i].fields[j].Target] = Dictionary[i].fields[j].BuildValue($this._Data);\n                            }\n                        }\n                    }\n                };\n                this._Rebuilder = function () {\n                    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $this._Data;\n\n                    var lines = \"\";\n                    //$this.Content.style.display = '';\n                    if ($this._PageCursor === 0) $this.Content.querySelectorAll('.mt-line, .mt-paginator, .mt-empty').forEach(function (item) {\n                        item.remove();\n                    });\n                    //pagination check\n                    var NextCount = void 0;\n                    //let line;\n                    var Limit = data.length;\n                    $this._DataCount = DataCount > 0 ? DataCount : Limit;\n                    if ($this.PageSize > 0) {\n                        //  debugger;\n                        $this._DataCount = $this._DataCount > 0 ? $this._DataCount : data.length;\n                        var paginator = $this.Content.querySelector('.mt-paginator');\n                        if (paginator !== null) paginator.remove();\n                        Limit = parseInt($this._PageCursor) + parseInt($this.PageSize);\n                        if (Limit > $this._DataCount && $this._DataCount > 0) Limit = $this._DataCount;\n                        //how much will be load in next step\n                        NextCount = $this._DataCount - Limit;\n                        if (NextCount > $this.PageSize) NextCount = $this.PageSize;\n                    }\n                    if ($this.Type === \"ItemList\" && data.length === 0 && $this.EmptyMessage !== \"\" && !$this.isEmptyHide) {\n                        var tag = $this.ListElement.match(/\\s?([\\w]+) /)[0].replace(/\\s/g, \"\");\n                        var empty = document.createElement(tag);\n                        empty.classList.add('mt-empty');\n                        empty.innerHTML = $this.EmptyMessage;\n                        $this.Content.appendChild(empty);\n                        return;\n                    } else if ($this.Type === \"ItemList\" && data.length === 0 && $this.isEmptyHide) {\n                        $this.Content.style.display = 'none';\n                        return;\n                    } else if (data.length === 0) {\n                        return;\n                    }\n                    //linebuilding\n                    for (var i = $this._PageCursor; i < Limit; i++) {\n                        lines += $this._LineBuilder(data[i], i, data.length);\n                    } //appending\n                    //   debugger;\n                    if ($this.Content.children.length < 1) {\n                        $this.Content.innerHTML = lines;\n                    } else {\n                        lines = Lure.CreateElementsFromString(lines, $this.Content.tagName);\n                        if (lines !== null) lines.forEach(function (item) {\n                            $this.Content.appendChild(item);\n                        });\n                    }\n                    /*{\r\n                     lines += $this._LineBuilder(data[i], i, data.length);\r\n                     //if should to save changed class list after rebuild\r\n                     if (data[i] && data[i].$classlist)\r\n                     {\r\n                     line = $(line);\r\n                     line.attr('class', data[i].$classlist);\r\n                     lines +=line[0].outerHTML;\r\n                     }\r\n                     else{\r\n                     lines += line;\r\n                     }\r\n                     }*/\n                    //save cursor index\n                    if ($this.PageSize > 0) $this._PageCursor = Limit;\n                    //PAGINATION BUILD\n                    //limit data case\n                    if ($this.PageSize > 0 && $this._PageCursor < $this._DataCount) {\n                        var also = void 0;\n                        var showAll = '<span>  (\\u041D\\u0435 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0435\\u043D\\u043E ' + ($this._DataCount - $this._PageCursor) + ') </span>';\n                        if ($this.isShowAllButton) {\n                            showAll = '<span> \\u0438\\u043B\\u0438 </span><span class=\"mt-btn-nextAll dotted pointer\"> \\u0412\\u0441\\u0435 ( ' + ($this._DataCount - $this._PageCursor) + ' )</span>';\n                        }\n                        var isTable = $this.Content.tagName === 'table' || $this.Content.tagName === 'thead' || $this.Content.tagName === 'tbody';\n                        if (isTable) {\n                            var colspan = $this.Content.querySelector(\"tr:first-child th\").length + 1;\n\n                            also = '<tr class=\"mt-paginator\"><td colspan=\"' + colspan + '\" class=\"element block-head\"><span class=\"tpltr-next dotted pointer\">\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0435\\u0449\\u0435 ' + NextCount + '</span>' + showAll + '</td></tr>';\n                            also = Lure.CreateElementFromString(also, $this.Content.tagName);\n                        } else {\n                            also = Lure.CreateElementFromString('<div class=\\'mt-paginator\\'><span class=\"mt-btn-next dotted pointer\">\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0435\\u0449\\u0435 ' + NextCount + '</span>' + showAll + '</div>');\n                        }\n                        var btnNext = also.querySelector('.mt-btn-next');\n                        //console.log('btnNext', btnNext);\n                        btnNext.onclick = function () {\n                            if ($this._PageCursor >= data.length) $this._PageGet($this._PageCursor, $this.PageSize, BuildWithIt);else Build();\n                        };\n                        var btnNextAll = also.querySelector('.mt-btn-nextAll');\n                        btnNextAll.onclick = function () {\n                            $this.PageSize = $this._DataCount;\n                            if ($this._PageGet !== null) $this._PageGet($this._PageCursor, $this._DataCount - $this._PageCursor, BuildWithIt);else Build();\n                        };\n                        $this.Content.appendChild(also);\n                    }\n                };\n                var Build = function Build() {\n                    $this.BeforeBuild();\n\n                    if ($this.Type === \"Refresh\") Refresher();else if ($this.Type === \"ItemList\" /* && $this._Data.length > 0*/) $this._Rebuilder();\n\n                    $this.AfterBuild();\n                };\n                var BuildWithIt = function BuildWithIt(data) {\n                    for (var i = 0; i < data.length; i++) {\n                        $this._Data.push(data[i]);\n                    }Build();\n                };\n                // = Rebuild1er;\n\n                //#### METHODS\n                this.FieldAdd = function (element) {\n                    var elemAttributes = element.attributes;\n                    var fields = [];\n                    var WhatFields = -1; // 0-att only, 1-innerHTML only, 2-both\n                    //find fields in attributes\n                    for (var i = 0; i < elemAttributes.length; i++) {\n                        if (elemAttributes[i].value.indexOf(\"{{\") > -1) {\n                            if (elemAttributes[i].name !== 'value') fields.push({\n                                Target: 'attributes.' + elemAttributes[i].name,\n                                BuildValue: Lure.Compile(elemAttributes[i].value)\n                            });else {\n                                fields.push({\n                                    Target: elemAttributes[i].name,\n                                    BuildValue: Lure.Compile(elemAttributes[i].value)\n                                });\n                            }\n                            WhatFields = 0;\n                        }\n                    }\n                    //innerHTML check\n                    if (element.childNodes.length < 2) {\n                        if (element.innerHTML.indexOf(\"{{\") > -1) {\n                            fields.push({\n                                Target: \"innerHTML\",\n                                BuildValue: Lure.Compile(element.innerHTML)\n                            });\n                            WhatFields = WhatFields !== 0 ? 1 : 2; //1 if no att, 2 if att exists\n                        }\n                    }\n                    if (WhatFields > -1) {\n                        Dictionary.push({\n                            obj: element,\n                            fields: fields\n                        });\n                    }\n                };\n                this.Refresh = function () {\n                    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n                    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n                    $this.PageSize = $this._PageSize;\n                    $this._PageCursor = 0;\n                    if (data !== null) $this._Data = data;\n                    $this.PageCursor = 0;\n                    if (index === null) Build();else $this.RefreshOne(index);\n                };\n                this.RefreshOne = function (i) {\n                    var newItem = Lure.CreateElementFromString($this._LineBuilder($this._Data[i], i, $this._Data.length), $this.Content.tagName);\n                    var itemOld = $this.Items[i];\n                    $this.Items[i].parentNode.replaceChild(newItem, itemOld);\n                };\n                this.Add = function (item) {\n                    var extraclass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                    var isPrepend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                    var addData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n                    if ($this._Data.length === 0 && $this.Content.querySelector(\".mt-empty\") !== null) $this.Content.querySelector(\".mt-empty\").remove();\n                    var fragment = document.createDocumentFragment();\n                    var elem = document.createElement($this.Content.tagName);\n                    var i = void 0;\n                    if (!isPrepend) {\n                        i = $this._Data.length;\n                        if (!addData) i--;\n                        elem.innerHTML = $this._LineBuilder(item, i, i + 1);\n                        while (elem.childNodes[0]) {\n                            fragment.appendChild(elem.childNodes[0]);\n                        }\n                        if (extraclass) fragment.children[0].classList.add(extraclass);\n                        if (addData) $this._Data.push(item);\n                        $this.Content.appendChild(fragment);\n                    } else {\n                        i = 0;\n                        //change data-line attributes\n                        $this.Items.forEach(function (item) {\n                            console.log(item);\n                            console.log(item.dataset['line']);\n                            item.dataset['line'] = parseInt(item.dataset['line']) + 1;\n                        });\n                        //TODO rendered indexes not changings\n\n                        elem.innerHTML = $this._LineBuilder(item, 0, $this._Data.length + 1);\n                        while (elem.childNodes[0]) {\n                            fragment.appendChild(elem.childNodes[0]);\n                        }\n                        if (extraclass) fragment.children[0].classList.add(extraclass);\n                        if (addData) $this._Data.unshift(item);\n                        $this.Content.prepend(fragment);\n                    }\n                    //server saver\n                    if ($this.LineAdd !== null) {\n                        $this.LineAdd(item, function () {\n                            //remove extraclass callback\n                            var x = $this.Content.querySelector('.' + extraclass);\n                            if (x) x.classList.remove(extraclass);\n                        });\n                    }\n                    $this.AfterAdd(item, i);\n                };\n                this.Edit = function (itemData, i) {\n                    console.log('edit itemData', i, itemData);\n                    Array.from($this.Items).filter(function (x) {\n                        return parseInt(x.dataset['line']) === i;\n                    })[0].classList.add('editable-waiting');\n                    $this.LineSave(i, '$this', itemData, function () {\n                        $this._Data[i] = itemData;\n                        $this.RefreshOne(i);\n                    });\n                };\n                /**\r\n                 *\r\n                 * @param {int} index\r\n                 * @param {bool} removeData\r\n                 * @constructor\r\n                 */\n                this.Remove = function (index) {\n                    var removeData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n                    //TODO rendered indexes not changings\n                    $this.Content.querySelector('.mt-line[data-line=\"' + index + '\"]').remove();\n                    for (var j = index; j < $this.Items.length; j++) {\n                        $this.Items[j].dataset['line'] = parseInt($this.Items[j].dataset['line']) - 1;\n                        $this.Items[j].querySelectorAll('[data-line]').forEach(function (item) {\n                            item.dataset['line'] = parseInt(item.dataset['line']) - 1;\n                        });\n                    }\n                    if (removeData) $this._Data.splice(index, 1);\n                    if ($this._Data.length === 0) $this.Refresh();\n                };\n                this.SwitchToEditMode = function () {\n                    Lure.Editable.EditMode = true;\n                    Lure.SelectAll('.editable', $this.Content).forEach(function (item) {\n                        // console.log(item);\n                        Lure.Editable.AddEdits(item);\n                    });\n                };\n\n                //### CONSTRUCTOR\n                if (Array.isArray(this._Data)) {\n                    this.Type = \"ItemList\";\n                    var isListElementCssSelector = ListElement.match(/^[a-zA-Z0-9.,\\-_ *#]+$/g) !== null;\n                    if (isListElementCssSelector) {\n                        var element = this.Content.querySelector(ListElement);\n                        element.classList.add('mt-line');\n                        ListElement = element.outerHTML;\n                        element.remove();\n                    } else {\n                        var list_element = ListElement.match(/<[^>]+>/)[0];\n                        var list_elementClassed = void 0;\n                        var pos = list_element.indexOf('class=\"');\n                        if (pos < 0) {\n                            list_elementClassed = list_element.substr(0, list_element.length - 1) + ' class=\"mt-line\"' + list_element.substr(list_element.length - 1);\n                        } else {\n                            pos = list_element.indexOf('\"', pos + 8);\n                            list_elementClassed = list_element.substr(0, pos) + \" mt-line\" + list_element.substr(pos);\n                        }\n                        ListElement = ListElement.replace(list_element, list_elementClassed);\n                    }\n                    //add data-line attribute\n                    ListElement = ListElement.replace(/<[\\s\\S]+?(>)/, function (a, b) {\n                        return a.replace(b, ' data-line=\"{{i}}\">');\n                    });\n                    this.ListElement = ListElement;\n                    this._LineBuilder = Lure.Compile(ListElement, true);\n                    if (ListElement.match(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/) !== null) {\n                        this.isHasEditable = true;\n                        if (EditModeSwitch !== null) Lure.Select(EditModeSwitch).addEventListener('change', function (e) {\n                            if (e.currentTarget.checked) {\n                                $this.SwitchToEditMode();\n                            } else {\n                                Lure.Editable.EditMode = false;\n                                document.body.click();\n                            }\n                        });\n                    }\n                    this.Content.MonsieurController = this;\n                    this.Content.classList.add('mt-content');\n                } else {\n                    this.Type = \"Refresh\";\n                    var AllChildren = Array.prototype.slice.call(this.Content.querySelectorAll('*:not(g):not(path):not(clipPath):not(text):not(br)'));\n                    AllChildren.push(this.Content);\n                    AllChildren.forEach(function (item) {\n                        $this.FieldAdd(item);\n                    });\n                }\n                Lure.TemplatorList.push(this);\n                if (!NoBuild) Build();\n            }\n\n            _createClass(Templator, [{\n                key: 'Data',\n                get: function get() {\n                    return this._Data;\n                },\n                set: function set(data) {\n                    this._Data = data;\n                }\n            }, {\n                key: 'Items',\n                get: function get() {\n                    return this.Content.querySelectorAll('.mt-line');\n                }\n            }]);\n\n            return Templator;\n        }(),\n        TreeBuilder: function () {\n            function TreeBuilder(_ref4) {\n                var _ref4$Target = _ref4.Target,\n                    Target = _ref4$Target === undefined ? null : _ref4$Target,\n                    _ref4$Data = _ref4.Data,\n                    Data = _ref4$Data === undefined ? [] : _ref4$Data,\n                    _ref4$ListElement = _ref4.ListElement,\n                    ListElement = _ref4$ListElement === undefined ? null : _ref4$ListElement,\n                    _ref4$Drop = _ref4.Drop,\n                    Drop = _ref4$Drop === undefined ? false : _ref4$Drop,\n                    _ref4$SubSelector = _ref4.SubSelector,\n                    SubSelector = _ref4$SubSelector === undefined ? null : _ref4$SubSelector,\n                    _ref4$SubSelectorHand = _ref4.SubSelectorHandler,\n                    SubSelectorHandler = _ref4$SubSelectorHand === undefined ? function () {} : _ref4$SubSelectorHand,\n                    _ref4$BeforeBuild = _ref4.BeforeBuild,\n                    BeforeBuild = _ref4$BeforeBuild === undefined ? function () {} : _ref4$BeforeBuild,\n                    _ref4$AfterBuild = _ref4.AfterBuild,\n                    AfterBuild = _ref4$AfterBuild === undefined ? function () {} : _ref4$AfterBuild,\n                    _ref4$Parent = _ref4.Parent,\n                    Parent = _ref4$Parent === undefined ? null : _ref4$Parent;\n\n                _classCallCheck(this, TreeBuilder);\n\n                //### DEFINES\n                this.isController = true;\n                this.Content = Lure.Select(Target);\n                this.Target = this.Content;\n                this.Parent = Parent;\n                this._Data = Data;\n                this.SubSelector = SubSelector;\n                this.SubSelectorHandler = SubSelectorHandler.bind(this);\n                this.BeforeBuild = BeforeBuild.bind(this);\n                this.AfterBuild = AfterBuild.bind(this);\n                var SubTreeClass = Drop ? 'mtb-sub_tree dropable' : 'mtb-sub_tree';\n                var Lvl = 0;\n                var Branch = ListElement === null ? this.Content.innerHTML : ListElement;\n                if (this.SubSelector === null) {\n                    this.SubSelector = '.mtb-sub_tree';\n                    Branch = Branch.replace(/^([\\s\\S]*)(<\\/\\w+>)$/, function (match, html, entag) {\n                        entag = '<div class=\"' + SubTreeClass + '\"></div>' + entag;\n                        return html + entag;\n                    });\n                }\n                this.LineBuilder = Lure.Compile(Branch, true);\n                var $this = this;\n\n                var Index = 0; //unque serial number of branch\n\n                var BuildElement = function BuildElement(obj, key, indexJ) {\n                    Index++;\n                    var extra = {\n                        $lvl: Lvl,\n                        $key: key,\n                        $index: Index,\n                        $j: indexJ\n                    };\n                    var line = Lure.CreateElementFromString($this.LineBuilder(obj, Index, null, extra));\n                    line.classList.add('mtb-branch');\n                    for (var _key in obj) {\n                        var ObjItem = obj[_key];\n                        if (Array.isArray(ObjItem)) {\n                            Lvl++;\n                            for (var i = 0; i < ObjItem.length; i++) {\n                                if ($this.SubSelector === null) {\n                                    line.appendChild(BuildElement(ObjItem[i], _key, i));\n                                } else {\n                                    line.classList.add('mtb-has_tree');\n                                    if (Drop) line.classList.add('dropable');\n                                    var sub = line.querySelector($this.SubSelector);\n                                    sub.appendChild(BuildElement(ObjItem[i], _key, i));\n                                }\n                            }\n                            Lvl--;\n                        }\n                    }\n                    return line;\n                };\n                var Build = function Build() {\n                    $this.BeforeBuild();\n                    if (Array.isArray($this._Data)) {\n                        $this.Content.innerHTML = '';\n                        Lvl++;\n                        for (var j = 0; j < $this._Data.length; j++) {\n                            $this.Content.appendChild(BuildElement($this._Data[j], \"root\", 0));\n                        }Lvl--;\n                    } else {\n                        $this.Content.appendChild(BuildElement($this._Data, \"root\", 0));\n                    }\n                    Lvl = 0;\n                    Index = 0;\n                    $this.AfterBuild();\n                };\n\n                Build(this._Data);\n\n                //### METHODS\n                this.Refresh = function () {\n                    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $this._Data;\n\n                    $this._Data = data;\n                    Build();\n                };\n            }\n\n            _createClass(TreeBuilder, [{\n                key: 'Data',\n                get: function get() {\n                    return this._Data;\n                },\n                set: function set(data) {\n                    this._Data = data;\n                }\n            }]);\n\n            return TreeBuilder;\n        }()\n    }\n};\n//register plugin\nLure.Content = Lure.Plugin.Content.Content;\n\n//Lure.Content = Lure.Content;\n\n\n//Tutorial\n//TargetButton = {string, HTMLElement} - button who start the tutor\n//TargetContent = {string, HTMLElement} - select/element where search tutors\nLure.Plugin.Tutor =\n/**\r\n *\r\n * @param {HTMLElement} TargetButton\r\n * @param {HTMLElement} TargetContent\r\n */\nfunction MonsieurTutor() {\n    var TargetButton = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var TargetContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, MonsieurTutor);\n\n    //### DEFINES\n    var $this = this;\n    this.TargetButton = Lure.Select(TargetButton);\n    this.TargetContent = Lure.Select(TargetContent);\n    var MT = '<div class=\"lure-tutor\">\\n                        <div class=\"cd-caption\">\\n                            <span>\\u0428\\u0430\\u0433 </span>\\n                            <span class=\"lure-tutor_step\"></span>\\n                        </div>\\n                        <div class=\"lure-tutor_desc\"></div>\\n                        <div class=\"lure-tutor_btns\">\\n                            <button class=\"button btn-tutor btn-tutor-stop\">\\u041F\\u0440\\u0435\\u0440\\u0432\\u0430\\u0442\\u044C \\u043E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435</button>\\n                            <button class=\"button btn-tutor btn-tutor-next\">\\u0414\\u0430\\u043Be\\u0435 \\u2192</button></div>\\n                   </div>';\n    this.Content = Lure.CreateElementFromString(MT);\n    this.ContentBG = Lure.CreateElementFromString('<div class=\"lure-tutor-bg dialog-wrapper\"></div>');\n    this.Content.style.display = 'none';\n    this.ContentBG.style.display = 'none';\n    this._Description = this.Content.querySelector('.lure-tutor_desc');\n    this._Step = this.Content.querySelector('.lure-tutor_step');\n    this._ButtonNext = this.Content.querySelector('.btn-tutor-next');\n    this._ButtonStop = this.Content.querySelector('.btn-tutor-stop');\n\n    $this.Data = [];\n    var ButtonNextText = this._ButtonNext.innerHTML;\n    var TutorPosition = 0;\n    /*get transparent*/\n    var temp = document.createElement('div');\n    temp.style.display = 'none';\n    document.body.appendChild(temp);\n    var ColorTransparent = window.getComputedStyle(temp).backgroundColor;\n    temp.remove();\n    //---\n    var ElemCssRestore = function ElemCssRestore() {\n        var Element = $this.Data[TutorPosition - 1].obj;\n        if (Element.tagName.toLowerCase() !== 'tr') {\n            Element.style.zIndex = '';\n            Element.style.position = '';\n            Element.style.outline = '';\n            Element.style.display = '';\n            Element.style.backgroundColor = '';\n            return;\n        }\n        var nElements = Element.querySelectorAll('th, td');\n        nElements.forEach(function (elem) {\n            elem.style.position = '';\n            elem.style.zIndex = '';\n        });\n    };\n    var ElemCssSet = function ElemCssSet(Element) {\n        if (Element.tagName.toLowerCase() !== 'tr') {\n            Element.style.zIndex = '11';\n            Element.style.position = 'relative';\n            Element.style.outline = '5px #bee0ff solid';\n            var style = window.getComputedStyle(Element);\n            if (style.backgroundColor === ColorTransparent) Element.style.backgroundColor = \"#fff\";\n            if (!Lure.isVisible(Element)) {\n                if (Element.tagName.toLowerCase() !== \"table\") Element.style.display = 'block';else Element.style.display = 'table';\n            }\n            /* if (Element.length > 1)\r\n             Element.eq(1).css({zIndex: '', outline: ''});*/\n            return;\n        }\n        var nElements = Element.querySelectorAll('th, td');\n        nElements.forEach(function (elem) {\n            elem.style.zIndex = \"11\";\n            elem.style.position = \"relative\";\n            var style = window.getComputedStyle(elem);\n            if (style.backgroundColor === ColorTransparent) {\n                elem.style.backgroundColor = \"#fff\";\n            }\n        });\n        /* if (Element.length > 1)\r\n         Element.eq(1).css({zIndex: '', outline: ''});*/\n    };\n    var Run = function Run() {\n        console.log(\"tutor run\");\n        if ($this.TargetContent === null) return;\n        var Items = $this.TargetContent.querySelectorAll('*[data-tutor]:not([data-line]), *[data-tutor][data-line=\"0\"]');\n        if (Items.length < 1) {\n            Lure.Confirm(\"Сообщение\", \"На этом экране нет подсказок\");\n            return;\n        }\n        // document.body.style.position = 'relative';\n\n        Items.forEach(function (item) {\n            $this.Data.push({\n                obj: item,\n                desc: item.dataset['tutor']\n            });\n        });\n        $this.Content.style.display = '';\n        $this.ContentBG.style.display = '';\n        GoStep();\n    };\n    var GoStep = function GoStep() {\n        //restore prev element's css\n        if (TutorPosition > 0) ElemCssRestore();\n        if (TutorPosition === $this.Data.length) {\n            Stop();\n            return;\n        }\n        //select next elem\n        var Element = $this.Data[TutorPosition].obj;\n        var ElementDesc = $this.Data[TutorPosition].desc;\n        // check for invisible parent\n        var ElemParent = ElementDesc.match(/{([\\s\\S]+)}/);\n        if (ElemParent !== null) {\n            ElemParent = ElemParent[1];\n            ElementDesc = ElementDesc.replace(/{([\\s\\S]+)}/, '');\n            Element = Element.closest(ElemParent);\n            $this.Data[TutorPosition].obj = Element;\n            //Element.push( );\n        }\n        //set element visible\n        ElemCssSet(Element);\n        //write new element title and desc\n        $this._Step.innerHTML = TutorPosition + 1 + \"/\" + $this.Data.length;\n        $this._Description.innerHTML = ElementDesc;\n        //caption next button\n        if (TutorPosition + 1 === $this.Data.length) {\n            $this._ButtonNext.innerHTML = 'Завершить';\n            $this._ButtonStop.style.opacity = '0';\n        }\n\n        //move tutor desc box\n        var posX = Element.offsetLeft + Element.clientWidth + 10;\n        var posY = Element.offsetTop - $this.Content.clientHeight - 10;\n        if (posY < 10) posY = 10;\n        if (posX + $this.Content.clientWidth > window.innerWidth) {\n            posX = Element.offsetLeft - $this.Content.clientWidth - 10;\n            if (window.innerWidth < $this.Content.clientWidth + Element.clientWidth) {\n                posX = Element.offsetLeft + Element.clientWidth - $this.Content.clientWidth - 20;\n            }\n        }\n        if (document.documentElement.scrollTop > posY || document.documentElement.scrollTop + window.innerHeight < Element.offsetTop + Element.offsetHeight) {\n            //$('html, body').animate({scrollTop: posY - 10}, 300);\n            document.documentElement.scrollTop = posY - 10 + 'px';\n        }\n        if (posX < 10) posX = 10;\n        $this.Content.style.left = posX + 'px';\n        $this.Content.style.top = posY + 'px';\n\n        TutorPosition++;\n    };\n    var Stop = function Stop() {\n        //     document.body.style.position = '';\n        ElemCssRestore();\n        $this.Content.style.display = 'none';\n        $this.ContentBG.style.display = 'none';\n        $this._ButtonNext.innerHTML = ButtonNextText;\n        $this._ButtonStop.style.opacity = '';\n        TutorPosition = 0;\n        $this.Data = [];\n    };\n    //### CONSTRUCT\n\n    this.TargetButton.onclick = Run;\n    this._ButtonNext.onclick = GoStep;\n    this._ButtonStop.onclick = Stop;\n\n    document.body.appendChild(this.Content);\n    document.body.appendChild(this.ContentBG);\n\n    //### METHODS\n    this.Run = Run;\n};\n\nLure.Plugin.Load = function () {\n    function MonsieurLoading() {\n        var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            _ref5$Target = _ref5.Target,\n            Target = _ref5$Target === undefined ? 'body' : _ref5$Target;\n\n        _classCallCheck(this, MonsieurLoading);\n\n        this.Target = Lure.Select(Target);\n        this.Target.style.position = 'relative';\n        this.Content = Lure.CreateElementFromString('<div class=\"ajax-loading\" style=\"display: none\"></div>');\n        var cx = 60; //diameter\n        var cy = 60;\n        var _DoArc = function _DoArc(radius, maxAngle) {\n            var d = \" M \" + (cx + radius) + \" \" + cy;\n            for (var angle = 0; angle < maxAngle; angle++) {\n                var rad = angle * (Math.PI / 180); //deg to rad\n                var x = cx + Math.cos(rad) * radius;\n                var y = cy + Math.sin(rad) * radius;\n                d += \" L \" + x + \" \" + y;\n            }\n            return d;\n        };\n        var svg = '<svg xmlns=\"http://www.w3.org/2000/svg\">\\n                     <path d=\"' + _DoArc(45, 160) + '\" class=\"lure-arc1\" fill=\"none\" stroke=\"#449b22\" stroke-width=\"5\"></path>\\n                     <path d=\"' + _DoArc(40, 130) + '\" class=\"lure-arc2\" fill=\"none\" stroke=\"#61c8de\" stroke-width=\"5\"></path>\\n                     <path d=\"' + _DoArc(35, 100) + '\" class=\"lure-arc3\" fill=\"none\" stroke=\"#761c19\" stroke-width=\"5\"></path>\\n                     <path d=\"' + _DoArc(30, 70) + '\"  class=\"lure-arc4\" fill=\"none\" stroke=\"#333333\" stroke-width=\"5\"></path>\\n                   </svg>';\n        this.Target.appendChild(this.Content);\n        this.Content.innerHTML = svg;\n        this.Timeout = null;\n    }\n\n    _createClass(MonsieurLoading, [{\n        key: 'Show',\n        value: function Show() {\n            var $this = this;\n            this.Content.style.display = '';\n            clearTimeout(this.TimeoutHide);\n            this.Timeout = setTimeout(function () {\n                $this.Content.style.display = 'block';\n            }, 70);\n        }\n    }, {\n        key: 'Hide',\n        value: function Hide() {\n            var $this = this;\n            clearTimeout(this.Timeout);\n            this.TimeoutHide = setTimeout(function () {\n                $this.Content.style.display = 'none';\n            }, 250); //hide may be called in same time as the show()\n        }\n    }]);\n\n    return MonsieurLoading;\n}();\n\nLure.Plugin.Tooltip = function MonsieurTooltip(_ref6) {\n    var _ref6$Target = _ref6.Target,\n        Target = _ref6$Target === undefined ? document : _ref6$Target,\n        _ref6$Attribute = _ref6.Attribute,\n        Attribute = _ref6$Attribute === undefined ? \"data-tooltip\" : _ref6$Attribute,\n        _ref6$Delay = _ref6.Delay,\n        Delay = _ref6$Delay === undefined ? 400 : _ref6$Delay,\n        _ref6$Time = _ref6.Time,\n        Time = _ref6$Time === undefined ? 1100 : _ref6$Time,\n        _ref6$Cursor = _ref6.Cursor,\n        Cursor = _ref6$Cursor === undefined ? \"help\" : _ref6$Cursor,\n        _ref6$Custom = _ref6.Custom,\n        Custom = _ref6$Custom === undefined ? '<div class=\"lure-tooltip\">' : _ref6$Custom,\n        _ref6$AfterBuild = _ref6.AfterBuild,\n        AfterBuild = _ref6$AfterBuild === undefined ? function () {} : _ref6$AfterBuild;\n\n    _classCallCheck(this, MonsieurTooltip);\n\n    var $this = this;\n    this.ToolTip = Lure.CreateElementFromString(Custom);\n    var Timer = null;\n    var Destr = null;\n    this.Target = Lure.Select(Target);\n    var Show = function (text) {\n        this.ToolTip.innerHTML = text;\n        $this.Target.appendChild(this.ToolTip);\n    }.bind(this);\n    Lure.AddEventListenerGlobal('mouseover', '[' + Attribute + ']', function (e) {\n        var text = e.currentTarget.dataset[Attribute.replace('data-', '')];\n        clearTimeout(Destr);\n        Timer = setTimeout(function () {\n            Show(text);\n        }, Delay);\n    }, this.Target);\n    Lure.AddEventListenerGlobal('mouseout', '[' + Attribute + ']', function (e) {\n        clearTimeout(Timer);\n        Destr = setTimeout(function () {\n            //$this.ToolTip.remove();\n        }, Time);\n    }, this.Target);\n    setTimeout(function () {\n        AfterBuild.bind($this);\n    }, 0);\n};\n\nLure.Tutor = Lure.Plugin.Tutor;\nLure.Load = Lure.Plugin.Load;\nLure.Tooltip = Lure.Plugin.Tooltip;\n\nLure.Plugin.Chart = {\n    Core: '',\n    Chart: function () {\n        function LureChart() {\n            var Target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref7$Type = _ref7.Type,\n                Type = _ref7$Type === undefined ? 'Line' : _ref7$Type,\n                _ref7$Title = _ref7.Title,\n                Title = _ref7$Title === undefined ? '' : _ref7$Title,\n                _ref7$Labels = _ref7.Labels,\n                Labels = _ref7$Labels === undefined ? {\n                Rotation: 'auto',\n                Data: []\n            } : _ref7$Labels,\n                _ref7$Series = _ref7.Series,\n                Series = _ref7$Series === undefined ? [{ Data: [], Type: '', OwnAxis: false, Color: '#eee' }, { Data: [], Type: '', OwnAxis: [0, 100], Color: '#eee' }] : _ref7$Series,\n                _ref7$Tooltip = _ref7.Tooltip,\n                Tooltip = _ref7$Tooltip === undefined ? {\n                Template: 'Name: {{Name}}<br>Value: {{Value}}'\n            } : _ref7$Tooltip,\n                _ref7$AxisY = _ref7.AxisY,\n                AxisY = _ref7$AxisY === undefined ? {\n                Scale: ['auto', 'auto', 'auto'],\n                Visible: true\n            } : _ref7$AxisY,\n                _ref7$Height = _ref7.Height,\n                Height = _ref7$Height === undefined ? 400 : _ref7$Height,\n                _ref7$SeriesOptions = _ref7.SeriesOptions,\n                SeriesOptions = _ref7$SeriesOptions === undefined ? {} : _ref7$SeriesOptions;\n\n            _classCallCheck(this, LureChart);\n\n            /// <DEFAULTS>\n            //const Colors = ['red', 'green', 'blue'];\n            var ColorsDefault = ['red', 'green', 'cornflowerblue', 'purple', 'palevioletred', 'orange'];\n            //const DefaultPoint = {\n            //    Visible: true,\n            //    Radius: 4\n            //};\n            /// </DEFAULTS>\n            ///\n            var chart = this;\n            this.Content = Lure.Select(Target);\n            this.Content.classList.add('mt-chart'); // mt\n            this.Content.style.position = 'relative';\n\n            this.isGraph = true; //(Series.filter(x=>x.Type?x.Type.toLowerCase():x.Type === 'line' || x.Type?x.Type.toLowerCase():x.Type === 'bar')).length === Series.length;\n\n            var Buffer = {\n                Legend: '',\n                AxisX: '',\n                AxisY: '',\n                Grid: '',\n                Svg: '',\n\n                Height: 0,\n                Width: 0,\n                Abscissa: null,\n                SeriesPoints: [],\n\n                ParametersAxisX: null\n\n            };\n\n            this._Series = Series;\n            //define Series\n            this.__InitSeries = function () {\n                var Se = [];\n\n                for (var i = 0; i < this._Series.length; i++) {\n                    var ep = {};\n                    ep.Name = this._Series[i].Name ? this._Series[i].Name : 'Unnamed';\n                    ep.Data = this._Series[i].Data;\n                    ep.OwnAxis = this._Series[i].OwnAxis;\n                    ep.Title = this._Series[i].Title ? this._Series[i].Title : ep.Name;\n                    ep.Type = this._Series[i].Type ? this._Series[i].Type.toLowerCase() : Type ? Type.toLowerCase() : 'line';\n                    ep.Color = this._Series[i].Color ? this._Series[i].Color : ColorsDefault[i] ? ColorsDefault[i] : '#000';\n                    ep.Width = this._Series[i].Width ? this._Series[i].Width : 2;\n\n                    ep.Point = Series[i].Point;\n                    ep.Point = Lure.Chart.GetSeriePointOptions(ep);\n\n                    Buffer.Legend += Lure.Chart.MakeLegend(ep, i);\n                    Se.push(ep);\n                }\n                return Se;\n            }.bind(this);\n\n            this.Options = {\n                //Type: Type? Type.toLowerCase(): 'line',\n                Title: Title ? Title : '',\n                Labels: {\n                    Visible: typeof Labels.Visible === 'undefined' || Labels.Visible,\n                    Rotation: Labels.Rotation ? Labels.Rotation : 'auto',\n                    Data: Labels.Data ? Labels.Data : []\n                },\n                Series: this.__InitSeries(),\n                SeriesOptions: {\n                    BarStack: false,\n                    BarGradient: true\n                },\n                AxisY: {\n                    Scale: AxisY.Scale ? [Lure.isNumeric(AxisY.Scale[0]) ? AxisY.Scale[0] : 'auto', Lure.isNumeric(AxisY.Scale[1]) ? AxisY.Scale[1] : 'auto', Lure.isNumeric(AxisY.Scale[2]) ? AxisY.Scale[2] : 'auto'] : ['auto', 'auto', 'auto'],\n                    Visible: typeof AxisY.Visible === 'undefined' || AxisY.Visible\n                },\n                Tooltip: {\n                    Template: Tooltip.Template ? Tooltip.Template : 'Name: {{Name}}<br>Value: {{Value}}'\n                }\n            };\n            this.Block = function () {\n                this.Content.innerHTML = '<div class=\"mt-chart col\">\\n                                        <div class=\"mt-chart-caption\">\\n                                          <div class=\\'mt-chart-title\\'>' + Title + '</div>\\n                                          <div class=\"mt-chart-legend row\"></div>\\n                                        </div>\\n                                        <div class=\"mt-chart-kek row flex-100\">\\n                                          <div class=\"mt-chart-y row\"></div>\\n                                          <div class=\"col flex-100\">\\n                                            <div class=\"mt-chart-area row flex-100\">\\n                                              <svg class=\"mt-chart-svg\"></svg>\\n                                              <div class=\"mt-chart-grid\" style=\" position: absolute;\"></div>\\n                                            </div>\\n                                            <div class=\"mt-chart-x row\"></div>\\n                                           </div>\\n                                        </div>\\n                                      </div>';\n                var _Legend = this.Content.querySelector('.mt-chart-legend');\n                var _AxisX = this.Content.querySelector('.mt-chart-x');\n                var _AxisY = this.Content.querySelector('.mt-chart-y');\n                var _ChartArea = this.Content.querySelector('.mt-chart-area');\n                var _Grid = this.Content.querySelector('.mt-chart-grid');\n                var _Svg = this.Content.querySelector('.mt-chart-svg');\n                return {\n                    get Legend() {\n                        return _Legend;\n                    },\n                    set Legend(v) {\n                        _Legend.innerHTML = v;\n                    },\n                    get AxisX() {\n                        return _AxisX;\n                    },\n                    set AxisX(v) {\n                        _AxisX.innerHTML = v;\n                    },\n                    get AxisY() {\n                        return _AxisY;\n                    },\n                    set AxisY(v) {\n                        _AxisY.innerHTML = v;\n                    },\n                    get ChartArea() {\n                        return _ChartArea;\n                    },\n                    set ChartArea(v) {\n                        _ChartArea.innerHTML = v;\n                    },\n                    get Grid() {\n                        return _Grid;\n                    },\n                    set Grid(v) {\n                        _Grid.innerHTML = v;\n                    },\n                    get Svg() {\n                        return _Svg;\n                    },\n                    set Svg(v) {\n                        _Svg.innerHTML = v;\n                    }\n                };\n            }.bind(this)();\n\n            /********************************************************************************/\n            var Builders = {\n                /**\r\n                 *\r\n                 * @param Serie\r\n                 * @param i\r\n                 * @returns {string}\r\n                 * @constructor\r\n                 */\n                MakeLegend: function MakeLegend(Serie, i) {\n                    return '<div class=\"mt-chart-legend__item row\">\\n                          <input class=\"mt-legend-checkbox\" type=\"checkbox\" checked=\"checked\" id=\"legcheck' + Serie.Name + i + '\">\\n                          <div class=\"mt-legend-icon\" style=\"background-color: ' + Serie.Color + '\"></div>\\n                          <label class=\"mt-legend-label\" for=\"legcheck' + Serie.Name + i + '\">' + Serie.Name + '</label>\\n                        </div>';\n                },\n\n                /**\r\n                 *\r\n                 * @param scale\r\n                 * @param i\r\n                 * @param name\r\n                 * @param color\r\n                 * @returns {*}\r\n                 * @constructor\r\n                 */\n                MakeAxisY: function MakeAxisY() {\n                    /*if (!scale)\r\n                     return '';\r\n                     let caption = '';\r\n                     if (i>0)\r\n                     caption = `<div class=\"mt-chart-axis-caption\"><div style=\"transform: rotate(-90deg)\">${name}</div></div>`;\r\n                     let a = '';\r\n                     for (let j = 0; j< scale.length; j++){\r\n                     a += `<div class=\"mt-chart-label mt-chart-label__y\"><span>${scale[j]}</span></div>`;\r\n                     }\r\n                     return `<div class=\"mt-chart-axis__y row\" ${(i>0)? ('style=\"color: '+color+'; font-weight: bold;\"'):''} data-line=\"${i}\">${caption}<div class=\"mt-chart-labels col\">${a}</div></div>`;*/\n                    var i = 0;\n                    if (!chart.Options.AxisY.Visible) {\n                        i = 1;\n                        if (chart._ScaleY.Scales.length < 2) return '';\n                    }\n                    var accum = '';\n                    for (i; i < chart._ScaleY.Scales.length; i++) {\n                        var index = chart._ScaleY.Dict.indexOf(i); //.filter(x=>x===i && x !==0)[0];\n                        var scale = chart._ScaleY.Scales[i];\n                        var caption = '';\n                        //let a = '';\n                        if (i > 0) caption = '<div class=\"mt-chart-axis-caption\"><div style=\"transform: rotate(-90deg)\">' + chart.Options.Series[index].Title + '</div></div>';\n                        var a = '';\n                        for (var j = 0; j < scale.length; j++) {\n                            a += '<div class=\"mt-chart-label mt-chart-label__y\"><span>' + scale[j] + '</span></div>';\n                        }\n                        accum += '<div class=\"mt-chart-axis__y row\" ' + (i > 0 ? 'style=\"color: ' + chart.Options.Series[index].Color + '; font-weight: bold;\"' : '') + ' data-line=\"' + i + '\">' + caption + '<div class=\"mt-chart-labels col\">' + a + '</div></div>';\n                    }\n                    return accum;\n                },\n                MakeAxisX: function MakeAxisX() {\n                    if (!chart.Options.Labels.Visible) return '';\n                    var labels = chart.Options.Labels.Data;\n\n                    var style = 'transform: rotate(' + Buffer.ParametersAxisX.Angle + 'deg); margin-top: ' + Buffer.ParametersAxisX.MarginTop + 'px; width: ' + Buffer.ParametersAxisX.Width + 'px; margin-left: ' + Buffer.ParametersAxisX.MarginLeft + 'px;';\n                    var a = '';\n                    for (var i = 0; i < labels.length; i++) {\n                        a += '<div class=\"mt-chart-label mt-chart-label__x\"><span style=\"' + style + '\">' + labels[i] + '</span></div>';\n                    }\n                    //console.log(`AxisX forecastHeight: ${Math.round(h/4+ (Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))))}`);\n                    return a;\n                },\n                MakeGrid: function MakeGrid(a, b) {\n                    return Lure.Chart.GetGrid(a, b);\n                },\n                MakeGraph: function MakeGraph(serie, i) {\n                    var index = chart._ScaleY.Dict[i];\n                    var scale = chart._ScaleY.Scales[index];\n                    var mm = chart._ScaleY.MinMax[index];\n                    var DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\n                    var DataAbscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, chart.Width);\n                    var points = Lure.Chart.GetPoints(DataAbscissa, DataOrdinata);\n                    return Lure.Chart.GetPath(points, chart.Options.Series[i].Type, i, chart.Options.Series[i].Color, chart.Options.Series[i].Width);\n                },\n                CalcAxisX: function CalcAxisX() {\n                    var c = Lure.CreateElementFromString('<div class=\"mt-chart-label mt-chart-label__x\"><span>' + chart.Options.Labels.Data[0] + '</span></div>');\n                    var size = Lure.GetInlineSize(c, getComputedStyle(c.querySelector('span')).fontSize);\n                    var w = chart.Width / chart.Options.Labels.Data.length;\n                    var h = size.height;\n                    var wFact = size.width;\n                    var angle = void 0;\n                    if (chart.Options.Labels.Rotation !== 'auto') {\n                        angle = parseFloat(chart.Options.Labels.Rotation);\n                    } else {\n                        var cos = (w - h) / (wFact + h);\n                        if (cos < 0.1) cos = 0;\n                        if (cos > 1) cos = 1;\n                        angle = -90 * (1 - cos);\n                    }\n                    return {\n                        Height: Math.round(h / 4 + Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))),\n                        Width: wFact,\n                        MarginTop: wFact > w ? Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2)) - h : 0,\n                        MarginLeft: wFact > w ? -w / 2 : -wFact / 2,\n                        Angle: angle\n                    };\n                }\n            };\n            /**\r\n             *\r\n             * @returns {string}\r\n             * @constructor\r\n             */\n            function Builder() {\n                var Legend = '';\n                var AxeY = '';\n                var AxeX = '';\n                var Grid = '';\n                var Svg = '';\n\n                var isGraph = chart.Options.Series.filter(function (x) {\n                    return x.Type === 'pie';\n                }).length !== chart.Options.Series.length;\n                console.log('isGraph', isGraph);\n                var PathBuilder = void 0;\n                if (isGraph) PathBuilder = Builders.MakeGraph;\n\n                for (var i = 0; i < chart.Options.Series.length; i++) {\n                    Legend += Builders.MakeLegend(chart.Options.Series[i], i);\n                    AxeY += Builders.MakeAxisY(chart._ScaleY.Scales[i], i, chart.Options.Series[chart._ScaleY.Dict[i]].Title ? chart.Options.Series[chart._ScaleY.Dict[i]].Title : chart.Options.Series[chart._ScaleY.Dict[i]].Name, chart.Options.Series[chart._ScaleY.Dict[i]].Color);\n                    Svg += PathBuilder(chart.Options.Series[i], i);\n                }\n                Legend = '<div class=\"mt-chart-legend row\">' + Legend + '</div>';\n                AxeY = '<div class=\"mt-chart-y row\">' + AxeY + '</div>';\n                AxeX = Builders.MakeAxisX();\n                Grid = Builders.MakeGrid(chart.Options.Labels.Data.length, chart._ScaleY.Scales[0].length - 1);\n                chart.Content.innerHTML = '<div class=\"mt-chart col\">\\n                        <div class=\"mt-chart-caption\">\\n                          <div class=\\'mt-chart-title\\'>' + Title + '</div>\\n                          <div class=\"mt-chart-legend row\">' + Legend + '</div>\\n                        </div>\\n                        <div class=\"mt-chart-kek row flex-100\">\\n                          <div class=\"mt-chart-y row\">' + AxeY + '</div>\\n                          <div class=\"col flex-100\">\\n                            <div class=\"mt-chart-area row flex-100\">\\n                              <svg class=\"mt-chart-svg\">' + Svg + '</svg>\\n                              <div class=\"mt-chart-grid\" style=\" position: absolute;\">' + Grid + '</div>\\n                            </div>\\n                            <div class=\"mt-chart-x row\">' + AxeX + '</div>\\n                           </div>\\n                        </div>\\n                      </div>';\n            }\n\n            this.__GetPath = function (serie, line) {\n                //debugger;\n                switch (serie.Type) {\n                    case 'line':\n                        return this.__GetPathLine(serie, line);\n                    case 'bar':\n                        return this.__GetPathBar(serie, line);\n                    case 'pie':\n                        return '';\n                }\n            }.bind(this);\n            this.__GetPathLine = function (serie, line) {\n                if (!Buffer.Abscissa || Buffer.Width !== this.Width) Buffer.Abscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, this.Width);\n                var index = this._ScaleY.Dict[line];\n                var scale = this._ScaleY.Scales[index];\n                var mm = chart._ScaleY.MinMax[index];\n                //debugger;\n                var DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\n                var points = Lure.Chart.GetPoints(Buffer.Abscissa, DataOrdinata);\n                Buffer.SeriesPoints[line] = points;\n\n                var n = points.length;\n\n                var xs = []; //x\n                var ys = []; //y\n                var dys = []; //dx\n                var dxs = []; //dy\n                var ds = []; //derivative\n                var ms = []; //desired slope (m) at each point using Fritsch-Carlson method\n                for (var i = 0; i < n; i++) {\n                    xs[i] = points[i][0];\n                    ys[i] = points[i][1];\n                }\n                // Calculate deltas and derivative\n                for (var _i = 0; _i < n - 1; _i++) {\n                    dys[_i] = ys[_i + 1] - ys[_i];\n                    dxs[_i] = xs[_i + 1] - xs[_i];\n                    ds[_i] = dys[_i] / dxs[_i];\n                }\n                // Determine desired slope (m) at each point using Fritsch-Carlson method\n                // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\n                ms[0] = ds[0];\n                ms[n - 1] = ds[n - 2];\n                for (var _i2 = 1; _i2 < n - 1; _i2++) {\n                    if (ds[_i2] === 0 || ds[_i2 - 1] === 0 || ds[_i2 - 1] > 0 !== ds[_i2] > 0) {\n                        ms[_i2] = 0;\n                    } else {\n                        ms[_i2] = 3 * (dxs[_i2 - 1] + dxs[_i2]) / ((2 * dxs[_i2] + dxs[_i2 - 1]) / ds[_i2 - 1] + (dxs[_i2] + 2 * dxs[_i2 - 1]) / ds[_i2]);\n                        if (!isFinite(ms[_i2])) {\n                            ms[_i2] = 0;\n                        }\n                    }\n                }\n                var d = 'M ' + xs[0] + ',' + ys[0];\n                var dots = '<g class=\"mt-chart-dots\">';\n                for (var _i3 = 0; _i3 < n - 1; _i3++) {\n                    d += ' C ' + (xs[_i3] + dxs[_i3] / 3) + ',' + (ys[_i3] + ms[_i3] * dxs[_i3] / 3) + ' ' + (xs[_i3 + 1] - dxs[_i3] / 3) + ',' + (ys[_i3 + 1] - ms[_i3 + 1] * dxs[_i3] / 3) + ' ' + xs[_i3 + 1] + ',' + ys[_i3 + 1];\n                    if (serie.Point.Visible) dots += Lure.Chart.GetPathLineDot(xs[_i3], ys[_i3], line, _i3, serie.Color, serie.Point.Radius);\n                }\n                if (serie.Point.Visible) dots += Lure.Chart.GetPathLineDot(xs[n - 1], ys[n - 1], line, n - 1, serie.Color, serie.Point.Radius);\n                dots += '</g>';\n                return '<g class=\"mt-chart-serie\"><path data-line=\"' + line + '\" d=\"' + d + '\" fill=\"none\" stroke=\"' + serie.Color + '\" stroke-width=\"' + serie.Width + '\"></path> ' + dots + '</g>';\n            }.bind(this);\n            this.__GetPathBar = function (serie, line) {\n                if (!Buffer.Abscissa || Buffer.Width !== this.Width) Buffer.Abscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, this.Width);\n                var index = this._ScaleY.Dict[line];\n                var scale = this._ScaleY.Scales[index];\n                var mm = chart._ScaleY.MinMax[index];\n                //debugger;\n                var DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\n                var points = Lure.Chart.GetPoints(Buffer.Abscissa, DataOrdinata);\n                Buffer.SeriesPoints[line] = points;\n                var height = this.Height;\n                var wd = serie.Width;\n\n                var bricks = '<g class=\"mt-chart-serie\" data-type=\"Bar\">';\n                var GradientId = '';\n                if (this.Options.SeriesOptions.BarGradient) {\n                    GradientId = 'bar_' + Math.random().toString(36).replace(\"0.\", '');\n                    bricks += '<linearGradient id=\"' + GradientId + '\"  x1=\"0\" y1=\"0%\"><stop offset=\"0%\" stop-color=\"rgba(0,0,0,0.2)\"/><stop offset=\"33%\" stop-color=\"rgba(255,255,255,0.2)\"/><stop offset=\"100%\" stop-color=\"rgba(0,0,0,0.3)\"/></linearGradient>';\n                }\n                // let d = `M ${points[0][0]}  ${points[0][1]}`;\n\n                var dots = '';\n                for (var i = 0; i < points.length; i++) {\n                    var d = 'M ' + (points[i][0] - wd / 2) + ' ' + height + ' L ' + (points[i][0] + wd / 2) + ' ' + height + ' ' + (points[i][0] + wd / 2) + ' ' + points[i][1] + ' ' + (points[i][0] - wd / 2) + ' ' + points[i][1] + 'Z';\n                    // debugger;\n                    bricks += '<path class=\"mt-chart-tooltipable\" data-line=\"' + line + '\" data-item=\"' + i + '\" d=\"' + d + '\" fill=\"' + serie.Color + '\" stroke=\"#000\" stroke-width=\"0\"></path>';\n                    if (this.Options.SeriesOptions.BarGradient) bricks += '<path class=\"mt-chart-tooltipable\"  data-line=\"' + line + '\" data-item=\"' + i + '\" d=\"' + d + '\" fill=\"url(#' + GradientId + ')\" ></path>';\n                    //dots += Lure.Chart.GetPathLineDot(points[i][0] , points[i][1], line, i, serie.Color, serie.Point.Radius );\n                }\n                bricks += dots + '</g>';\n                return bricks;\n            }.bind(this);\n\n            (function Init() {\n                /* let Legend = '';\r\n                 for (let i = 0; i < this.Options.Series.length; i++){\r\n                 Legend += Lure.Chart.MakeLegend(this.Options.Series[i], i);\r\n                 }*/\n                this.Block.Legend = Buffer.Legend;\n                Buffer.ParametersAxisX = Builders.CalcAxisX();\n                console.log('this.Height-Buffer.ParametersAxisX.Height', this.Height, Buffer.ParametersAxisX.Height);\n                this._ScaleY = Lure.Chart.GetScaleY(this.Options.Series, this.Height - Buffer.ParametersAxisX.Height, this);\n\n                this.Block.AxisX = Builders.MakeAxisX();\n                this.Block.Grid = Lure.Chart.GetGrid(this.Options.Labels.Data.length, this._ScaleY.Scales[0].length - 1);\n\n                var isGraph = this.isGraph;\n                console.log('isGraph', isGraph);\n                var PathBuilder = void 0;\n                if (isGraph) PathBuilder = Builders.MakeGraph;\n                var AxeY = '';\n                //let Svg = '';\n                var SvgBar = '';\n                var SvgLine = '';\n\n                /*\r\n                 for (let i = 0; i < chart._ScaleY.Scales.length; i++){\r\n                 let index = this._ScaleY.Dict[i];\r\n                 //debugger;\r\n                 AxeY += Builders.MakeAxisY(chart._ScaleY.Scales[index], i, chart.Options.Series[i].Title, chart.Options.Series[i].Color);\r\n                 }*/\n                AxeY = Builders.MakeAxisY();\n                this.Block.AxisY = AxeY;\n                for (var i = 0; i < chart.Options.Series.length; i++) {\n\n                    //AxeY += Builders.MakeAxisY(chart._ScaleY.Scales[i], i, chart.Options.Series[chart._ScaleY.Dict[i]].Title? chart.Options.Series[chart._ScaleY.Dict[i]].Title:chart.Options.Series[chart._ScaleY.Dict[i]].Name, chart.Options.Series[chart._ScaleY.Dict[i]].Color);\n                    //Svg += PathBuilder(chart.Options.Series[i], i);\n                    switch (chart.Options.Series[i].Type) {\n                        case 'line':\n                            SvgLine += this.__GetPathLine(chart.Options.Series[i], i);\n                            break;\n                        case 'bar':\n                            SvgBar += this.__GetPathBar(chart.Options.Series[i], i);\n                            break;\n                    }\n                    //Svg += this.__GetPath(chart.Options.Series[i], i);\n                    // this.__GetPath(chart.Options.Series[i], i)\n                }\n\n                this.Block.Svg = SvgBar + SvgLine;\n\n                this.Block.AxisY.style.height = this.Height + 'px';\n\n                //console.log(`AxisX FactHeight: ${this.Block.AxisX.clientHeight}`);\n                // this.Block.AxisX.style.height = this.BuidlerData.AxisXOptions.Height+'px';\n            }).bind(this)();\n            /********************************************************************************/\n            /*******/\n\n            /*<tooltips>*/\n            this.Tooltip = new Lure.Content({\n                Name: 'Tooltipchek',\n                Target: this.Block.ChartArea,\n                Content: '<div class=\"mt-chart-tooltip\">\\n                        <div class=\"val\">' + this.Options.Tooltip.Template + '</div>\\n                      </div>',\n                Visible: false,\n                Controller: {\n                    Data: {}\n                },\n                BeforeShow: function BeforeShow(a, b) {},\n                Prop: function Prop() {\n                    this._Timer = null;\n                    this._Timer2 = null;\n                },\n                Shower: function Shower() {\n                    clearTimeout(this._Timer);\n                    clearTimeout(this._Timer2);\n                    this.Content.style.display = '';\n                    this.Content.style.opacity = '1';\n                },\n                Hider: function Hider() {\n                    clearTimeout(this._Timer);\n                    this._Timer = setTimeout(function () {\n                        this.Content.style.opacity = '0';\n                        this._Timer2 = setTimeout(function () {\n                            this.Content.style.display = 'none';\n                        }.bind(this), 200);\n                    }.bind(this), 500);\n                },\n                Show: function Show(options) {\n                    clearTimeout(this._Timer);\n                    this.Data.Name = options.data[0];\n                    this.Data.Value = options.data[1];\n                    this.Refresh();\n                    this.Content.style.left = options.pos[0] + 7 + \"px\";\n                    this.Content.style.top = options.pos[1] - this.Content.clientHeight - 7 + \"px\";\n                    this.Content.style.backgroundColor = options.color;\n                    //this._Timer = setTimeout(this.Hide, 2000);\n                },\n                Methods: function Methods() {\n                    this.Do = function (e) {\n                        var tag = e.currentTarget.tagName.toLowerCase();\n                        switch (tag) {\n                            case 'circle':\n                                this.DoCircle(e);\n                                break;\n                            case 'path':\n                                this.DoBar(e);\n                                break;\n\n                        }\n                    }.bind(this);\n                    this.DoCircle = function (e) {\n                        var circle = e.currentTarget;\n                        var i = parseInt(circle.dataset['line']);\n                        var j = parseInt(circle.dataset['item']);\n                        var color = circle.attributes['stroke'].value;\n                        //console.log(` parseInt(circle.attributes['r'].value`,  parseInt(circle.attributes['r'].value) );\n                        var width = parseInt(circle.attributes['stroke-width'].value);\n                        circle.attributes['fill'].value = color;\n                        circle.attributes['r'].value = parseInt(circle.attributes['r'].value) + width;\n                        circle.attributes['stroke'].value = \"#fff\";\n\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\n                        var o = {\n                            data: [Series[i].Name, Series[i].Data[j]],\n                            color: color,\n                            pos: Buffer.SeriesPoints[i][j] //[e.offsetX, e.offsetY]\n                        };\n                        this.Show(o);\n                    }.bind(this);\n                    this.DoBar = function (e) {\n                        var bar = e.currentTarget;\n                        var i = parseInt(bar.dataset['line']);\n                        var j = parseInt(bar.dataset['item']);\n\n                        // bar.attributes['stroke-width'].value = 2;\n\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\n\n                        var o = {\n                            data: [chart.Options.Series[i].Name, chart.Options.Series[i].Data[j]],\n                            color: chart.Options.Series[i].Color,\n                            pos: Buffer.SeriesPoints[i][j] //[e.offsetX, e.offsetY]\n                        };\n                        this.Show(o);\n                    }.bind(this);\n                },\n                AfterBuild: function AfterBuild() {}\n            });\n            Lure.AddEventListenerGlobal('mouseover', '.mt-chart-point, .mt-chart-tooltipable', function (e) {\n                this.Tooltip.Do(e);\n            }, this.Content, this);\n            Lure.AddEventListenerGlobal('mouseout', '.mt-chart-point', function (e) {\n                //console.log(e.currentTarget.dataset['tooltip']);\n                var circle = e.currentTarget;\n                var width = parseInt(circle.attributes['stroke-width'].value);\n                circle.attributes['stroke'].value = circle.attributes['fill'].value;\n                circle.attributes['fill'].value = \"#fff\";\n                circle.attributes['r'].value -= width;\n                chart.Tooltip.Hide();\n            }, this.Content);\n            /*</tooltips>*/\n\n            var getSuperdata = function () {\n                var superdata = [];\n                for (var i = 0; i < Series.length; i++) {\n                    var index = this._ScaleY.Dict[i];\n                    var scale = this._ScaleY.Scales[index];\n                    var mm = this._ScaleY.MinMax[index];\n                    var DataOrdinata = Lure.Chart.GetOrdinata(Series[i].Data, scale, mm, this.Block.Svg.Height);\n                    this._Abscissa = Lure.Chart.GetAbscissa(Labels.Data, this.Block.Svg.Width);\n                    var points = Lure.Chart.GetPoints(this._Abscissa, DataOrdinata);\n                    var h = 0; //\n                    superdata[i] = {\n                        h: this.Block.Svg.Height,\n                        Name: chart.Options.Series[i].Name,\n                        Data: chart.Options.Series[i].Data,\n                        DataPoints: points,\n                        Color: chart.Options.Series[i].Color,\n                        Path: Lure.Chart.GetPath(points, chart.Options.Series[i].Type, i, chart.Options.Series[i].Color, chart.Options.Series[i].Width),\n                        Width: chart.Options.Width,\n                        options: {\n                            pointSize: Series[i].Width ? 4 + Series[i].Width / 4 : 4\n                        }\n                    };\n                }\n                chart.SuperData = superdata;\n                return superdata;\n            }.bind(this);\n\n            this.TestB = function () {\n                var per = performance.now();\n                Builder();\n                Lure.Perf(per, 'builder');\n            };\n            this.Refresh = function () {}.bind(this);\n            this.Refresh();\n            setTimeout(function () {}.bind(this), 0);\n\n            this.Buffer = Buffer;\n        }\n\n        _createClass(LureChart, [{\n            key: 'Height',\n            get: function get() {\n                //return this.__svg.clientHeight;\n                return this.Block.Svg.clientHeight;\n            }\n        }, {\n            key: 'Width',\n            get: function get() {\n                return this.Block.Svg.clientWidth;\n                //return this.__svg.clientWidth;\n            }\n\n            /*statics*/\n\n        }], [{\n            key: 'GetSeriePointOptions',\n            value: function GetSeriePointOptions(serie, isGraph) {\n                var p = serie.Point ? serie.Point : {};\n                p.Visible = typeof p.Visible === 'undefined' || p.Visible;\n                p.Radius = p.Radius ? p.Radius : 4 + serie.Width / 4;\n                if (Number.isNaN(p.Radius)) debugger;\n                return p;\n            }\n        }, {\n            key: 'GetScaleY',\n            value: function GetScaleY(series, height, ctx) {\n                if (ctx.Type === 'pie') {\n                    return [];\n                }\n                var min = series[0].Data[0];\n                var max = series[0].Data[0];\n                var isAutoScale = true;\n                var isAutoStep = true;\n                if (ctx.Options.AxisY.Scale[0] !== 'auto' && ctx.Options.AxisY.Scale[1] !== 'auto') {\n                    isAutoScale = false;\n                    min = ctx.Options.AxisY.Scale[0];\n                    max = ctx.Options.AxisY.Scale[1];\n                }\n                if (ctx.Options.AxisY.Scale[2] !== 'auto') isAutoStep = false;\n                var mm = [[series[0].Data[0], series[0].Data[0]]];\n                var index = 0;\n                var scales = [];\n\n                var sc = {\n                    Scales: [],\n                    Dict: [],\n                    MinMax: null\n                };\n                for (var i = 0; i < series.length; i++) {\n                    sc.Dict[i] = 0;\n                    if (series[i].OwnAxis) {\n                        index++;\n                        if (typeof series[i].OwnAxis[0] !== 'undefined') mm.push(series[i].OwnAxis);else mm.push([series[i].Data[0], series[i].Data[0]]);\n                        sc.Dict[i] = index;\n                    }\n                    for (var j = 0; j < series[i].Data.length; j++) {\n                        if (isAutoScale) {\n                            if (series[i].Data[j] < min) min = series[i].Data[j];\n                            if (series[i].Data[j] > max) max = series[i].Data[j];\n                        }\n                        if (series[i].OwnAxis && typeof series[i].OwnAxis[0] === 'undefined') {\n                            if (series[i].Data[j] < mm[index][0]) mm[index][0] = series[i].Data[j];\n                            if (series[i].Data[j] > mm[index][1]) mm[index][1] = series[i].Data[j];\n                        }\n                    }\n                }\n                mm[0] = [min, max];\n                sc.MinMax = mm;\n                for (var _i4 = 0; _i4 < mm.length; _i4++) {\n                    var order = mm[_i4][1].toString().length;\n                    var step = void 0;\n                    if (_i4 === 0 && !isAutoStep) {\n                        step = ctx.Options.AxisY.Scale[2];\n                    } else {\n                        step = mm[_i4][2] ? mm[_i4][2] : ((mm[_i4][1] - mm[_i4][0]) * 40 / height / Math.pow(10, order - 1) / 5).toFixed(1) * Math.pow(10, order - 1) * 5;\n                    }\n                    var s = mm[_i4][0];\n                    var scale = [];\n                    if (order < 3 || true) {\n                        //debugger;\n                        while (s <= mm[_i4][1]) {\n                            scale.push(s);\n                            s += step;\n                        }\n                        scale.push(s);\n                        sc.Scales.push(scale);\n                    }\n                }\n                return sc;\n            }\n        }, {\n            key: 'GetAbscissa',\n            value: function GetAbscissa(labels, width) {\n                var stepX = width / labels.length;\n                return labels.map(function (a, i) {\n                    return i * stepX;\n                });\n            }\n        }, {\n            key: 'GetOrdinata',\n            value: function GetOrdinata(serie, scale, mm, height) {\n                var min = mm[0];\n                var max = mm[1];\n                var scaleCoefficient = scale[scale.length - 1] / max;\n                var ordinata = [];\n                for (var j = 0; j < serie.length; j++) {\n                    ordinata.push(height - (serie[j] - min) * height / (max - min) / scaleCoefficient);\n                }\n                //console.log('Y', Y);\n                //console.log('ordinate', ordinate);\n                //console.log(`min=${min} max=${max}`, height);\n                //ordinata.push(ordinate);\n                //console.log('ordinata', ordinata);\n                return ordinata;\n            }\n        }, {\n            key: 'GetPoints',\n            value: function GetPoints(X, Y) {\n                var points = [];\n                //let length = X.length >= Y.length ? X.length:Y.length;\n                for (var i = 0; i < Y.length; i++) {\n                    points.push([X[i], Y[i]]);\n                }\n                return points;\n            }\n        }, {\n            key: 'GetPath',\n            value: function GetPath(points, type, line, color, width) {\n                switch (type) {\n                    case 'line':\n                        return Lure.Chart.GetPathLine(points, line, color, width);\n                    case 'bar':\n                        return Lure.Chart.GetPathBar(points, line, color, width);\n                    case 'pie':\n                        return '';\n                }\n            }\n        }, {\n            key: 'GetPathLine',\n            value: function GetPathLine(points, line, color, width) {\n                var isDots = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n                var n = points.length;\n\n                var xs = []; //x\n                var ys = []; //y\n                var dys = []; //dx\n                var dxs = []; //dy\n                var ds = []; //derivative\n                var ms = []; //desired slope (m) at each point using Fritsch-Carlson method\n                for (var i = 0; i < n; i++) {\n                    xs[i] = points[i][0];\n                    ys[i] = points[i][1];\n                }\n                // Calculate deltas and derivative\n                for (var _i5 = 0; _i5 < n - 1; _i5++) {\n                    dys[_i5] = ys[_i5 + 1] - ys[_i5];\n                    dxs[_i5] = xs[_i5 + 1] - xs[_i5];\n                    ds[_i5] = dys[_i5] / dxs[_i5];\n                }\n                // Determine desired slope (m) at each point using Fritsch-Carlson method\n                // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\n                ms[0] = ds[0];\n                ms[n - 1] = ds[n - 2];\n                for (var _i6 = 1; _i6 < n - 1; _i6++) {\n                    if (ds[_i6] === 0 || ds[_i6 - 1] === 0 || ds[_i6 - 1] > 0 !== ds[_i6] > 0) {\n                        ms[_i6] = 0;\n                    } else {\n                        ms[_i6] = 3 * (dxs[_i6 - 1] + dxs[_i6]) / ((2 * dxs[_i6] + dxs[_i6 - 1]) / ds[_i6 - 1] + (dxs[_i6] + 2 * dxs[_i6 - 1]) / ds[_i6]);\n                        if (!isFinite(ms[_i6])) {\n                            ms[_i6] = 0;\n                        }\n                    }\n                }\n                var d = 'M ' + xs[0] + ',' + ys[0];\n                var dots = '<g class=\"mt-chart-dots\">';\n                for (var _i7 = 0; _i7 < n - 1; _i7++) {\n                    //console.log(d);\n                    d += ' C ' + (xs[_i7] + dxs[_i7] / 3) + ',' + (ys[_i7] + ms[_i7] * dxs[_i7] / 3) + ' ' + (xs[_i7 + 1] - dxs[_i7] / 3) + ',' + (ys[_i7 + 1] - ms[_i7 + 1] * dxs[_i7] / 3) + ' ' + xs[_i7 + 1] + ',' + ys[_i7 + 1];\n                    if (isDots) dots += Lure.Chart.GetPathLineDot(xs[_i7], ys[_i7], line, _i7, color, width);\n                }\n                dots += '</g>';\n                //return d;\n                //console.log(d);\n                return '<g class=\"mt-chart-serie\"><path data-line=\"' + line + '\" d=\"' + d + '\" fill=\"none\" stroke=\"' + color + '\" stroke-width=\"' + width + '\"></path> ' + dots + '</g>';\n            }\n        }, {\n            key: 'GetPathLineDot',\n            value: function GetPathLineDot(x, y, i, j, color, width) {\n                return '<circle class=\"mt-chart-point\" data-line=\"' + i + '\" data-item=\"' + j + '\" cx=\"' + x + '\" cy=\"' + y + '\" r=\"' + width + '\" stroke=\"' + color + '\" stroke-width=\"2\" fill=\"#fff\" ></circle>';\n            }\n        }, {\n            key: 'GetPathBar',\n            value: function GetPathBar(points, line, color, width) {\n                var wd = 30;\n                console.log('GetPathBar', points);\n                // return '';\n                var p = '<path data-line=\"' + line + '\" d=' + 0 + ' fill=\"' + color + '\" stroke=\"' + color + '\" stroke-width=\"' + width + '\"></path>';\n                // let d = `M ${points[0][0]}  ${points[0][1]}`;\n                var dots = '';\n                for (var i = 0; i < points.length; i++) {\n                    var d = 'M ' + points[i][0] + ' ' + points[i][1] + ' L ' + points[i][0] + ' ' + points[i][1];\n                    dots += Lure.Chart.GetPathLineDot(points[i][0], points[i][1], line, i, color, width);\n                }\n                // debugger;\n                return dots;\n            }\n\n            /*builder*/\n\n        }, {\n            key: 'MakeLegend',\n            value: function MakeLegend(Serie, i) {\n                return '<div class=\"mt-chart-legend__item row\">\\n                          <input class=\"mt-legend-checkbox\" type=\"checkbox\" checked=\"checked\" id=\"legcheck' + Serie.Name + i + '\">\\n                          <div class=\"mt-legend-icon\" style=\"background-color: ' + Serie.Color + '\"></div>\\n                          <label class=\"mt-legend-label\" for=\"legcheck' + Serie.Name + i + '\">' + Serie.Name + '</label>\\n                        </div>';\n            }\n        }, {\n            key: 'GetGrid',\n            value: function GetGrid(sizeX, sizeY) {\n                var grid = '';\n                for (var i = 0; i < sizeY; i++) {\n                    grid += '<div class=\"mt-chart__grid-line row flex-100 flex-between\">';\n                    for (var j = 0; j < sizeX; j++) {\n                        grid += '<div class=\\'mt-chart__grid-item flex-100\\'></div>';\n                    }\n                    grid += '</div>';\n                }\n                grid += '';\n                return grid;\n            }\n        }]);\n\n        return LureChart;\n    }()\n};\n\nLure.Chart = Lure.Plugin.Chart.Chart;\n\nLure.__GenegateString = function () {\n    var gen = Math.random().toString(36).replace(\"0.\", '').replace(/[\\d]+/, '').substring(0, 1);\n    if (Lure.Select('#' + gen)) {\n        gen = Lure.__GenegateString();\n    }\n    return gen;\n};","//\r\n// Lure Framework v0.9.1 [29.08.2017]\r\n//\r\n//<utils>;\r\nif (!Date.prototype.format){\r\n    Date.prototype.format = function (format) {\r\n        return Lure._DateFormat(this, format);\r\n    }\r\n}\r\n//</utils>\r\nlet Lure = (function(){\r\n    class LureClass {\r\n        constructor() {\r\n            this.Plugin = {};\r\n            let $this = this;\r\n            this.Debug = false;\r\n            this.isEditableEventsEnabled = false;\r\n            //regexes\r\n            const regexEach = new RegExp(/{{#each\\s+([^}]+)}}/g);\r\n            const regexIfOuter = new RegExp(/{{#if\\s+([^}]+)}}([\\s\\S]*?){{#endif}}/g);\r\n            const regexIfInner = new RegExp(/{{#if([\\s\\S]*?)}}/g);\r\n            const regexExpressions = new RegExp(/{{([^#}]+)}}/g);\r\n            const regexEditable = new RegExp(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/g);\r\n            //compile helpers\r\n            const spaces = \"    \";\r\n            const preCompileIfOuter = function(s){\r\n                s = s\r\n                    .replace(/#IF/g, '#if')\r\n                    .replace(/#ENDIF/g, '#endif')\r\n                    .replace(regexIfOuter, function (bkt, condition, expression ) {\r\n                        return `\\`+\r\n/* OUTER \"IF\" */\r\n(function($this){\r\n    if (${preParseObjectChecker(condition)}) {\r\n        return \\`${expression}\\`;\r\n    }\r\n    return '';\r\n})($this)+\\``;\r\n                    });\r\n                return s;\r\n            };\r\n            const preCompileIfInner = function(s){\r\n                s = s.replace(regexIfInner, function (s, condition) {\r\n                    condition = condition\r\n                        .replace(/&gt;/g,  \">\")\r\n                        .replace(/&lt;/g,  \"<\")\r\n                        .replace(/#less/g, \" < \")\r\n                        .replace(/#more/g, \" > \")\r\n                        .replace(/&amp;/g, \"&\")\r\n                        .replace(/\\|/g,    '\"');\r\n                    return `\\`+\r\n    /* LOCAL \"IF\" */\r\n    (function(){\r\n        return (${condition}); \r\n        return '';})()+\\``;\r\n                });\r\n                return s;\r\n            };\r\n            const preCompileEach = function(s){\r\n                s = s\r\n                    .replace(/{{#EACH/g, \"{{#each\")\r\n                    .replace(/{{#ENDEACH/g, \"{{#endeach\");\r\n                let EachList = s.match(regexEach);\r\n                let lvl = 0;\r\n                if (EachList !== null){\r\n                    for (let i = EachList.length-1; i >= 0; i--){\r\n                        let current = EachList[i];\r\n                        let isInnerEach = false;\r\n                        lvl++;\r\n                        let StartPoint = s.indexOf(current);\r\n                        let EndPoint   = s.indexOf(\"{{#endeach}}\", StartPoint);\r\n\r\n                        let prevStarts = s.slice(0, StartPoint).match(regexEach);\r\n                        prevStarts = prevStarts!==null ? prevStarts.length: 0;\r\n                        let prevEnds = s.slice(0, StartPoint).match(/{{#endeach}}/g);\r\n                        prevEnds = prevEnds!==null ? prevEnds.length: 0;\r\n                        if ( (prevStarts > prevEnds ))\r\n                        {\r\n                            isInnerEach = true;\r\n                            lvl = 0;\r\n                        }\r\n                        ////\r\n                        let string_Each = s.slice(StartPoint, EndPoint+12);\r\n                        let expression  = string_Each.slice(current.length, string_Each.length-12);\r\n                        let ObjectName = current.replace(/{{#each\\s+([\\s\\S]+)}}/, function(a,name){\r\n                            return name;\r\n                        });\r\n                        ObjectName = preParseObjectChecker(ObjectName);\r\n                        //the each template\r\n                        let eachComplied = '`+' +\r\n                            spaces.repeat(lvl)+'/* EACH */(function(inner, $parent){                                                                   \\r\\n' +\r\n                            spaces.repeat(lvl)+'    if (!inner || (Object.keys(inner).length === 0 && inner.constructor === Object && isNaN(inner)))   \\r\\n' +\r\n                            spaces.repeat(lvl)+'        return \"\";                                                                                     \\r\\n' +\r\n                            spaces.repeat(lvl)+'    let string_result= \"\";                                                                             \\r\\n' +\r\n                            spaces.repeat(lvl)+'    for(let j = 0; j < inner.length; j++){                                                             \\r\\n' +\r\n                            spaces.repeat(lvl)+'        let $this = inner[j];                                                                          \\r\\n' +\r\n                            spaces.repeat(lvl)+'        let o = inner[j];                                                                              \\r\\n' +\r\n                            spaces.repeat(lvl)+'        string_result = string_result + \\`'+preParse(expression) + '\\`;                                \\r\\n' +\r\n                            spaces.repeat(lvl)+'    }                                                                                                  \\r\\n' +\r\n                            spaces.repeat(lvl)+'    return string_result;                                                                              \\r\\n' +\r\n                            spaces.repeat(lvl)+'})('+ObjectName+', {$parent: typeof $parent !== \"undefined\"?$parent:null, $this: $this, i: i} ) +`         ';\r\n                        s = s.replace(string_Each, eachComplied)\r\n\r\n                    }\r\n                }\r\n                return s;\r\n            };\r\n            const preCompileEditable = function(s){\r\n                return  s.replace(regexEditable, function (match, editable, content) {\r\n                    match = match.replace(/<[\\s\\S]+?(>)/, function (a, b) {\r\n                        return a.replace(b, ` data-line=\"{{i}}\" data-property=\"${content.replace('{{','').replace('}}','')}\">`);\r\n                    });\r\n                    return match.replace(content, `<div class=\"editable-helper editable-value\">${content}</div><div class=\"editable-helper editable-icon\"></div>`);\r\n                });\r\n\r\n            };\r\n            const preParseObjectChecker = function (ObjectName) {\r\n                //ok check if it's expression\r\n                if (ObjectName.indexOf('Available + Dis')>-1)\r\n                    ;//debugger;\r\n                function checking(c) {\r\n\r\n                    let s = c.replace(/\\s/g, \"\");\r\n                    let containsSpecialObject = (s.indexOf('$item')> -1 || s.indexOf('$this') > -1 || s.indexOf('$parent') > -1 ) ;\r\n                    let containsSpecialObjectTreeBuiler = (s.indexOf('$index')> -1 || s.indexOf('$j')> -1 || s.indexOf('$key') > -1 || s.indexOf('$lvl') > -1 || s.indexOf('$g.') > -1 ) ;\r\n                    let isSpecialSymbol = (s === \"?\" || s.indexOf(\"=\") > -1 || s.indexOf(\">\") > -1|| s.indexOf(\"<\") > -1);\r\n                    let isString = s.match(/^[\"'\\\\][\\s\\S]*[\"'\\\\]$/) !== null;\r\n                    let isIterator = s === \"i\" || s === \"j\";\r\n                    let isNumber = !isNaN(s);\r\n                    if (containsSpecialObject || containsSpecialObjectTreeBuiler || isIterator || isNumber || isString ||isSpecialSymbol){\r\n                        if (s.indexOf('$g.') > -1){ //if global object\r\n                            return s.replace('$g.', '');\r\n                        }\r\n                        return c;\r\n                    }\r\n                    return \"o.\"+s;\r\n                }\r\n                ObjectName = ObjectName.replace(/[^\\-+\\/%()*]+/g, function (c) {\r\n                    let parent = c.match(/&/g);\r\n                    if (parent !== null){\r\n                        for (let i = 0; i < parent.length; i++){\r\n                            if (i < parent.length-1)\r\n                                c = c.replace('&', \"$parent\");\r\n                            else\r\n                                c = c.replace('&', \"$parent.$this\");\r\n                        }\r\n                        return c;\r\n                    }\r\n                    else {\r\n                        return checking(c);\r\n                    }\r\n                });\r\n                ObjectName = ObjectName.replace(/\\\\'/g,\"'\");\r\n                ObjectName = \"(\"+ObjectName+\")\"; //fucking concatenation shell\r\n                return ObjectName;\r\n            };\r\n            const preParse = function(c, isCheckExpression = true){\r\n                return c.replace(regexExpressions, function(bkt, expression){\r\n                    if (isCheckExpression)\r\n                        return '${'+preParseObjectChecker(expression)+'}';\r\n                    else\r\n                        return '${'+expression+'}';\r\n                });\r\n            };\r\n            /**\r\n             * Template compiler\r\n             * @param {string} DomString\r\n             * @param {boolean} isListElement\r\n             * @return {Function}\r\n             * @constructor\r\n             */\r\n            this.Compile = function(DomString, isListElement) {\r\n                DomString = DomString.replace(/[\\n]+/g, \" \").replace(/[ ]{3,}/g, '');\r\n                //shell '\r\n                DomString = DomString.replace(/'/g, \"\\\\'\");\r\n                //.replace(/&gt;/g, \">\").replace(/&lt;/g, \"<\").replace(/&amp;/g, \"&\");\r\n                if (isListElement)\r\n                {\r\n                    DomString = preCompileEditable(DomString);\r\n                    DomString = preCompileIfOuter(DomString);\r\n                    DomString = preCompileEach(DomString);\r\n                }\r\n\r\n                DomString = preParse(DomString);\r\n                DomString = preCompileIfInner(DomString);\r\n                let string_Function = `\r\nlet $this = o;\r\nlet $item = o;\r\nlet $num = i+1;\r\nlet $denum = length-i;\r\n//treebuilder's\r\nlet $index;\r\nlet $key;\r\nlet $lvl;\r\nlet $j;\r\nif (extra){\r\n    $index = extra.$index;\r\n    $key = extra.$key;\r\n    $lvl = extra.$lvl;\r\n    $j = extra.$j;\r\n}\r\nlet string_Result = \"\";\r\nif (o === undefined || (Object.keys(o).length === 0 && o.constructor === Object && isNaN(o)) ) \r\n    return '';\r\nreturn \\``;\r\n                string_Function += DomString +'`;';\r\n                //if ie\r\n                //let isUnbrowser = true;\r\n                //if (isUnbrowser){\r\n                    string_Function = string_Function\r\n                        .replace(/`/g, `'`)\r\n                        .replace(/\\$\\{([^}]*)\\}/g, function(match, val){\r\n                        return `'+${val}+'`\r\n                    });\r\n                //}\r\n\r\n                let function_f;\r\n                try {\r\n                    function_f = new Function('o', 'i', 'length', 'extra', string_Function);\r\n                }\r\n                catch (e){\r\n                    console.info(string_Function);\r\n                    console.error(e);\r\n                }\r\n                //console.log('Compiled:');\r\n                //console.log(f);\r\n                return function_f;\r\n            };\r\n            this._EditablesEventListenerRun = function(content){\r\n                $this.AddEventListenerGlobal('dblclick', '.editable', function (e) {\r\n                    $this.Editable.RemoveEdits();\r\n                    $this.Editable.AddEdits(e.currentTarget);\r\n                }, content);\r\n                $this.AddEventListenerGlobal('click', '.editable-icon', function (e) {\r\n                    $this.Editable.RemoveEdits();\r\n                    $this.Editable.AddEdits(e.currentTarget.closest('.editable'));\r\n                }, content);\r\n                $this.AddEventListenerGlobal('dblclick', '.editable', function (e) {\r\n                    $this.Editable.RemoveEdits();\r\n                    $this.Editable.AddEdits(e.currentTarget);\r\n                }, content);\r\n                //editing\r\n                $this.AddEventListenerGlobal('change', '.editable-editor', function (e) {\r\n                    let val = e.currentTarget.value;\r\n                    let valPrev = e.currentTarget.parentElement.dataset['value'];\r\n                    if (val !== valPrev)\r\n                        e.currentTarget.parentElement.classList.add('editable-waiting');\r\n                    else\r\n                        e.currentTarget.parentElement.classList.remove('editable-waiting');\r\n                }, content);\r\n\r\n                $this.AddEventListenerGlobal('keyup', '.editable-textbox', function (e) {\r\n                    if(e.keyCode === 13) {\r\n                        $this.Editable.Save(e.currentTarget.closest('.editable'),  e.currentTarget.value);\r\n                        return false;\r\n                    }\r\n\r\n                    let val = e.currentTarget.value;\r\n                    let valPrev = e.currentTarget.parentElement.dataset['value'];\r\n                    if (val !== valPrev)\r\n                        e.currentTarget.parentElement.classList.add('editable-waiting');\r\n                    else\r\n                        e.currentTarget.parentElement.classList.remove('editable-waiting');\r\n\r\n                }, content);\r\n\r\n                //save\r\n                $this.AddEventListenerGlobal('click', '.editable-save-button', function (e) {\r\n                    let EditableElement = e.currentTarget.closest('.editable');\r\n                    $this.Editable.Save(e.currentTarget.closest('.editable'),  EditableElement.querySelector('.editable-editor').value);\r\n                }, content);\r\n\r\n\r\n\r\n                if ($this.isHasEditablesEventsEnabled)\r\n                    return;\r\n                document.addEventListener('click', function (e) {\r\n                    if ( e.target.classList.contains('editable-helper') && document.querySelectorAll('.editable-helper, .editable-editing') !== null)\r\n                    {\r\n                        return;\r\n                    }\r\n                    $this.Editable.RemoveEdits();\r\n                });\r\n                $this.isHasEditablesEventsEnabled = true;\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {DocumentFragment}\r\n             * @constructor\r\n             */\r\n            this.CreateElementFromString = function(string, ownerTagName = \"div\"){\r\n                let frag = document.createDocumentFragment();\r\n                let elem = document.createElement(ownerTagName);\r\n                elem.innerHTML = string;\r\n                while (elem.childNodes[0]) {\r\n                    frag.appendChild(elem.childNodes[0]);\r\n                }\r\n                return frag.childNodes[0];\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {Array}\r\n             * @constructor\r\n             */\r\n            this.CreateElementsFromString = function(string, ownerTagName = \"div\"){\r\n                let frag = document.createDocumentFragment();\r\n                let elem = document.createElement(ownerTagName);\r\n                elem.innerHTML = string;\r\n                while (elem.childNodes[0]) {\r\n                    frag.appendChild(elem.childNodes[0]);\r\n                }\r\n                if (frag.childNodes.length > 0)\r\n                {\r\n                    let nodes = [];\r\n                    for (let i = 0; i < frag.childNodes.length; i++)\r\n                        nodes.push(frag.childNodes[i]);\r\n                    return nodes;\r\n                }\r\n                return null;\r\n            };\r\n            /**\r\n             *\r\n             * @param {css, HTMLElement} query\r\n             * @param parent\r\n             * @return {HTMLElement}\r\n             * @constructor\r\n             */\r\n            this.Select = function(query, parent = document){\r\n                if (query === '' || query === null)\r\n                    return null;\r\n                return query instanceof Node ? query : parent.querySelector(query);\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} Selector\r\n             * @param {HTMLElement} parent\r\n             * @return {NodeList}\r\n             * @constructor\r\n             */\r\n            this.SelectAll = function(Selector, parent = document){\r\n                if (typeof Selector === 'undefined')\r\n                    return [];\r\n                if (typeof Selector.tagName !== 'undefined' || Selector === document)\r\n                    return [Selector];\r\n                return parent.querySelectorAll(Selector);\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} eventName\r\n             * @param {string} selector\r\n             * @param {function} handler\r\n             * @param {HTMLElement} parent\r\n             * @param {Lure.Content} thisArg\r\n             * @constructor\r\n             */\r\n            this.AddEventListenerGlobal = function(eventName, selector, handler, parent = document, thisArg){\r\n                parent.addEventListener(eventName, function(e) {\r\n                    let target = e.target;\r\n                    let isIt = false;\r\n                    let event = Lure._EventClone(e);\r\n                    let elems = parent.querySelectorAll(selector);\r\n                    if (elems[0] === target)\r\n                    {\r\n                        event.currentTarget = target;\r\n                        isIt = true;\r\n                    }\r\n                    if (!isIt){\r\n                        for (let i = 0; i < elems.length; i++){\r\n                            if (elems[i].contains(target)){\r\n                                isIt = true;\r\n                                event.currentTarget = target.closest(selector);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (isIt){\r\n                        handler.call(thisArg? thisArg : event.currentTarget, event);\r\n                    }\r\n                });\r\n            };\r\n            /**\r\n             *\r\n             * @param {HTMLElement} HTMLElement\r\n             * @return {boolean}\r\n             */\r\n            this.isVisible = function (HTMLElement){\r\n                //check invisible state;\r\n                let isVisibleSelf = function(element){\r\n                    let ContentStyle = window.getComputedStyle(element);\r\n                    if ( (ContentStyle.display === \"none\") || (ContentStyle.opacity === \"0\") || (ContentStyle.visibility === \"hidden\") )\r\n                        return false;\r\n                    //check for null-size\r\n                    if ( (parseInt(ContentStyle.minWidth) === 0 || ContentStyle.minWidth === \"auto\")  && parseInt(ContentStyle.width) === 0)\r\n                        return false;\r\n                    if ( (parseInt(ContentStyle.minHeight) === 0 || ContentStyle.minHeight === \"auto\") && parseInt(ContentStyle.height) === 0)\r\n                        return false;\r\n                    return true;\r\n                };\r\n                let isVisibleParent = function (element) {\r\n                    while (element.parentElement){\r\n                        if (!isVisibleSelf(element.parentElement))\r\n                        {\r\n                            return false;\r\n                        }\r\n                        element = element.parentElement;\r\n                    }\r\n                    return true;\r\n                };\r\n                if (!isVisibleSelf(HTMLElement))\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                return isVisibleParent(HTMLElement);\r\n\r\n                return true;\r\n            };\r\n            /**\r\n             *\r\n             * @param e\r\n             * @return {ClonedEvent}\r\n             * @constructor\r\n             */\r\n            this._EventClone = function(e) {\r\n                function ClonedEvent() {}\r\n                let clone=new ClonedEvent();\r\n                for (let p in e) {\r\n                    let d = Object.getOwnPropertyDescriptor(e, p);\r\n                    if (d && (!d.writable || !d.configurable || !d.enumerable || d.get || d.set)) {\r\n                        Object.defineProperty(clone, p, d);\r\n                    }\r\n                    else {\r\n                        clone[p] = e[p];\r\n                    }\r\n                }\r\n                Object.setPrototypeOf(clone, e);\r\n                return clone;\r\n            };\r\n\r\n            this.GetFileText = function (url) {\r\n                return new Promise(function (resolve, reject) {\r\n                    let xhr = new XMLHttpRequest();\r\n                    xhr.onload = function () {\r\n                        resolve( xhr.response);\r\n                    };\r\n                    xhr.onerror = function () {\r\n                        reject(new Error(\r\n                            'XMLHttpRequest Error: '+this.statusText));\r\n                    };\r\n                    if (url.indexOf('..') > -1)\r\n                        url = url.replace('..', document.location.protocol + \"//\" + document.location.host);\r\n                    else {\r\n                        url = document.location.href.substring(0, document.location.href.lastIndexOf('/')+1) + url;\r\n                    }\r\n                    console.log('Lure.GetFileText', url);\r\n                    xhr.open('GET', url);\r\n                    //xhr.setRequestHeader('Content-Type',\"text/plain; charset=x-user-defined\");\r\n                    xhr.send();\r\n                });\r\n\r\n\r\n            };\r\n            this.GetInlineSize = function(elem, fontSize='1rem'){\r\n                const hiddenStyle = \"left:-10000px;top:-10000px;height:auto;width:auto;position:absolute;\";\r\n                const clone = document.createElement('div');\r\n                for (let k in elem.style) {\r\n                    try {\r\n                        if ((elem.style[k] !== '') && (elem.style[k].indexOf(\":\") > 0)) {\r\n                            clone.style[k] = elem.style[k];\r\n                        }\r\n                    } catch (e) {}\r\n                }\r\n                document.all ? clone.style.setAttribute('cssText', hiddenStyle) : clone.setAttribute('style', hiddenStyle);\r\n                clone.style.fontSize = fontSize;\r\n                clone.innerHTML = elem.innerHTML;\r\n                parent.document.body.appendChild(clone);\r\n                const sizes = {width:clone.clientWidth,height:clone.clientHeight};\r\n                parent.document.body.removeChild(clone);\r\n                return sizes;\r\n            };\r\n            this.isNumeric = function(n) {\r\n                return !isNaN(parseFloat(n)) && isFinite(n);\r\n            };\r\n            //this.Content = Lure.Content;\r\n            //this.Templator = Templator;\r\n            /*editable*/\r\n            //this.Editables = '.editable-waiting';\r\n            this._DateFormat = function (date, format = \"DD.MM.YYYY HH:mm:ss\") {\r\n                if (date === null || typeof date === 'undefined')\r\n                    return '';\r\n                let data = date.getDate();\r\n                let mo = date.getMonth();\r\n                let year = date.getFullYear();\r\n                let hour = date.getHours();\r\n                let min = date.getMinutes();\r\n                let sec = date.getSeconds();\r\n\r\n                return format\r\n                    .replace('DD', data.toString().length < 2? `0${data}`: data )\r\n                    .replace('D', data )\r\n                    .replace('MMM', $this.Culture.MonthNames[mo] )\r\n                    .replace('MM', mo.toString().length < 2 ? `0${mo}`:mo )\r\n                    .replace('M', mo )\r\n                    .replace('YYYY',year )\r\n                    .replace('YY',year.toString().substring(2,2) )\r\n                    .replace('Y',year )\r\n                    .replace('HH',hour.toString().length < 2 ? `0${hour}`:hour )\r\n                    .replace('hh',hour )\r\n                    .replace('mm',min.toString().length < 2 ? `0${min}`:min )\r\n                    .replace('ss',sec.toString().length < 2 ? `0${sec}`:sec );\r\n            };\r\n            this.Editable = {\r\n                EditMode: false,\r\n                RemoveWaiting(){\r\n                    let waiedites = document.querySelectorAll('.editable-waiting');\r\n                    waiedites.forEach(function (item) {\r\n                        item.classList.remove('editable-waiting');\r\n                    });\r\n                },\r\n                RemoveEdits(){\r\n                    if ($this.Editable.EditMode)\r\n                        return;\r\n                    let editables = document.querySelectorAll('.editable-editing');\r\n                    editables.forEach(function (item) {\r\n                        item.innerHTML = item._innerHTML;\r\n                        item.classList.remove('editable-editing');\r\n                    });\r\n                    $this.Editable.RemoveWaiting();\r\n                },\r\n                AddEdits(EditableElement){\r\n                    EditableElement._innerHTML = EditableElement.innerHTML;\r\n                    let ValuePrev = EditableElement.querySelector('.editable-value').innerHTML;\r\n                    EditableElement.classList.add('editable-editing');\r\n                    EditableElement.dataset['value'] = ValuePrev;\r\n                   // EditableElement.style.paddingBottom = '0px';\r\n                    //EditableElement.style.paddingTop = '0px';\r\n                    let SaveButton = $this.Editable.EditMode? '': `<div class=\"editable-helper editable-save-button\"></div>`;\r\n                    if (!EditableElement.dataset['object']) //if no selectable data, just text editor is needed\r\n                    {\r\n                        let EditType = EditableElement.dataset['type'];\r\n                        if (typeof EditType === 'undefined')\r\n                            EditType = 'text';\r\n                        EditableElement.innerHTML = `<input class=\"textbox editable-helper editable-editor editable-textbox\" type=\"${EditType}\" value=\"${ValuePrev}\"> ${SaveButton}`;\r\n                        EditableElement.querySelector('.editable-editor').focus();\r\n                        EditableElement.querySelector('.editable-editor').select();\r\n                    }\r\n                    else    //selectable data\r\n                    {\r\n                        let string_Select = `<select class=\"select editable-helper editable-editor editable-select\">`;\r\n                        let SelectData = eval(EditableElement.dataset['object']);\r\n                        //console.log('-SelectData data-', SelectData);\r\n                        let Property = EditableElement.dataset['property'];\r\n                        let SelectOptions = '';\r\n                        SelectData.forEach(function (item) {\r\n                            //SelectOptions += ``\r\n                            let attributes = '';\r\n                            if (typeof item === typeof {}){\r\n                                for (let key in item)\r\n                                {\r\n                                    attributes += ` data-property_${key}=\"${item[key]}\"`;\r\n                                }\r\n                                string_Select += `<option class=\"editable-helper\" ${attributes}>${item[Property]}</option>`;\r\n                            }\r\n                            else{\r\n                                string_Select += `<option class=\"editable-helper\" ${(item === ValuePrev)? \"selected\":\"\"}>${item}</option>`;\r\n                            }\r\n                        });\r\n                        string_Select += `</select>${SaveButton}</div>`;\r\n                        //let Select = Lure.CreateElementFromString(string_Select);\r\n                        //Select.value = ValuePrev;\r\n                        EditableElement.innerHTML = string_Select;\r\n\r\n                    }\r\n\r\n\r\n                },\r\n                Save(EditableElement, ValueNew){\r\n                    let Content = EditableElement.closest('.mt-content');\r\n                    let Controller = Content.MonsieurController;\r\n                    let i = EditableElement.dataset['line'];\r\n                    let Property = EditableElement.dataset['property'];\r\n                    let DataObject = Controller.Data[i];\r\n                    if (ValueNew === '' || ValueNew === null || typeof ValueNew === 'undefined'){\r\n                        console.info('New Value is empty');\r\n                        Lure.ErrorHint(EditableElement, \"Пустое поле или неправильные данные\");\r\n                        return;\r\n                    }\r\n                    EditableElement.innerHTML = EditableElement._innerHTML;\r\n                    EditableElement.dataset['value'] = ValueNew;\r\n                    EditableElement.querySelector('.editable-value').innerHTML = ValueNew;\r\n                    EditableElement.classList.remove('editable-editing');\r\n                    if (Property !== '$this' && Property !== \"$item\")\r\n                        DataObject[Property] = ValueNew;\r\n                    else\r\n                        DataObject = ValueNew;\r\n\r\n\r\n                    //so server now\r\n                    Controller.LineSave(i, Property, ValueNew, function () {\r\n                        Lure.Editable.RemoveWaiting();\r\n                        if (Property !== '$this' && Property !== \"$item\")\r\n                            Controller.Data[i][Property] = ValueNew;\r\n                        else\r\n                            Controller.Data[i] = ValueNew;\r\n                    });\r\n                }\r\n            };\r\n            ///\r\n            this.Settings = {\r\n                DialogBlur: null,                    //{string, jQuery, HTMLElement} - where blur on dialog\r\n                DialogAnimation: 'lure-animation-dialog', //{string} -  css-animation class\r\n                EditableClass:  'editable',\r\n                EditableWaiting:  'editable-waiting',\r\n            };\r\n            this.Culture = {\r\n                MonthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"],\r\n                MonthNamesShort: [\"янв.\", \"фев.\", \"мар.\", \"апр.\", \"май\", \"июн.\", \"июл.\", \"авг.\", \"сен.\", \"окт.\", \"ноя.\", \"дек.\"],\r\n                WeekDays: [\"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\", \"Воскресенье\"],\r\n                WeekDaysShort: [\"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\", \"вс\"],\r\n            };\r\n            this.TemplatorList = [];\r\n            this.ContentList = {};\r\n\r\n            /////\r\n            this._DialogCount = 0;\r\n        };\r\n\r\n        Perf(perfStart, text='Perf'){\r\n            const x = Math.floor((window.performance.now()-perfStart)*100)/100;\r\n            console.info(\"[\" + text + \"]: \" + x + \"ms\");\r\n            return x;\r\n        }\r\n\r\n        /**\r\n         * Confirmation dialog\r\n         * @param Caption\r\n         * @param Message\r\n         * @param CaptionColor\r\n         * @param CaptionBackground\r\n         * @param OnAgree\r\n         * @param OnCancel\r\n         * @constructor\r\n         */\r\n        Confirm(Caption  = \"Achtung\", Message = '', {\r\n            CaptionColor =  '',\r\n            CaptionBackground = '',\r\n            OnAgree = () => {},\r\n            OnCancel = null\r\n        } = {})\r\n        {\r\n\r\n            document.activeElement.blur();\r\n\r\n\r\n            let dialog = document.createElement('div');\r\n            dialog.classList.add('lure-confirm');\r\n            if (Lure.Settings.DialogAnimation)\r\n                dialog.classList.add(Lure.Settings.DialogAnimation);\r\n            //###title\r\n            let title = document.createElement(\"div\");\r\n            title.classList.add('cd-caption');\r\n            title.innerHTML = Caption;\r\n            title.style.color = CaptionColor;\r\n            title.style.background = CaptionBackground;\r\n            dialog.appendChild(title);\r\n            //###message field\r\n            let msg = document.createElement(\"div\");\r\n            msg.classList.add('cd-text');\r\n            msg.innerHTML = Message;\r\n            dialog.appendChild(msg);\r\n            //###buttonfield\r\n            let buttons = document.createElement(\"div\");\r\n            buttons.classList.add(\"cd-buttons\");\r\n            dialog.appendChild(buttons);\r\n            //###button confirm\r\n            let btnOk = document.createElement(\"div\");\r\n            btnOk.classList.add(\"button\", \"cd-button\", \"btn-diag-confirm\");\r\n            btnOk.innerHTML = \"Ok\";\r\n            btnOk.onclick = function(){\r\n                Lure._DialogCount--;\r\n                if (OnAgree !== null && OnAgree !== undefined)\r\n                    OnAgree();\r\n                if (Lure.Settings.DialogBlur && Lure._DialogCount < 1 )\r\n                    Lure.Select(Lure.Settings.DialogBlur).classList.remove('lure-blur');\r\n                //$(Lure.Settings.DialogBlur).removeClass('lure-blur');\r\n                wrap.remove();\r\n                dialog.remove();\r\n\r\n            };\r\n            dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnOk);\r\n            //###button cancel\r\n            if (OnCancel !== null)\r\n            {\r\n                let btnCancel = document.createElement(\"div\");\r\n                btnCancel.classList.add(\"button\", \"cd-button\", \"btn-diag-cancel\");\r\n                btnCancel.innerHTML = \"Отмена\";\r\n                btnCancel.onclick = function(){\r\n                    Lure._DialogCount--;\r\n                    if (OnCancel !== null)\r\n                        OnCancel();\r\n                    if (Lure.Settings.DialogBlur  && Lure._DialogCount < 1)\r\n                        Lure.Select(Lure.Settings.DialogBlur).classList.remove('lure-blur');\r\n                    //$(Lure.Settings.DialogBlur).removeClass('lure-blur');\r\n                    wrap.remove();\r\n                    dialog.remove();\r\n\r\n                };\r\n                dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnCancel);\r\n            }\r\n            //### Dialog-Wrapper\r\n            let wrap = document.createElement(\"div\");\r\n            wrap.classList.add('ConfirmDialog-wrapper');\r\n            document.body.appendChild(wrap);\r\n            document.body.appendChild(dialog);\r\n            Lure._DialogCount++;\r\n            if (Lure.Settings.DialogBlur)\r\n            {\r\n                wrap.style.background = 'none';\r\n                Lure.Select(Lure.Settings.DialogBlur).classList.add('lure-blur');\r\n                //$(Lure.Settings.DialogBlur).addClass('lure-blur');\r\n            }\r\n        }\r\n        //Confirmation dialog teamplate just\r\n        NoFeature(name = \"\"){\r\n            if (name !== \"\")\r\n                name = \"\\\"\"+name+\"\\\"\";\r\n            this.Confirm(\r\n                \"Error\",\r\n                \"Sorry, function \"+name+\" is not available yet\"\r\n            )\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param object\r\n         * @param msg\r\n         * @constructor\r\n         */\r\n        ErrorHint(object, msg) {\r\n            if (!msg)\r\n                msg = \"Поле не может быть пустым\";\r\n            let div = document.createElement('div');\r\n            div.classList.add('lure-error-hint');\r\n            div.innerHTML = msg;\r\n            object.parentElement.style.position = 'relative';\r\n            object.parentElement.appendChild(div);\r\n            div.style.display = 'block';\r\n            try {\r\n                div.animate({opacity: [0, 1]}, {duration : 300});\r\n            }\r\n            catch (e){}\r\n\r\n            setTimeout(function(){\r\n\r\n                try {\r\n                    div.animate({opacity: [1, 0]}, {duration : 300})\r\n                        .onfinish = ()=>{div.style.display = 'none'};\r\n                }\r\n                catch (e){\r\n                    div.style.display = 'none';\r\n                }\r\n                //TODO CHECK FADEIN FADEOUT\r\n                setTimeout(function(){\r\n                    object.parentElement.style.position = '';\r\n                    div.remove();\r\n                }, 500)\r\n            }, 2000)\r\n        }\r\n    }\r\n    return new LureClass();\r\n})();","//sets = {\r\n//  SubContent: [\r\n//      {sets},                             -same object to create subs\r\n// ],\r\n//\r\n// Controller:{                                   - if needs some Template master\r\n//    Type: Templator,                                    - class link [optional] Templator by default\r\n//    Target: {string|HTMLElement}                        -[optional] if Controller.Target is undefined, Controller.Target = sets.Target\r\n//    Data: {array|object},                               - data array [optional] Data === [] by default\r\n//    ListElement: {string|HTMLElement},                  - repeated element\r\n//    EmptyMessage: \"no items\",                           - render if Data.length === 0;\r\n\r\n//  Control: {\r\n//    Target: {string, jQuery, HTMLElement},\r\n//    Global: {bool}                               - set global event listener. Set true if control renders after init or it renders dynamicly\r\n//    OnClick: {function}                          - here this === current Lure.Content\r\n//    OnChange: {function}                         - here this === current Lure.Content\r\n// },}\r\n\r\nLure.Plugin.Content = {\r\n    Version: '0.9.1',\r\n    Content: class LureContent {\r\n        constructor({                       //--Lure.Content Settings--\r\n                        Target     = null,              //{string, HTMLElement} - where to render       [by default this.Parent.Content];\r\n                        Content    = null,              //{string}  - html content string, if           [by default this.Target.innerHTML]\r\n                        CSS        = '',                //{string}  - css classes string\r\n                        Name       = null,              //{string}  - Lure.Content's name. Need for search content by .GetContent(contentName)\r\n                        Global     = false,             //{bool}    - actual for SubContent. Set true, if SubContent is outside of Parent\r\n                        Title      = \"\",                //{string}  -  header element, contains name/caption/title of content\r\n                        Type       = \"Untyped\",         //{string}  - if has - this.Content will be invisible by default, if need be visible set next property:\r\n                        Visible    = undefined,         //{bool}    - make visible by default (if has no Type - visible by default)\r\n                        SubContent = [],                //{Array} of Lure.Content Settings\r\n                        Dialog     = false,             //{bool} - make dialog absolute window with dialog wrapper\r\n                        DialogWrapper = true,           //{bool} - show dialog  wrapper bg\r\n                        DialogBlur = null,              //{string, jQuery, HTMLElement} target background for blur when dialog\r\n                        DialogAnimation = null,         //{string} - css animation name\r\n                        Show       = null,              //{function} - show action\r\n                        Hide       = null,              //{function} - hide action\r\n                        Shower     = function(){this.Content.style.display = '';},       //custom show handler [calls before .Show]\r\n                        Hider      = function(){this.Content.style.display = 'none';},   //custom hide handler [calls before .Hide]\r\n                        BeforeShow = function(){},      //{function} - calls before .Shower and .Show\r\n                        Refresh    = function(data, i){\r\n                            if (this.Controller)\r\n                                this.Controller.Refresh(data, i)\r\n                        },                              //{function} - refresh content, may be call on page resize for example\r\n                        Sorting    = false,             //{object}   - sort controls by field like 'field' -> '{css|HTMLElement}'  ex.: { count: '.head .count'}\r\n                        Filtering  = false,             //{object}   - like sorting, but fast filter textbox would be\r\n                        OnClick    = null,              //{function} - this.Content.onclick event\r\n                        Controller = null,              //{object} contoller settings(Templator or TreeBuilder)\r\n                        Control    = null,              //{object} (help upper)\r\n\r\n\r\n                        Props      = function(){},      //{function}  - recomented for extra fields  for Lure.Content (this.Extrafield =...)\r\n                        Methods    = function(){},      //{function}  - recomented for extra methods for Lure.Content (this.ExtraMethod = function(){...} )\r\n                        GetSet     = {},                //{function}  - recomenter for extra getters and setters for Lure.Content\r\n                        AfterBuild = function(){},      //{function} - calls after Lure.Content init\r\n                        Disabled   = false,             //debugging,\r\n                        Parent     = null               //link to parent Lure.Content of SubContent\r\n                    })\r\n\r\n        {\r\n            if (Disabled)\r\n                return;\r\n            let $this = this;\r\n            this.isContent = true;\r\n            this.isActive = true;\r\n            if (Name  === 'Tooltipchek')\r\n                ;//debugger;\r\n\r\n            this.Parent = Parent;\r\n            if (Parent !== null){\r\n                this.Target = Global? Lure.Select(Target) : Lure.Select(Target, this.Parent.Content);\r\n                if (this.Target === null)\r\n                    this.Target = this.Parent.Content;\r\n            }\r\n            else if (Target !== null){\r\n                this.Target = Lure.Select(Target);\r\n            }\r\n            // debugger;\r\n            ////\r\n            if (Content === null){\r\n                this.Content = this.Target;\r\n                construct.call($this);\r\n            }else{\r\n                if (Content.match(/<[^>]+>/) === null) {//if not dom string\r\n                    console.log('get load');\r\n                    Lure.GetFileText(Content).then(x => {\r\n                        // debugger;\r\n                        //     console.log('x', x);\r\n                        MakeContent.call($this, x);\r\n                        construct.call($this);\r\n                    });\r\n                }else {\r\n                    MakeContent.call($this, Content);\r\n                    construct.call($this);\r\n                }\r\n\r\n\r\n            }\r\n            function MakeContent(Content){\r\n                if (Controller === null || Array.isArray(Controller.Data))\r\n                {\r\n                    this.Content = Lure.CreateElementFromString(Content);\r\n                }\r\n                else if (Controller !== null && !Array.isArray(Controller.Data))\r\n                {\r\n                    /*Content = Content.replace(/<[^>]+>([^<]*{{([^#}]+)}}[^<]*)<[^>]+>/g, function (match, group) {\r\n                     let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                     return match.replace(match, `<span>${match}</span>`);\r\n                     });\r\n                     return  match.replace(group, newGroup);\r\n                     });*/\r\n                    Content = Content.replace(/>[^>]*({{[^#}]+}})[^>]*</g, function (match, group) {\r\n                        /*let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                         return match.replace(match, `<span>${match}</span>`);\r\n                         });*/\r\n                        const x = match.replace(/{{[^#}]+}}/g, function (matche) {\r\n                            return `<span>${matche}</span>`\r\n                        });\r\n                        return x;// match.replace(group, `<span>${group}</span>`);\r\n                    });\r\n                    this.Content = Lure.CreateElementFromString(Content);\r\n                }\r\n                //this._Content = Content;\r\n                this.Target.appendChild(this.Content);\r\n            }\r\n\r\n            /////\r\n            if (this.Content === null || this.Target === null)\r\n            {\r\n                this.isContent = false;\r\n                return;\r\n            }\r\n\r\n\r\n\r\n\r\n            //### CONSTRUCTION\r\n            if (CSS !== ''){\r\n                let node = document.createElement('style');\r\n                node.innerHTML = CSS;\r\n                document.body.appendChild(node);\r\n            }\r\n            function construct(){\r\n                this.Type = Type;\r\n                this.Name = Name;\r\n                this.AllContents = Lure.ContentList;\r\n\r\n\r\n                //### METHODS\r\n                /**\r\n                 * @param {object} Data\r\n                 * @param {int} index\r\n                 */\r\n                this.Refresh = Refresh.bind(this);\r\n                /**\r\n                 *\r\n                 * @param {selector|HTMLElement} s\r\n                 * @returns {HTMLElement}\r\n                 * @constructor\r\n                 */\r\n                this.Select = function(s){\r\n                    return Lure.Select(s, $this.Content)\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {selector|HTMLElement} s\r\n                 * @returns {NodeList}\r\n                 * @constructor\r\n                 */\r\n                this.SelectAll = function(s){\r\n                    return Lure.SelectAll(s, $this.Content)\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {string}stringName\r\n                 * @constructor\r\n                 * @returns {Lure.Content}\r\n                 */\r\n                this.GetParent = function(stringName='root'){\r\n                    let content = $this;\r\n                    while (content.Parent !== null && content.Name !== stringName)\r\n                        content = content.Parent;\r\n                    return content;\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {string}stringName\r\n                 * @constructor\r\n                 * @returns {Lure.Content}\r\n                 */\r\n                this.GetContent = function (stringName='root') {\r\n                    let parent = this.GetParent(stringName);\r\n                    if (parent.Name === stringName)\r\n                        return parent;\r\n                    // let root = parent;\r\n                    let found = parent;\r\n                    if (stringName === 'root')\r\n                        return found;\r\n                    let searcher0 = function (content) {\r\n                        if (content.isContent && content.__private.ContentNames)\r\n\r\n                            for( let i = 0; i < content.__private.ContentNames.length; i++){\r\n                                let name = content.__private.ContentNames[i];\r\n                                if (name === stringName)\r\n                                    return content[name];\r\n                                found = searcher(content[name])\r\n                            }\r\n                        return found;\r\n                    };\r\n                    let searcher = function (content) {\r\n                        // debugger;\r\n                        for(let key in content){\r\n                            if (key !== \"Parent\" && !!content[key] && content[key].isContent){\r\n\r\n                                if (content[key].Name === stringName)\r\n                                    return content[key];\r\n                                found = searcher(content[key]);\r\n                            }\r\n\r\n                        }\r\n                        return found;\r\n                    };\r\n                    return searcher(found);\r\n\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {HTMLElement|string} HTMLElement\r\n                 * @returns {number|Number}\r\n                 * @constructor\r\n                 */\r\n                this.GetIndex = function (HTMLElement) {\r\n                    HTMLElement = $this.Select(HTMLElement);\r\n                    return Array.prototype.slice.call( HTMLElement.parentElement.children ).indexOf(HTMLElement);\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {string} eventName\r\n                 * @param {string} selector\r\n                 * @param {function} func\r\n                 * @constructor\r\n                 */\r\n                this.AddEventListener = function (eventName, selector, func) {\r\n                    Lure.AddEventListenerGlobal(eventName,selector,func, $this.Content, $this);\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {string|HTMLElement} buttonTutorStarter\r\n                 * @constructor\r\n                 */\r\n                this.AddTutor = function (buttonTutorStarter) {\r\n                    $this.MonsieurTutor = new MonsieurTutor($this.Select(buttonTutorStarter), $this.Content);\r\n                };\r\n                //private\r\n                this._SortBy = function(f, data, isSorted = false){\r\n                    if (data.length < 2)\r\n                        return;\r\n                    console.log('sort by', f);\r\n                    data.sort(function (a, b) {\r\n                        if      ((a[f] < b[f]) && $this._Sorting[f].Sorted)\r\n                            return 1;\r\n                        else if ((a[f] > b[f]) && $this._Sorting[f].Sorted)\r\n                            return -1;\r\n                        else if ((a[f] < b[f]) && !$this._Sorting[f].Sorted)\r\n                            return -1;\r\n                        else if ((a[f] > b[f]) && !$this._Sorting[f].Sorted)\r\n                            return 1;\r\n                        return 0;\r\n                    });\r\n                    $this._Sorting[f].Sorted = !$this._Sorting[f].Sorted;\r\n                    for (let kf in $this._Sorting){\r\n                        if ($this._Sorting.hasOwnProperty(kf) && kf !== '_sorter'){\r\n                            $this._Sorting[kf].Target.classList.remove('mt-sorting-up');\r\n                            $this._Sorting[kf].Target.classList.remove('mt-sorting-down');\r\n                            if (f !==kf)\r\n                                $this._Sorting[kf].Sorted = false;\r\n                        }\r\n                    }\r\n                    $this._Sorting[f].Target.classList.add($this._Sorting[f].Sorted ? 'mt-sorting-down':'mt-sorting-up');\r\n                    $this.Refresh();\r\n                };\r\n                this._FilterBy = function () {\r\n                    let p = performance.now();\r\n                    let filters = 0;\r\n                    let _d = $this._Filter._DataDefault.slice(0);\r\n                    for (let f in $this._Filter){\r\n                        if ($this._Filter.hasOwnProperty(f) && $this._Filter[f].Filter && $this._Filter[f].Filter !==''){\r\n                            _d = _d.filter(x=>x[f].toString().toLowerCase().indexOf($this._Filter[f].Filter) > -1);\r\n                            filters++;\r\n                        }\r\n                    }\r\n                    console.log(_d);\r\n                    if (filters === 0)\r\n                    {\r\n                        if ($this._Sorting._sorter){\r\n                            $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\r\n                            $this._SortBy($this._Sorting._sorter, $this.Controller._Data);\r\n                        }\r\n                        $this.Controller.Refresh();\r\n                    }\r\n                    else\r\n                    {\r\n                        if ($this._Sorting._sorter){\r\n                            $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\r\n                            $this._SortBy($this._Sorting._sorter, _d);\r\n                        }\r\n                        $this.Controller.PageSize = $this._PageSize;\r\n                        $this.Controller._PageCursor = 0;\r\n                        $this.Controller._Rebuilder(_d);\r\n\r\n                    }\r\n\r\n                    mr.PerformanceNow(p, 'FilterBy')\r\n                };\r\n\r\n                //extra properties\r\n                Props.call(this);\r\n                //extra getters/setters\r\n                for(let k in GetSet){\r\n                    Object.defineProperty($this, k, Object.getOwnPropertyDescriptor(GetSet, k));\r\n                }\r\n                //extra methods\r\n                Methods.call(this);\r\n                //--\r\n                this.Show = function(e) {\r\n                    this.isActive = true;\r\n                    if (this.Control)\r\n                        this.Control.Active();\r\n                    let style = window.getComputedStyle($this.Content);\r\n                    let duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                    let durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                    if (duration < durationAni)\r\n                        duration = durationAni;\r\n                    duration++;\r\n                    if ($this.Type !== \"Untyped\" && !$this.isVisible)\r\n                    {\r\n                        Lure.ContentList[$this.Type].forEach((item) =>\r\n                        {\r\n                            if ((item) !== $this && item.isActive)\r\n                                item.Hide();\r\n                        });\r\n                    }\r\n                    if (Dialog){\r\n                        Lure._DialogCount++;\r\n                        $this.Content.classList.add('lure-dialog');\r\n                        //    console.log('DialogWrapper', DialogWrapper);\r\n                        if (DialogWrapper){\r\n                            $this.DialogWrapper = Lure.CreateElementFromString('<div class=\"dialog-wrapper\">');\r\n                            document.body.appendChild($this.DialogWrapper);\r\n                            $this.DialogWrapper.onclick = $this.Hide.bind($this);\r\n\r\n                            let zIndexWrapper = parseInt(window.getComputedStyle($this.DialogWrapper).zIndex);\r\n                            let zIndexContent = parseInt(window.getComputedStyle($this.Content).zIndex);\r\n                            if (Number.isNaN(zIndexContent) || zIndexContent < zIndexWrapper)\r\n                                $this.Content.style.zIndex = zIndexWrapper+1;\r\n                        }\r\n\r\n                        if (DialogBlur)\r\n                        {\r\n                            $this.DialogWrapper.style.background = 'none';\r\n                            Lure.Select(DialogBlur).classList.add('lure-blur');\r\n                        }\r\n                        if (DialogAnimation){\r\n                            $this.Content.classList.add(DialogAnimation);\r\n                        }\r\n                    }\r\n                    BeforeShow.call($this, e);\r\n                    Shower.call($this, e);\r\n                    $this.Content.style.display = '';\r\n                    clearTimeout($this.__private.ToggleTimer);\r\n                    //this.Content.addEventListener('transitionend', Show.bind($this, e));\r\n                    if (Show !== null) {\r\n                        $this.__private.ToggleTimer = setTimeout(function() {\r\n                            Show.call($this, e);\r\n                        },duration);\r\n                    }\r\n                };\r\n                this.Hide = function(e) {\r\n                    this.isActive = false;\r\n                    if (this.Control)\r\n                        this.Control.Disactive();\r\n                    let style = window.getComputedStyle($this.Content);\r\n                    let duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                    let durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                    if (duration < durationAni)\r\n                        duration = durationAni;\r\n                    duration++;\r\n                    if (Dialog)\r\n                    {\r\n                        Lure._DialogCount--;\r\n                        if ($this.DialogWrapper)\r\n                            $this.DialogWrapper.remove();\r\n                        if (DialogBlur  && Lure._DialogCount < 1)\r\n                            Lure.Select(DialogBlur).classList.remove('lure-blur');\r\n                    }\r\n\r\n                    Hider.call($this, e);\r\n                    clearTimeout($this.__private.ToggleTimer);\r\n                    if (Hide !== null)\r\n                        $this.__private.ToggleTimer = setTimeout(function () {\r\n                            Hide.call($this, e);\r\n                        }, duration);\r\n\r\n                };\r\n                this.Toggle = function(e){\r\n                    if ($this.isVisible)\r\n                        $this.Hide(e);\r\n                    else\r\n                        $this.Show(e);\r\n                };\r\n\r\n                this.__private = {};\r\n                this.__private.ToggleTimer = null;\r\n                this.Control = new Lure.Plugin.Content.Control(Control, $this);\r\n                this.Content.onclick = OnClick? OnClick.bind($this) : null;\r\n                //SubContent\r\n                if (Array.isArray(SubContent)){\r\n                    for (let i = 0; i < SubContent.length; i++){\r\n                        {\r\n                            if (!SubContent[i].Parent)\r\n                                SubContent[i].Parent = $this;\r\n                            //  $this.__private.ContentNames.push(SubContent[i].Name);\r\n                            $this[SubContent[i].Name] = new Lure.Content( SubContent[i] );\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    for (let cname in SubContent){\r\n                        SubContent[cname].Parent = $this;\r\n                        SubContent[cname].Name = cname;\r\n                        //       $this.__private.ContentNames.push(cname);\r\n                        $this[cname] = new Lure.Content(SubContent[cname]);\r\n                    }\r\n                }\r\n                //title\r\n                this.TitleContent = Lure.Select(Title, this.Content);\r\n\r\n                if ( (Type === \"Untyped\" && Visible !== false) && !Dialog)\r\n                    Visible = true;\r\n                else if ( (Type !== \"Untyped\" && Visible !== true) || ( Dialog && Visible !== true) )\r\n                    Visible = false;\r\n                //if (Typed) Content is Visible\r\n                if (Visible){\r\n                    this.Content.style.display = '';\r\n                    if (this.Control)\r\n                        this.Control.Active();\r\n                }\r\n                else { //not undefined\r\n                    this.isActive = false;\r\n                    this.Content.style.display = 'none';\r\n                }\r\n                if (Controller){\r\n                    if (Controller.isController){\r\n                        this.Controller = Controller;\r\n                        this.Controller.Parent = this;\r\n                    }\r\n                    else{\r\n                        if (!Controller.Target)\r\n                            Controller.Target = this.Content;\r\n                        if (!Controller.Type)\r\n                            Controller.Type = \"Templator\";\r\n                        Controller.Parent = this;\r\n                        this.Controller = new Lure.Plugin.Content.Controller[Controller.Type](Controller);\r\n                    }\r\n                    if (this.Controller.isHasEditable)\r\n                    {\r\n                        Lure._EditablesEventListenerRun($this.Content);\r\n                    }\r\n                }\r\n\r\n                if (Sorting){\r\n                    $this._Sorting = {};\r\n                    $this._Sorting._sorter = null;\r\n                    for (let f in Sorting){\r\n                        if (Sorting.hasOwnProperty(f) && f !== '_sorter'){\r\n                            $this._Sorting[f] = {\r\n                                Target: $this.Select(Sorting[f]),\r\n                                Sorted: false,\r\n                            };\r\n                            $this._Sorting[f].Target.classList.add('mt-sorting');\r\n                            $this._Sorting[f].Target.addEventListener('click', function () {\r\n                                $this._Sorting._sorter = f;\r\n                                $this._SortBy(f, $this.Controller._Data);\r\n                            })\r\n                        }\r\n                    }\r\n                    console.info('mt-sortable', $this._Sorting);\r\n                }\r\n                if (Filtering){\r\n                    $this._Filter = {};\r\n                    $this._Filter._DataDefault = $this.Controller._Data.slice(0);\r\n                    for (let f in Filtering){\r\n                        if (Filtering.hasOwnProperty(f) && f !== '_format'){\r\n                            $this._Filter[f] = {\r\n                                Target: $this.Select(Filtering[f]),\r\n                                Filter: '',\r\n                            };\r\n                            $this._Filter[f].Target.classList.add('mt-filtering');\r\n                            $this._Filter[f].Target.innerHTML = '<input type=\"text\" class=\"mt-filtering-input\">';\r\n                            $this._Filter[f].Target.querySelector('.mt-filtering-input').addEventListener('keyup', function (e) {\r\n                                //$this._SortBy(f);\r\n                                $this._Filter[f].Filter = e.target.value.toLowerCase();\r\n                                $this._FilterBy();\r\n\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                if (!Lure.ContentList[$this.Type]) //if list is empty, create it, else just add\r\n                    Lure.ContentList[$this.Type] = [];\r\n                Lure.ContentList[$this.Type].push(this);\r\n\r\n                //close button\r\n                Array.from(this.Content.children).forEach(function(item){\r\n                    if (item.classList.contains(\"close\"))\r\n                        item.onclick = function (e) {\r\n                            $this.Hide(e);\r\n                        }\r\n                });\r\n\r\n                setTimeout(function () {\r\n                    AfterBuild.call($this);\r\n                }, 1);\r\n            }\r\n\r\n        }\r\n        get isVisible(){\r\n            return Lure.isVisible(this.Content);\r\n        }\r\n        get Title(){\r\n            return this.TitleContent.innerHTML;\r\n        }\r\n        set Title(t){\r\n            this.TitleContent.innerHTML = t;\r\n        }\r\n        get Data(){\r\n            if (this.Controller)\r\n                return this.Controller.Data;\r\n            return null;\r\n        }\r\n        set Data(data){\r\n            if (this.Controller)\r\n                this.Controller.Data = data;\r\n        }\r\n        get Items(){\r\n            if (this.Controller)\r\n                return this.Controller.Items;\r\n            return null;\r\n        }\r\n        RefreshOne(i){\r\n            if (this.Controller)\r\n                this.Controller.RefreshOne(i);\r\n        }\r\n        Remove(i, removeData){\r\n            if (this.Controller)\r\n                this.Controller.Remove(i, removeData);\r\n        }\r\n        Add(itemData, extraclass = false, isPrepend = false, addData = true){\r\n            if (this.Controller)\r\n                this.Controller.Add(itemData, extraclass, isPrepend, addData);\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {object} itemData\r\n         * @param {int} index\r\n         * @constructor\r\n         */\r\n        Edit(itemData, index){\r\n            if (this.Controller)\r\n                this.Controller.Edit(itemData, index);\r\n        }\r\n        Dispose(){\r\n            this.Content.remove();\r\n            this.Control.Disactive();\r\n            delete this.Controller;\r\n            delete this.Control;\r\n        }\r\n    },\r\n    Control: class LureControl{\r\n        constructor(control, owner){\r\n            if (control === null)\r\n                return;\r\n            if (control.length > 0) //if control list not empty\r\n            {\r\n                let controls = this;\r\n                for (let i = 0; i < control.length; i++)\r\n                {\r\n                    if (!control[i].Name)\r\n                        control[i].Name = \"unnamed_\" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);\r\n                    controls[control[i].Name] = {\r\n                        Content: Lure.SelectAll(control[i].Target),\r\n                        _Content: control[i].Target,\r\n                        Type: control[i].Type ? control[i].Type : \"Untyped\",\r\n                        isGlobal: control[i].Global,\r\n                        OnClick: control[i].OnClick ? control[i].OnClick : owner.Show,\r\n                        OnChange: control[i].OnChange,\r\n                        Active: function(){\r\n                            Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                                item.classList.add('active');\r\n                            })\r\n                        },\r\n                        Disactive: function(){\r\n                            Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                                item.classList.remove('active');\r\n                            });\r\n                        }\r\n\r\n                    };\r\n                    //onclick\r\n                    controls[control[i].Name].Content.forEach(function (item) {\r\n                        item.classList.add('pointer');\r\n                    });\r\n                    if (control[i].Global){\r\n\r\n                        Lure.AddEventListenerGlobal('click', control[i].Target, function (e) {\r\n                            Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                                item.classList.remove('active');\r\n                            });\r\n                            e.target.classList.add('active');\r\n                            if (controls[control[i].Name].OnClick)\r\n                                controls[control[i].Name].OnClick.call(owner, e);\r\n                        });\r\n                    }\r\n                    else{\r\n                        controls[control[i].Name].Content.forEach(function (item) {\r\n                            item.onclick = function (e) {\r\n                                Lure.ContentList[owner.Type].forEach((item) =>\r\n                                {\r\n                                    if ((item) !== owner)\r\n                                    {\r\n                                        if (item.Control)\r\n                                            item.Control.Disactive();\r\n                                    }\r\n                                });\r\n                                //console.log('remover', e);\r\n                                controls[control[i].Name].Content.forEach(function (item) {\r\n                                    item.classList.remove('active');\r\n                                });\r\n                                e.currentTarget.classList.add('active');\r\n                                controls[control[i].Name].OnClick.call(owner, e);\r\n                            };\r\n\r\n                        })\r\n                    }\r\n\r\n                    if (control[i].OnChange)\r\n                    {\r\n                        if (control[i].Global){\r\n                            Lure.AddEventListenerGlobal('change', control[i].Target, function (e) {\r\n                                control[i].OnChange.call(owner, e);\r\n                            } )\r\n                        }\r\n                        else{\r\n                            controls[control[i].Name].Content.forEach(function (item) {\r\n                                item.onchange = function (e) {\r\n                                    control[i].OnChange.call(owner, e);\r\n                                };\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Active(type = \"Untyped\"){\r\n            for (let k in this)\r\n                if (this[k].Type === type)\r\n                    this[k].Content.forEach(function (item) {\r\n                        item.classList.add('active')\r\n                    })\r\n        }\r\n        Disactive(type = \"Untyped\"){\r\n            for (let k in this)\r\n                if (this[k].Type === type)\r\n                {\r\n                    this[k].Content.forEach(function (item) {\r\n                        item.classList.remove('active');\r\n                    });\r\n                    if (this[k].isGlobal)\r\n                        Lure.SelectAll(this[k]._Content).forEach(function(item){\r\n                            item.classList.remove('active');\r\n                        })\r\n                }\r\n\r\n        }\r\n    },\r\n    Controller: {\r\n        Templator: class Templator{\r\n            constructor(\r\n                {\r\n                    Target = null,                              //{HTMLelement}\r\n                    Data = [],                                  // {object}, {array} - if object Templator would be refresh, if array - rebuild\r\n                    ListElement = \".list_element\",              //{string} - css selector or dom string\r\n                    //ListElementOnClick = null,                //{function} -\r\n                    EmptyMessage = \"\",\r\n                    EmptyHide = false,      //{bool} - Templator.Content would be hidden if Data.length = 0\r\n                    //DataType = \"untyped\",  //--BAD EXPERIENCE-- ODO when refresh one of typed Templator, would be refreshed/added/removed all of same type Templators (exclude untyped ofcourse)\r\n\r\n                    PageSize = -1,\r\n                    DataCount = -1,         //if > 0 PageGet is requied!!!\r\n                    PageGet = null,         //{function} - requied if DataCount > 0\r\n\r\n                    ShowAllButton = true,\r\n\r\n                    LineSave = function(line, property, newValue, callback=()=>{}){setTimeout(()=>{callback()}, 500)},            // callback would remove editable-waiting css class;\r\n                    LineAdd = function(dataObject, callback=()=>{}){setTimeout(()=>{ callback()}, 500)},                     // callback would remove editable-waiting css class;\r\n                    EditModeSwitch = null,     //checkbox, which toggle to edit mode\r\n                    DataSaveAll = function(){},//TODO\r\n\r\n                    //Sortable = false, //sort data columns\r\n\r\n                    NoAnimation = false,    //TODO\r\n                    NoBuild = false,\r\n\r\n                    BeforeBuild = function(){},\r\n                    AfterBuild = function(){},\r\n                    AfterAdd = function(){},\r\n                    Parent = null           //Lure.Content, which owns this Controller\r\n\r\n                } = {})\r\n            {\r\n                //### DEFINES\r\n                let $this = this;\r\n                this.isController = true;\r\n                if (Parent !== null)\r\n                    this.Content = Lure.Select(Target, Parent.Content);\r\n                else\r\n                    this.Content = Lure.Select(Target);\r\n                this.Target = this.Content;\r\n                this._Data = Data;\r\n                this.EmptyMessage = EmptyMessage;\r\n                this.ListElement = \"\";\r\n\r\n                this.BeforeBuild = BeforeBuild.bind(this);\r\n                this.AfterBuild = AfterBuild.bind(this);\r\n                this.AfterAdd = AfterAdd.bind(this);\r\n                this.Parent = Parent;\r\n                //paginating\r\n                this.PageSize = PageSize;\r\n                this._PageSize = PageSize;\r\n                this._DataCount = DataCount > 0 ? DataCount : this._Data.length ;\r\n                this._PageCursor = 0;\r\n                this._PageGet = PageGet;\r\n\r\n                //server handling\r\n                this.LineAdd = LineAdd;\r\n                this.LineSave = LineSave;\r\n                this.Type = null; // Refresh or ItemList\r\n\r\n                //settings\r\n                this.isShowAllButton = ShowAllButton;\r\n                this.isNoAnimaton = NoAnimation;\r\n                this.isEmptyHide = EmptyHide;\r\n\r\n                //fields to refresh (for refresh type)\r\n                let Dictionary = [];\r\n                this._Dictionary = Dictionary;\r\n                const Refresher = function () {\r\n                    //TODO refresh only changes\r\n                    if (!$this._Data)\r\n                        $this._Data = {};\r\n                    for (let i = 0; i < Dictionary.length; i++)\r\n                    {\r\n\r\n                        for (let j = 0; j < Dictionary[i].fields.length; j++)\r\n                        {\r\n                            let isAttribute = Dictionary[i].fields[j].Target.indexOf('attributes') > -1;\r\n                            let NewValue = Dictionary[i].fields[j].BuildValue($this._Data);\r\n                            if (isAttribute)\r\n                            {\r\n\r\n                                Dictionary[i].obj.attributes[Dictionary[i].fields[j].Target.split(\".\")[1]].value = NewValue;\r\n                            }\r\n                            else {\r\n                                Dictionary[i].obj[Dictionary[i].fields[j].Target] = Dictionary[i].fields[j].BuildValue($this._Data);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                };\r\n                this._Rebuilder = function (data = $this._Data) {\r\n                    let lines = \"\";\r\n                    //$this.Content.style.display = '';\r\n                    if ($this._PageCursor === 0 )\r\n                        $this.Content.querySelectorAll('.mt-line, .mt-paginator, .mt-empty').forEach(function(item) {item.remove();});\r\n                    //pagination check\r\n                    let NextCount;\r\n                    //let line;\r\n                    let Limit = data.length;\r\n                    $this._DataCount = DataCount > 0 ? DataCount : Limit ;\r\n                    if ($this.PageSize > 0)\r\n                    {\r\n                        //  debugger;\r\n                        $this._DataCount = $this._DataCount > 0 ? $this._DataCount : data.length ;\r\n                        let paginator = $this.Content.querySelector('.mt-paginator');\r\n                        if (paginator !== null)\r\n                            paginator.remove();\r\n                        Limit = parseInt($this._PageCursor) + parseInt($this.PageSize);\r\n                        if (Limit > $this._DataCount && $this._DataCount > 0)\r\n                            Limit = $this._DataCount;\r\n                        //how much will be load in next step\r\n                        NextCount = $this._DataCount - Limit;\r\n                        if (NextCount > $this.PageSize)\r\n                            NextCount = $this.PageSize;\r\n                    }\r\n                    if ($this.Type === \"ItemList\" && data.length === 0 && $this.EmptyMessage !== \"\" && !$this.isEmptyHide)\r\n                    {\r\n                        let tag = $this.ListElement.match(/\\s?([\\w]+) /)[0].replace(/\\s/g, \"\");\r\n                        let empty = document.createElement(tag);\r\n                        empty.classList.add('mt-empty');\r\n                        empty.innerHTML = $this.EmptyMessage;\r\n                        $this.Content.appendChild(empty);\r\n                        return;\r\n                    }\r\n                    else if ($this.Type === \"ItemList\" && data.length === 0 && $this.isEmptyHide){\r\n                        $this.Content.style.display = 'none';\r\n                        return;\r\n                    }\r\n                    else if (data.length === 0) {\r\n                        return;\r\n                    }\r\n                    //linebuilding\r\n                    for (let i = $this._PageCursor; i < Limit; i++)\r\n                        lines += $this._LineBuilder(data[i], i, data.length);\r\n                    //appending\r\n                    //   debugger;\r\n                    if ($this.Content.children.length < 1)\r\n                    {\r\n                        $this.Content.innerHTML = lines;\r\n                    }\r\n                    else{\r\n                        lines = Lure.CreateElementsFromString(lines, $this.Content.tagName);\r\n                        if (lines !== null)\r\n                            lines.forEach(function (item) {\r\n                                $this.Content.appendChild(item);\r\n                            });\r\n                    }\r\n                    /*{\r\n                     lines += $this._LineBuilder(data[i], i, data.length);\r\n                     //if should to save changed class list after rebuild\r\n                     if (data[i] && data[i].$classlist)\r\n                     {\r\n                     line = $(line);\r\n                     line.attr('class', data[i].$classlist);\r\n                     lines +=line[0].outerHTML;\r\n                     }\r\n                     else{\r\n                     lines += line;\r\n                     }\r\n                     }*/\r\n                    //save cursor index\r\n                    if ($this.PageSize > 0)\r\n                        $this._PageCursor = Limit;\r\n                    //PAGINATION BUILD\r\n                    //limit data case\r\n                    if ($this.PageSize > 0 && $this._PageCursor < $this._DataCount){\r\n                        let also;\r\n                        let showAll = `<span>  (Не загружено ${($this._DataCount- $this._PageCursor)}) </span>`;\r\n                        if ($this.isShowAllButton)\r\n                        {\r\n                            showAll = `<span> или </span><span class=\"mt-btn-nextAll dotted pointer\"> Все ( ${($this._DataCount - $this._PageCursor)} )</span>`;\r\n                        }\r\n                        let isTable = $this.Content.tagName === 'table' || $this.Content.tagName === 'thead' || $this.Content.tagName === 'tbody';\r\n                        if (isTable)\r\n                        {\r\n                            let colspan = $this.Content.querySelector(\"tr:first-child th\").length + 1;\r\n\r\n                            also = `<tr class=\"mt-paginator\"><td colspan=\"${colspan}\" class=\"element block-head\"><span class=\"tpltr-next dotted pointer\">Показать еще ${NextCount}</span>${showAll}</td></tr>`;\r\n                            also = Lure.CreateElementFromString(also, $this.Content.tagName);\r\n                        }\r\n                        else {\r\n                            also = Lure.CreateElementFromString(`<div class='mt-paginator'><span class=\"mt-btn-next dotted pointer\">Показать еще ${NextCount}</span>${showAll}</div>`);\r\n\r\n                        }\r\n                        let btnNext = also.querySelector('.mt-btn-next');\r\n                        //console.log('btnNext', btnNext);\r\n                        btnNext.onclick = function(){\r\n                            if ($this._PageCursor >= data.length)\r\n                                $this._PageGet($this._PageCursor, $this.PageSize, BuildWithIt);\r\n                            else\r\n                                Build();\r\n\r\n                        };\r\n                        let btnNextAll = also.querySelector('.mt-btn-nextAll');\r\n                        btnNextAll.onclick = function(){\r\n                            $this.PageSize = $this._DataCount;\r\n                            if ($this._PageGet !== null)\r\n                                $this._PageGet($this._PageCursor, ($this._DataCount - $this._PageCursor), BuildWithIt);\r\n                            else\r\n                                Build();\r\n                        };\r\n                        $this.Content.appendChild(also);\r\n\r\n                    }\r\n\r\n                };\r\n                const Build = function () {\r\n                    $this.BeforeBuild();\r\n\r\n                    if ($this.Type === \"Refresh\")\r\n                        Refresher();\r\n                    else if ($this.Type === \"ItemList\"/* && $this._Data.length > 0*/)\r\n                        $this._Rebuilder();\r\n\r\n\r\n                    $this.AfterBuild();\r\n                };\r\n                const BuildWithIt = function (data) {\r\n                    for (let i = 0; i < data.length; i++)\r\n                        $this._Data.push(data[i]);\r\n                    Build();\r\n                };\r\n                // = Rebuild1er;\r\n\r\n                //#### METHODS\r\n                this.FieldAdd = function (element) {\r\n                    let elemAttributes = element.attributes;\r\n                    let fields = [];\r\n                    let WhatFields = -1; // 0-att only, 1-innerHTML only, 2-both\r\n                    //find fields in attributes\r\n                    for (let i = 0; i < elemAttributes.length; i++)\r\n                    {\r\n                        if (elemAttributes[i].value.indexOf(\"{{\") > -1)\r\n                        {\r\n                            if (elemAttributes[i].name !== 'value')\r\n                                fields.push({\r\n                                    Target: 'attributes.'+elemAttributes[i].name,\r\n                                    BuildValue: Lure.Compile(elemAttributes[i].value)\r\n                                });\r\n                            else {\r\n                                fields.push({\r\n                                    Target: elemAttributes[i].name,\r\n                                    BuildValue: Lure.Compile(elemAttributes[i].value)\r\n                                });\r\n                            }\r\n                            WhatFields = 0;\r\n                        }\r\n                    }\r\n                    //innerHTML check\r\n                    if (element.childNodes.length < 2)\r\n                    {\r\n                        if (element.innerHTML.indexOf(\"{{\") > -1)\r\n                        {\r\n                            fields.push({\r\n                                Target: \"innerHTML\",\r\n                                BuildValue: Lure.Compile(element.innerHTML)\r\n                            });\r\n                            WhatFields = WhatFields !==0 ? 1:2; //1 if no att, 2 if att exists\r\n\r\n                        }\r\n\r\n                    }\r\n                    if (WhatFields > -1)\r\n                    {\r\n                        Dictionary.push( {\r\n                            obj: element,\r\n                            fields: fields\r\n                        } );\r\n                    }\r\n                };\r\n                this.Refresh = function(data = null, index = null){\r\n                    $this.PageSize = $this._PageSize;\r\n                    $this._PageCursor = 0;\r\n                    if (data !== null)\r\n                        $this._Data = data;\r\n                    $this.PageCursor = 0;\r\n                    if (index === null)\r\n                        Build();\r\n                    else\r\n                        $this.RefreshOne(index);\r\n                };\r\n                this.RefreshOne = function (i) {\r\n                    let newItem = Lure.CreateElementFromString($this._LineBuilder($this._Data[i], i, $this._Data.length), $this.Content.tagName);\r\n                    let itemOld = $this.Items[i];\r\n                    $this.Items[i].parentNode.replaceChild(newItem, itemOld);\r\n                };\r\n                this.Add = function(item, extraclass = false, isPrepend = false, addData = true){\r\n                    if ($this._Data.length === 0 && $this.Content.querySelector(\".mt-empty\") !== null)\r\n                        $this.Content.querySelector(\".mt-empty\").remove();\r\n                    let fragment = document.createDocumentFragment();\r\n                    let elem = document.createElement($this.Content.tagName);\r\n                    let i;\r\n                    if (!isPrepend)\r\n                    {\r\n                        i = $this._Data.length;\r\n                        if (!addData)\r\n                            i--;\r\n                        elem.innerHTML = $this._LineBuilder(item, i, i+1);\r\n                        while (elem.childNodes[0]) {\r\n                            fragment.appendChild(elem.childNodes[0]);\r\n                        }\r\n                        if (extraclass)\r\n                            fragment.children[0].classList.add(extraclass);\r\n                        if (addData)\r\n                            $this._Data.push(item);\r\n                        $this.Content.appendChild(fragment);\r\n                    }\r\n                    else{\r\n                        i = 0;\r\n                        //change data-line attributes\r\n                        $this.Items.forEach(function (item) {\r\n                            console.log(item);\r\n                            console.log(item.dataset['line']);\r\n                            item.dataset['line'] =  parseInt( item.dataset['line'] ) + 1;\r\n                        });\r\n                        //TODO rendered indexes not changings\r\n\r\n                        elem.innerHTML =  $this._LineBuilder(item, 0, $this._Data.length+1);\r\n                        while (elem.childNodes[0]) {\r\n                            fragment.appendChild(elem.childNodes[0]);\r\n                        }\r\n                        if (extraclass)\r\n                            fragment.children[0].classList.add(extraclass);\r\n                        if (addData)\r\n                            $this._Data.unshift(item);\r\n                        $this.Content.prepend(fragment);\r\n                    }\r\n                    //server saver\r\n                    if ($this.LineAdd !== null)\r\n                    {\r\n                        $this.LineAdd(item, function () { //remove extraclass callback\r\n                            let x = $this.Content.querySelector('.'+extraclass);\r\n                            if (x)\r\n                                x.classList.remove(extraclass);\r\n                        });\r\n                    }\r\n                    $this.AfterAdd(item, i);\r\n                };\r\n                this.Edit = function (itemData, i){\r\n                    console.log('edit itemData', i, itemData);\r\n                    Array.from($this.Items).filter(x => parseInt(x.dataset['line'])===i)[0].classList.add('editable-waiting');\r\n                    $this.LineSave(i, '$this', itemData,\r\n                        function () {\r\n                            $this._Data[i] = itemData;\r\n                            $this.RefreshOne(i);\r\n                        });\r\n\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {int} index\r\n                 * @param {bool} removeData\r\n                 * @constructor\r\n                 */\r\n                this.Remove = function(index, removeData = true){\r\n                    //TODO rendered indexes not changings\r\n                    $this.Content.querySelector(`.mt-line[data-line=\"${index}\"]`).remove();\r\n                    for (let j = index; j < $this.Items.length; j++){\r\n                        $this.Items[j].dataset['line'] =  parseInt( $this.Items[j].dataset['line'] ) - 1;\r\n                        $this.Items[j].querySelectorAll('[data-line]').forEach(function (item) {\r\n                            item.dataset['line'] = parseInt( item.dataset['line'] ) - 1;\r\n                        })\r\n                    }\r\n                    if (removeData)\r\n                        $this._Data.splice(index, 1);\r\n                    if ($this._Data.length === 0)\r\n                        $this.Refresh();\r\n                };\r\n                this.SwitchToEditMode = function () {\r\n                    Lure.Editable.EditMode = true;\r\n                    Lure.SelectAll('.editable', $this.Content).forEach(function (item) {\r\n                        // console.log(item);\r\n                        Lure.Editable.AddEdits(item);\r\n                    });\r\n                };\r\n\r\n                //### CONSTRUCTOR\r\n                if ( Array.isArray(this._Data) ){\r\n                    this.Type = \"ItemList\";\r\n                    const isListElementCssSelector = ListElement.match(/^[a-zA-Z0-9.,\\-_ *#]+$/g) !== null;\r\n                    if (isListElementCssSelector){\r\n                        let element = this.Content.querySelector(ListElement);\r\n                        element.classList.add('mt-line');\r\n                        ListElement = element.outerHTML;\r\n                        element.remove();\r\n                    }\r\n                    else{\r\n                        let list_element = ListElement.match(/<[^>]+>/)[0];\r\n                        let list_elementClassed;\r\n                        let pos = list_element.indexOf('class=\"');\r\n                        if (pos < 0)\r\n                        {\r\n                            list_elementClassed = list_element.substr(0,list_element.length - 1) + ' class=\"mt-line\"' + list_element.substr(list_element.length-1);\r\n                        }\r\n                        else\r\n                        {\r\n                            pos = list_element.indexOf('\"', pos+8);\r\n                            list_elementClassed = list_element.substr(0,pos) + \" mt-line\" + list_element.substr(pos);\r\n                        }\r\n                        ListElement = ListElement.replace(list_element, list_elementClassed);\r\n                    }\r\n                    //add data-line attribute\r\n                    ListElement = ListElement.replace(/<[\\s\\S]+?(>)/, function (a, b) {\r\n                        return a.replace(b, ' data-line=\"{{i}}\">')\r\n                    });\r\n                    this.ListElement = ListElement;\r\n                    this._LineBuilder = Lure.Compile(ListElement, true);\r\n                    if (ListElement.match(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/) !== null)\r\n                    {\r\n                        this.isHasEditable = true;\r\n                        if (EditModeSwitch !== null)\r\n                            Lure.Select(EditModeSwitch).addEventListener('change', function (e) {\r\n                                if ( e.currentTarget.checked ){\r\n                                    $this.SwitchToEditMode();\r\n                                }\r\n                                else{\r\n                                    Lure.Editable.EditMode = false;\r\n                                    document.body.click();\r\n                                }\r\n                            });\r\n                    }\r\n                    this.Content.MonsieurController = this;\r\n                    this.Content.classList.add('mt-content');\r\n\r\n                }\r\n                else {\r\n                    this.Type = \"Refresh\";\r\n                    let AllChildren = Array.prototype.slice.call( this.Content.querySelectorAll('*:not(g):not(path):not(clipPath):not(text):not(br)'));\r\n                    AllChildren.push( this.Content);\r\n                    AllChildren.forEach(function (item) {\r\n                        $this.FieldAdd(item);\r\n                    })\r\n                }\r\n                Lure.TemplatorList.push(this);\r\n                if (!NoBuild)\r\n                    Build();\r\n            }\r\n            get Data(){\r\n                return this._Data;\r\n            }\r\n            set Data(data){\r\n                this._Data = data;\r\n            }\r\n            get Items(){\r\n                return this.Content.querySelectorAll('.mt-line');\r\n            }\r\n        },\r\n        TreeBuilder: class TreeBuilder{\r\n            constructor(\r\n                {\r\n                    Target = null,                          //{string, HTMLElement}\r\n                    Data = [],\r\n                    ListElement = null,\r\n                    Drop = false,                       //{bool}   - horisontal menu with drop down subtrees;\r\n                    SubSelector = null,                 //{string} - cssselector of element, where put branches\r\n                    SubSelectorHandler = function(){},  //{function} - click handle on SubSelector Element (hide/show branch for exaple)\r\n\r\n                    BeforeBuild = function(){},\r\n                    AfterBuild = function(){},\r\n\r\n                    Parent = null               //Lure.Content, which owns this Controller\r\n                }\r\n            )\r\n            {\r\n                //### DEFINES\r\n                this.isController = true;\r\n                this.Content = Lure.Select(Target);\r\n                this.Target = this.Content;\r\n                this.Parent = Parent;\r\n                this._Data = Data;\r\n                this.SubSelector = SubSelector;\r\n                this.SubSelectorHandler = SubSelectorHandler.bind(this);\r\n                this.BeforeBuild = BeforeBuild.bind(this);\r\n                this.AfterBuild = AfterBuild.bind(this);\r\n                let SubTreeClass = Drop ? 'mtb-sub_tree dropable':'mtb-sub_tree';\r\n                let Lvl = 0;\r\n                let Branch = ListElement === null ? this.Content.innerHTML : ListElement;\r\n                if (this.SubSelector === null){\r\n                    this.SubSelector = '.mtb-sub_tree';\r\n                    Branch = Branch.replace(/^([\\s\\S]*)(<\\/\\w+>)$/, function (match, html, entag) {\r\n                        entag = `<div class=\"${SubTreeClass}\"></div>${entag}`;\r\n                        return html+entag\r\n                    })\r\n                }\r\n                this.LineBuilder = Lure.Compile(Branch, true);\r\n                let $this = this;\r\n\r\n                let Index = 0;          //unque serial number of branch\r\n\r\n                let BuildElement = function(obj, key, indexJ) {\r\n                    Index++;\r\n                    let extra = {\r\n                        $lvl: Lvl,\r\n                        $key: key,\r\n                        $index: Index,\r\n                        $j: indexJ\r\n                    };\r\n                    let line = Lure.CreateElementFromString($this.LineBuilder(obj, Index, null, extra));\r\n                    line.classList.add('mtb-branch');\r\n                    for (let key in obj)\r\n                    {\r\n                        let ObjItem = obj[key];\r\n                        if (Array.isArray(ObjItem))\r\n                        {\r\n                            Lvl++;\r\n                            for (let i = 0; i < ObjItem.length; i++)\r\n                            {\r\n                                if ($this.SubSelector === null)\r\n                                {\r\n                                    line.appendChild(  BuildElement(ObjItem[i], key, i) );\r\n                                }\r\n                                else\r\n                                {\r\n                                    line.classList.add('mtb-has_tree');\r\n                                    if (Drop)\r\n                                        line.classList.add('dropable');\r\n                                    let sub = line.querySelector($this.SubSelector);\r\n                                    sub.appendChild(  BuildElement(ObjItem[i], key, i) );\r\n                                }\r\n                            }\r\n                            Lvl--;\r\n                        }\r\n                    }\r\n                    return line;\r\n                };\r\n                let Build = function () {\r\n                    $this.BeforeBuild();\r\n                    if (Array.isArray($this._Data))\r\n                    {\r\n                        $this.Content.innerHTML = '';\r\n                        Lvl++;\r\n                        for (let j = 0; j < $this._Data.length; j++)\r\n                            $this.Content.appendChild(  BuildElement($this._Data[j], \"root\", 0) );\r\n                        Lvl--;\r\n                    }\r\n                    else{\r\n                        $this.Content.appendChild(BuildElement($this._Data, \"root\", 0));\r\n                    }\r\n                    Lvl = 0;\r\n                    Index = 0;\r\n                    $this.AfterBuild();\r\n\r\n                };\r\n\r\n                Build(this._Data);\r\n\r\n                //### METHODS\r\n                this.Refresh = function (data=$this._Data) {\r\n                    $this._Data = data;\r\n                    Build();\r\n                }\r\n\r\n            }\r\n            get Data(){\r\n                return this._Data;\r\n            }\r\n            set Data(data){\r\n                this._Data = data;\r\n            }\r\n        }\r\n    }\r\n};\r\n//register plugin\r\nLure.Content = Lure.Plugin.Content.Content;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Lure.Content = Lure.Content;\r\n\r\n","//Tutorial\r\n//TargetButton = {string, HTMLElement} - button who start the tutor\r\n//TargetContent = {string, HTMLElement} - select/element where search tutors\r\nLure.Plugin.Tutor = class MonsieurTutor{\r\n    /**\r\n     *\r\n     * @param {HTMLElement} TargetButton\r\n     * @param {HTMLElement} TargetContent\r\n     */\r\n    constructor(TargetButton = null, TargetContent = null){\r\n        //### DEFINES\r\n        let $this = this;\r\n        this.TargetButton = Lure.Select(TargetButton);\r\n        this.TargetContent = Lure.Select(TargetContent);\r\n        const MT = `<div class=\"lure-tutor\">\r\n                        <div class=\"cd-caption\">\r\n                            <span>Шаг </span>\r\n                            <span class=\"lure-tutor_step\"></span>\r\n                        </div>\r\n                        <div class=\"lure-tutor_desc\"></div>\r\n                        <div class=\"lure-tutor_btns\">\r\n                            <button class=\"button btn-tutor btn-tutor-stop\">Прервать обучение</button>\r\n                            <button class=\"button btn-tutor btn-tutor-next\">Далeе →</button></div>\r\n                   </div>`;\r\n        this.Content = Lure.CreateElementFromString(MT);\r\n        this.ContentBG = Lure.CreateElementFromString('<div class=\"lure-tutor-bg dialog-wrapper\"></div>');\r\n        this.Content.style.display = 'none';\r\n        this.ContentBG.style.display = 'none';\r\n        this._Description = this.Content.querySelector('.lure-tutor_desc');\r\n        this._Step = this.Content.querySelector('.lure-tutor_step');\r\n        this._ButtonNext = this.Content.querySelector('.btn-tutor-next');\r\n        this._ButtonStop = this.Content.querySelector('.btn-tutor-stop');\r\n\r\n        $this.Data = [];\r\n        const ButtonNextText = this._ButtonNext.innerHTML;\r\n        let TutorPosition = 0;\r\n        /*get transparent*/\r\n        let temp = document.createElement('div');\r\n        temp.style.display = 'none';\r\n        document.body.appendChild(temp);\r\n        const ColorTransparent = window.getComputedStyle(temp).backgroundColor;\r\n        temp.remove();\r\n        //---\r\n        const ElemCssRestore = function () {\r\n            let Element = $this.Data[TutorPosition-1].obj;\r\n            if (Element.tagName.toLowerCase() !== 'tr')\r\n            {\r\n                Element.style.zIndex = '';\r\n                Element.style.position = '';\r\n                Element.style.outline = '';\r\n                Element.style.display = '';\r\n                Element.style.backgroundColor = '';\r\n                return;\r\n            }\r\n            let nElements = Element.querySelectorAll('th, td');\r\n            nElements.forEach(function (elem) {\r\n                elem.style.position = '';\r\n                elem.style.zIndex = '';\r\n            });\r\n        };\r\n        const ElemCssSet = function (Element) {\r\n            if (Element.tagName.toLowerCase() !== 'tr')\r\n            {\r\n                Element.style.zIndex = '11';\r\n                Element.style.position = 'relative';\r\n                Element.style.outline = '5px #bee0ff solid';\r\n                let style = window.getComputedStyle(Element);\r\n                if (style.backgroundColor === ColorTransparent)\r\n                    Element.style.backgroundColor = \"#fff\";\r\n                if (!Lure.isVisible(Element) )\r\n                {\r\n                    if (Element.tagName.toLowerCase() !== \"table\" )\r\n                        Element.style.display = 'block';\r\n                    else\r\n                        Element.style.display = 'table';\r\n                }\r\n                /* if (Element.length > 1)\r\n                 Element.eq(1).css({zIndex: '', outline: ''});*/\r\n                return;\r\n            }\r\n            let nElements = Element.querySelectorAll('th, td');\r\n            nElements.forEach(function (elem) {\r\n                elem.style.zIndex = \"11\";\r\n                elem.style.position = \"relative\";\r\n                let style = window.getComputedStyle(elem);\r\n                if (style.backgroundColor === ColorTransparent){\r\n                    elem.style.backgroundColor = \"#fff\";\r\n                }\r\n            });\r\n            /* if (Element.length > 1)\r\n             Element.eq(1).css({zIndex: '', outline: ''});*/\r\n        };\r\n        const Run = function () {\r\n            console.log(\"tutor run\");\r\n            if ($this.TargetContent === null)\r\n                return;\r\n            let Items = $this.TargetContent.querySelectorAll('*[data-tutor]:not([data-line]), *[data-tutor][data-line=\"0\"]');\r\n            if (Items.length < 1){\r\n                Lure.Confirm(\"Сообщение\", \"На этом экране нет подсказок\");\r\n                return;\r\n            }\r\n            // document.body.style.position = 'relative';\r\n\r\n            Items.forEach(function (item) {\r\n                $this.Data.push({\r\n                    obj: item,\r\n                    desc: item.dataset['tutor']\r\n                })\r\n            });\r\n            $this.Content.style.display = '';\r\n            $this.ContentBG.style.display = '';\r\n            GoStep();\r\n        };\r\n        const GoStep = function () {\r\n            //restore prev element's css\r\n            if (TutorPosition > 0)\r\n                ElemCssRestore();\r\n            if (TutorPosition === $this.Data.length)\r\n            {\r\n                Stop();\r\n                return;\r\n            }\r\n            //select next elem\r\n            let Element = $this.Data[TutorPosition].obj;\r\n            let ElementDesc = $this.Data[TutorPosition].desc;\r\n            // check for invisible parent\r\n            let ElemParent = ElementDesc.match(/{([\\s\\S]+)}/);\r\n            if (ElemParent !== null)\r\n            {\r\n                ElemParent = ElemParent[1];\r\n                ElementDesc = ElementDesc.replace(/{([\\s\\S]+)}/, '');\r\n                Element = Element.closest(ElemParent);\r\n                $this.Data[TutorPosition].obj = Element;\r\n                //Element.push( );\r\n            }\r\n            //set element visible\r\n            ElemCssSet(Element);\r\n            //write new element title and desc\r\n            $this._Step.innerHTML = (TutorPosition+1) + \"/\"+$this.Data.length;\r\n            $this._Description.innerHTML = ElementDesc;\r\n            //caption next button\r\n            if ((TutorPosition+1) === $this.Data.length)\r\n            {\r\n                $this._ButtonNext.innerHTML = 'Завершить';\r\n                $this._ButtonStop.style.opacity = '0';\r\n            }\r\n\r\n            //move tutor desc box\r\n            let posX = Element.offsetLeft + Element.clientWidth + 10;\r\n            let posY = Element.offsetTop - $this.Content.clientHeight - 10;\r\n            if (posY < 10)\r\n                posY = 10;\r\n            if ( (posX + $this.Content.clientWidth) > window.innerWidth )\r\n            {\r\n                posX = Element.offsetLeft - $this.Content.clientWidth - 10;\r\n                if (window.innerWidth < $this.Content.clientWidth + Element.clientWidth)\r\n                {\r\n                    posX = Element.offsetLeft + Element.clientWidth - $this.Content.clientWidth - 20;\r\n                }\r\n\r\n            }\r\n            if (document.documentElement.scrollTop  > posY || document.documentElement.scrollTop + window.innerHeight < Element.offsetTop + Element.offsetHeight)\r\n            {\r\n                //$('html, body').animate({scrollTop: posY - 10}, 300);\r\n                document.documentElement.scrollTop =  (posY - 10)  +'px';\r\n            }\r\n            if (posX < 10)\r\n                posX = 10;\r\n            $this.Content.style.left = posX +'px';\r\n            $this.Content.style.top = posY +'px';\r\n\r\n            TutorPosition++;\r\n        };\r\n        const Stop = function () {\r\n            //     document.body.style.position = '';\r\n            ElemCssRestore();\r\n            $this.Content.style.display = 'none';\r\n            $this.ContentBG.style.display = 'none';\r\n            $this._ButtonNext.innerHTML = ButtonNextText;\r\n            $this._ButtonStop.style.opacity = '';\r\n            TutorPosition = 0;\r\n            $this.Data = [];\r\n        };\r\n        //### CONSTRUCT\r\n\r\n        this.TargetButton.onclick = Run;\r\n        this._ButtonNext.onclick = GoStep;\r\n        this._ButtonStop.onclick = Stop;\r\n\r\n        document.body.appendChild(this.Content);\r\n        document.body.appendChild(this.ContentBG);\r\n\r\n        //### METHODS\r\n        this.Run = Run;\r\n\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nLure.Plugin.Load = class MonsieurLoading{\r\n    constructor(\r\n        {\r\n            Target = 'body'\r\n        } = {}\r\n    ){\r\n        this.Target = Lure.Select(Target);\r\n        this.Target.style.position = 'relative';\r\n        this.Content = Lure.CreateElementFromString(`<div class=\"ajax-loading\" style=\"display: none\"></div>`);\r\n        let cx = 60; //diameter\r\n        let cy = 60;\r\n        let _DoArc = function(radius, maxAngle){\r\n            let d = \" M \"+ (cx + radius) + \" \" + cy;\r\n            for (let angle = 0; angle < maxAngle; angle++)\r\n            {\r\n                let rad = angle * (Math.PI / 180);  //deg to rad\r\n                let x = cx + Math.cos(rad) * radius;\r\n                let y = cy + Math.sin(rad) * radius;\r\n                d += \" L \"+x + \" \" + y;\r\n            }\r\n            return d;\r\n        };\r\n        let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\">\r\n                     <path d=\"${_DoArc(45, 160)}\" class=\"lure-arc1\" fill=\"none\" stroke=\"#449b22\" stroke-width=\"5\"></path>\r\n                     <path d=\"${_DoArc(40, 130)}\" class=\"lure-arc2\" fill=\"none\" stroke=\"#61c8de\" stroke-width=\"5\"></path>\r\n                     <path d=\"${_DoArc(35, 100)}\" class=\"lure-arc3\" fill=\"none\" stroke=\"#761c19\" stroke-width=\"5\"></path>\r\n                     <path d=\"${_DoArc(30, 70)}\"  class=\"lure-arc4\" fill=\"none\" stroke=\"#333333\" stroke-width=\"5\"></path>\r\n                   </svg>`;\r\n        this.Target.appendChild(this.Content);\r\n        this.Content.innerHTML = svg;\r\n        this.Timeout = null;\r\n    }\r\n    Show(){\r\n        let $this = this;\r\n        this.Content.style.display = '';\r\n        clearTimeout(this.TimeoutHide);\r\n        this.Timeout = setTimeout(function(){\r\n            $this.Content.style.display = 'block';\r\n        }, 70);\r\n    }\r\n    Hide(){\r\n        let $this = this;\r\n        clearTimeout(this.Timeout);\r\n        this.TimeoutHide = setTimeout(function(){\r\n            $this.Content.style.display = 'none';\r\n        }, 250); //hide may be called in same time as the show()\r\n    }\r\n};\r\n\r\nLure.Plugin.Tooltip = class MonsieurTooltip{\r\n    constructor({\r\n                    Target    = document,           //Target-listener (global document by default)\r\n                    Attribute = \"data-tooltip\",     // data-tooltip=\"Help text here\"\r\n                    Delay     = 400,                //delay before tooltip show\r\n                    Time      = 1100,               //showing time\r\n                    Cursor    = \"help\",             //item:hover cursor\r\n                    Custom    = `<div class=\"lure-tooltip\">`,               //custom html of tooltip\r\n                    AfterBuild = function(){}\r\n\r\n                })\r\n    {\r\n        let $this = this;\r\n        this.ToolTip = Lure.CreateElementFromString(Custom);\r\n        let Timer = null;\r\n        let Destr = null;\r\n        this.Target = Lure.Select(Target);\r\n        const Show = function (text){\r\n            this.ToolTip.innerHTML = text;\r\n            $this.Target.appendChild(this.ToolTip);\r\n\r\n        }.bind(this);\r\n        Lure.AddEventListenerGlobal('mouseover', `[${Attribute}]`, function (e) {\r\n            let text = e.currentTarget.dataset[Attribute.replace('data-', '')];\r\n            clearTimeout(Destr);\r\n            Timer = setTimeout(function(){\r\n                Show(text);\r\n            }, Delay);\r\n        }, this.Target);\r\n        Lure.AddEventListenerGlobal('mouseout', `[${Attribute}]`, function (e) {\r\n            clearTimeout(Timer);\r\n            Destr = setTimeout(function () {\r\n                //$this.ToolTip.remove();\r\n            }, Time)\r\n        }, this.Target);\r\n        setTimeout(function () {\r\n            AfterBuild.bind($this);\r\n        }, 0)\r\n    }\r\n\r\n};\r\n\r\n\r\n\r\nLure.Tutor = Lure.Plugin.Tutor;\r\nLure.Load = Lure.Plugin.Load;\r\nLure.Tooltip = Lure.Plugin.Tooltip;\r\n\r\n\r\n","Lure.Plugin.Chart = {\r\n    Core: '',\r\n    Chart: class LureChart{\r\n        constructor(\r\n            Target = null,      //where render chart\r\n            {\r\n                Type = 'Line',  //Line Bar Pie\r\n                Title = '',\r\n                Labels = {\r\n                    Rotation: 'auto',\r\n                    Data: []\r\n                },\r\n                Series = [\r\n                    {Data: [], Type: '', OwnAxis: false, Color: '#eee'},\r\n                    {Data: [], Type: '', OwnAxis: [0, 100], Color: '#eee'},\r\n                ],\r\n                Tooltip = {\r\n                    Template: 'Name: {{Name}}<br>Value: {{Value}}',\r\n                },\r\n                AxisY = {\r\n                    Scale: ['auto', 'auto', 'auto'],\r\n                    Visible: true,\r\n                },\r\n                Height = 400,\r\n                SeriesOptions = {},\r\n            }={},\r\n        ){\r\n            /// <DEFAULTS>\r\n            //const Colors = ['red', 'green', 'blue'];\r\n            const ColorsDefault = ['red', 'green', 'cornflowerblue', 'purple', 'palevioletred', 'orange'];\r\n            //const DefaultPoint = {\r\n            //    Visible: true,\r\n            //    Radius: 4\r\n            //};\r\n            /// </DEFAULTS>\r\n            ///\r\n            let chart = this;\r\n            this.Content = Lure.Select(Target);\r\n            this.Content.classList.add('mt-chart'); // mt\r\n            this.Content.style.position = 'relative';\r\n\r\n            this.isGraph = true;//(Series.filter(x=>x.Type?x.Type.toLowerCase():x.Type === 'line' || x.Type?x.Type.toLowerCase():x.Type === 'bar')).length === Series.length;\r\n\r\n            let Buffer = {\r\n                Legend: '',\r\n                AxisX: '',\r\n                AxisY: '',\r\n                Grid: '',\r\n                Svg: '',\r\n\r\n\r\n\r\n                Height: 0,\r\n                Width: 0,\r\n                Abscissa: null,\r\n                SeriesPoints: [],\r\n\r\n                ParametersAxisX: null,\r\n\r\n            };\r\n\r\n            this._Series = Series;\r\n            //define Series\r\n            this.__InitSeries = function (){\r\n                let Se = [];\r\n\r\n                for (let i = 0; i < this._Series.length; i++){\r\n                    let ep = {};\r\n                    ep.Name    = this._Series[i].Name ? this._Series[i].Name                : 'Unnamed';\r\n                    ep.Data    = this._Series[i].Data;\r\n                    ep.OwnAxis = this._Series[i].OwnAxis;\r\n                    ep.Title   = this._Series[i].Title? this._Series[i].Title               : ep.Name;\r\n                    ep.Type    = this._Series[i].Type ? this._Series[i].Type.toLowerCase()  : (Type?Type.toLowerCase():'line');\r\n                    ep.Color   = this._Series[i].Color? this._Series[i].Color: ColorsDefault[i]?ColorsDefault[i]:'#000';\r\n                    ep.Width   = this._Series[i].Width? this._Series[i].Width               : 2;\r\n\r\n                    ep.Point   = Series[i].Point;\r\n                    ep.Point   = Lure.Chart.GetSeriePointOptions(ep);\r\n\r\n                    Buffer.Legend += Lure.Chart.MakeLegend(ep, i);\r\n                    Se.push(ep)\r\n                }\r\n                return Se;\r\n            }.bind(this);\r\n\r\n            this.Options = {\r\n                //Type: Type? Type.toLowerCase(): 'line',\r\n                Title: Title? Title: '',\r\n                Labels: {\r\n                    Visible: (typeof Labels.Visible === 'undefined' || Labels.Visible),\r\n                    Rotation: Labels.Rotation? Labels.Rotation: 'auto',\r\n                    Data: Labels.Data? Labels.Data: [],\r\n                },\r\n                Series: this.__InitSeries(),\r\n                SeriesOptions: {\r\n                    BarStack: false,\r\n                    BarGradient: true\r\n                },\r\n                AxisY: {\r\n                    Scale: AxisY.Scale? ([Lure.isNumeric(AxisY.Scale[0])? AxisY.Scale[0]:'auto', Lure.isNumeric(AxisY.Scale[1])? AxisY.Scale[1]:'auto', Lure.isNumeric(AxisY.Scale[2])? AxisY.Scale[2]:'auto']):['auto', 'auto', 'auto'],\r\n                    Visible: (typeof AxisY.Visible === 'undefined' || AxisY.Visible)\r\n                },\r\n                Tooltip: {\r\n                    Template: Tooltip.Template?Tooltip.Template : 'Name: {{Name}}<br>Value: {{Value}}'\r\n                }\r\n            };\r\n            this.Block = (function () {\r\n                this.Content.innerHTML = `<div class=\"mt-chart col\">\r\n                                        <div class=\"mt-chart-caption\">\r\n                                          <div class='mt-chart-title'>${Title}</div>\r\n                                          <div class=\"mt-chart-legend row\"></div>\r\n                                        </div>\r\n                                        <div class=\"mt-chart-kek row flex-100\">\r\n                                          <div class=\"mt-chart-y row\"></div>\r\n                                          <div class=\"col flex-100\">\r\n                                            <div class=\"mt-chart-area row flex-100\">\r\n                                              <svg class=\"mt-chart-svg\"></svg>\r\n                                              <div class=\"mt-chart-grid\" style=\" position: absolute;\"></div>\r\n                                            </div>\r\n                                            <div class=\"mt-chart-x row\"></div>\r\n                                           </div>\r\n                                        </div>\r\n                                      </div>`;\r\n                const _Legend     = this.Content.querySelector('.mt-chart-legend');\r\n                const _AxisX      = this.Content.querySelector('.mt-chart-x');\r\n                const _AxisY      = this.Content.querySelector('.mt-chart-y');\r\n                const _ChartArea  = this.Content.querySelector('.mt-chart-area');\r\n                const _Grid       = this.Content.querySelector('.mt-chart-grid');\r\n                const _Svg        = this.Content.querySelector('.mt-chart-svg');\r\n                return {\r\n                    get Legend(){\r\n                        return _Legend;\r\n                    },\r\n                    set Legend(v){\r\n                        _Legend.innerHTML = v;\r\n                    },\r\n                    get AxisX(){\r\n                        return _AxisX;\r\n                    },\r\n                    set AxisX(v){\r\n                        _AxisX.innerHTML = v;\r\n                    },\r\n                    get AxisY(){\r\n                        return _AxisY;\r\n                    },\r\n                    set AxisY(v){\r\n                        _AxisY.innerHTML = v;\r\n                    },\r\n                    get ChartArea(){\r\n                        return _ChartArea;\r\n                    },\r\n                    set ChartArea(v){\r\n                        _ChartArea.innerHTML = v;\r\n                    },\r\n                    get Grid(){\r\n                        return _Grid;\r\n                    },\r\n                    set Grid(v){\r\n                        _Grid.innerHTML = v;\r\n                    },\r\n                    get Svg(){\r\n                        return _Svg;\r\n                    },\r\n                    set Svg(v){\r\n                        _Svg.innerHTML = v;\r\n                    },\r\n                }\r\n            }.bind(this))();\r\n\r\n            /********************************************************************************/\r\n            const Builders = {\r\n                /**\r\n                 *\r\n                 * @param Serie\r\n                 * @param i\r\n                 * @returns {string}\r\n                 * @constructor\r\n                 */\r\n                MakeLegend(Serie, i){\r\n                    return `<div class=\"mt-chart-legend__item row\">\r\n                          <input class=\"mt-legend-checkbox\" type=\"checkbox\" checked=\"checked\" id=\"legcheck${Serie.Name}${i}\">\r\n                          <div class=\"mt-legend-icon\" style=\"background-color: ${Serie.Color}\"></div>\r\n                          <label class=\"mt-legend-label\" for=\"legcheck${Serie.Name}${i}\">${Serie.Name}</label>\r\n                        </div>`;\r\n                },\r\n                /**\r\n                 *\r\n                 * @param scale\r\n                 * @param i\r\n                 * @param name\r\n                 * @param color\r\n                 * @returns {*}\r\n                 * @constructor\r\n                 */\r\n                MakeAxisY(){\r\n                    /*if (!scale)\r\n                     return '';\r\n                     let caption = '';\r\n                     if (i>0)\r\n                     caption = `<div class=\"mt-chart-axis-caption\"><div style=\"transform: rotate(-90deg)\">${name}</div></div>`;\r\n                     let a = '';\r\n                     for (let j = 0; j< scale.length; j++){\r\n                     a += `<div class=\"mt-chart-label mt-chart-label__y\"><span>${scale[j]}</span></div>`;\r\n                     }\r\n                     return `<div class=\"mt-chart-axis__y row\" ${(i>0)? ('style=\"color: '+color+'; font-weight: bold;\"'):''} data-line=\"${i}\">${caption}<div class=\"mt-chart-labels col\">${a}</div></div>`;*/\r\n                    let i = 0;\r\n                    if (!chart.Options.AxisY.Visible){\r\n                        i = 1;\r\n                        if (chart._ScaleY.Scales.length < 2)\r\n                            return '';\r\n                    }\r\n                    let accum = '';\r\n                    for (i; i <chart._ScaleY.Scales.length; i++){\r\n                        let index = chart._ScaleY.Dict.indexOf(i);//.filter(x=>x===i && x !==0)[0];\r\n                        let scale = chart._ScaleY.Scales[i];\r\n                        let caption = '';\r\n                        //let a = '';\r\n                        if (i>0)\r\n                            caption = `<div class=\"mt-chart-axis-caption\"><div style=\"transform: rotate(-90deg)\">${chart.Options.Series[index].Title}</div></div>`;\r\n                        let a = '';\r\n                        for (let j = 0; j< scale.length; j++){\r\n                            a += `<div class=\"mt-chart-label mt-chart-label__y\"><span>${scale[j]}</span></div>`;\r\n                        }\r\n                        accum += `<div class=\"mt-chart-axis__y row\" ${(i>0)? ('style=\"color: '+chart.Options.Series[index].Color+'; font-weight: bold;\"'):''} data-line=\"${i}\">${caption}<div class=\"mt-chart-labels col\">${a}</div></div>`;\r\n\r\n                    }\r\n                    return accum;\r\n                },\r\n                MakeAxisX(){\r\n                    if (!chart.Options.Labels.Visible)\r\n                        return '';\r\n                    let labels = chart.Options.Labels.Data;\r\n\r\n                    const style = `transform: rotate(${Buffer.ParametersAxisX.Angle}deg); margin-top: ${Buffer.ParametersAxisX.MarginTop}px; width: ${Buffer.ParametersAxisX.Width}px; margin-left: ${Buffer.ParametersAxisX.MarginLeft}px;`;\r\n                    let a = '';\r\n                    for (let i = 0 ; i < labels.length; i++){\r\n                        a += `<div class=\"mt-chart-label mt-chart-label__x\"><span style=\"${style}\">${labels[i]}</span></div>`\r\n                    }\r\n                    //console.log(`AxisX forecastHeight: ${Math.round(h/4+ (Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))))}`);\r\n                    return a;\r\n                },\r\n                MakeGrid(a,b){\r\n                    return Lure.Chart.GetGrid(a,b);\r\n                },\r\n                MakeGraph(serie, i){\r\n                    let index = chart._ScaleY.Dict[i];\r\n                    let scale = chart._ScaleY.Scales[index];\r\n                    let mm = chart._ScaleY.MinMax[index];\r\n                    let DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\r\n                    let DataAbscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, chart.Width);\r\n                    let points = Lure.Chart.GetPoints(DataAbscissa, DataOrdinata);\r\n                    return Lure.Chart.GetPath(points, chart.Options.Series[i].Type, i, chart.Options.Series[i].Color, chart.Options.Series[i].Width);\r\n                },\r\n                CalcAxisX(){\r\n                    let c = Lure.CreateElementFromString(`<div class=\"mt-chart-label mt-chart-label__x\"><span>${chart.Options.Labels.Data[0]}</span></div>`);\r\n                    let size = Lure.GetInlineSize(c, getComputedStyle(c.querySelector('span')).fontSize);\r\n                    let w = chart.Width/chart.Options.Labels.Data.length;\r\n                    let h = size.height;\r\n                    let wFact = size.width;\r\n                    let angle;\r\n                    if (chart.Options.Labels.Rotation !== 'auto'){\r\n                        angle = parseFloat(chart.Options.Labels.Rotation);\r\n                    }\r\n                    else{\r\n                        let cos = (w-h)/(wFact+h);\r\n                        if (cos < 0.1)\r\n                            cos = 0;\r\n                        if (cos > 1)\r\n                            cos = 1;\r\n                        angle = (-90*(1-cos));\r\n                    }\r\n                    return {\r\n                        Height: Math.round(h/4+ (Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2)))),\r\n                        Width: wFact,\r\n                        MarginTop:  (wFact>w)? ((Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))) - h) : 0,\r\n                        MarginLeft: (wFact>w)? (-w/2):(-wFact/2),\r\n                        Angle: angle,\r\n                    }\r\n\r\n                }\r\n            };\r\n            /**\r\n             *\r\n             * @returns {string}\r\n             * @constructor\r\n             */\r\n            function Builder(){\r\n                let Legend = '';\r\n                let AxeY = '';\r\n                let AxeX = '';\r\n                let Grid = '';\r\n                let Svg = '';\r\n\r\n                const isGraph = (chart.Options.Series.filter(x=>x.Type === 'pie')).length !== chart.Options.Series.length;\r\n                console.log('isGraph',isGraph);\r\n                let PathBuilder;\r\n                if (isGraph)\r\n                    PathBuilder = Builders.MakeGraph;\r\n\r\n                for (let i = 0; i < chart.Options.Series.length; i++){\r\n                    Legend += Builders.MakeLegend(chart.Options.Series[i], i);\r\n                    AxeY += Builders.MakeAxisY(chart._ScaleY.Scales[i], i, chart.Options.Series[chart._ScaleY.Dict[i]].Title? chart.Options.Series[chart._ScaleY.Dict[i]].Title:chart.Options.Series[chart._ScaleY.Dict[i]].Name, chart.Options.Series[chart._ScaleY.Dict[i]].Color);\r\n                    Svg += PathBuilder(chart.Options.Series[i], i);\r\n                }\r\n                Legend = `<div class=\"mt-chart-legend row\">${Legend}</div>`;\r\n                AxeY = `<div class=\"mt-chart-y row\">${AxeY}</div>`;\r\n                AxeX = Builders.MakeAxisX();\r\n                Grid = Builders.MakeGrid(chart.Options.Labels.Data.length, chart._ScaleY.Scales[0].length-1);\r\n                chart.Content.innerHTML= `<div class=\"mt-chart col\">\r\n                        <div class=\"mt-chart-caption\">\r\n                          <div class='mt-chart-title'>${Title}</div>\r\n                          <div class=\"mt-chart-legend row\">${Legend}</div>\r\n                        </div>\r\n                        <div class=\"mt-chart-kek row flex-100\">\r\n                          <div class=\"mt-chart-y row\">${AxeY}</div>\r\n                          <div class=\"col flex-100\">\r\n                            <div class=\"mt-chart-area row flex-100\">\r\n                              <svg class=\"mt-chart-svg\">${Svg}</svg>\r\n                              <div class=\"mt-chart-grid\" style=\" position: absolute;\">${Grid}</div>\r\n                            </div>\r\n                            <div class=\"mt-chart-x row\">${AxeX}</div>\r\n                           </div>\r\n                        </div>\r\n                      </div>`\r\n            }\r\n\r\n            this.__GetPath = function(serie, line){\r\n                //debugger;\r\n                switch (serie.Type){\r\n                    case 'line':\r\n                        return this.__GetPathLine(serie, line);\r\n                    case 'bar':\r\n                        return this.__GetPathBar(serie, line);\r\n                    case 'pie':\r\n                        return '';\r\n                }\r\n            }.bind(this);\r\n            this.__GetPathLine = function (serie, line) {\r\n                if (!Buffer.Abscissa || Buffer.Width !== this.Width)\r\n                    Buffer.Abscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, this.Width);\r\n                let index = this._ScaleY.Dict[line];\r\n                let scale = this._ScaleY.Scales[index];\r\n                let mm = chart._ScaleY.MinMax[index];\r\n                //debugger;\r\n                let DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\r\n                let points = Lure.Chart.GetPoints(Buffer.Abscissa, DataOrdinata);\r\n                Buffer.SeriesPoints[line] = points;\r\n\r\n                const n = points.length;\r\n\r\n                let xs = [];        //x\r\n                let ys = [];        //y\r\n                let dys = [];       //dx\r\n                let dxs = [];       //dy\r\n                let ds = [];        //derivative\r\n                let ms = [];        //desired slope (m) at each point using Fritsch-Carlson method\r\n                for(let i = 0; i < n; i++) {\r\n                    xs[i] = points[i][0];\r\n                    ys[i] = points[i][1];\r\n                }\r\n                // Calculate deltas and derivative\r\n                for(let i = 0; i < n - 1; i++) {\r\n                    dys[i] = ys[i + 1] - ys[i];\r\n                    dxs[i] = xs[i + 1] - xs[i];\r\n                    ds[i] = dys[i] / dxs[i];\r\n                }\r\n                // Determine desired slope (m) at each point using Fritsch-Carlson method\r\n                // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\r\n                ms[0] = ds[0];\r\n                ms[n - 1] = ds[n - 2];\r\n                for(let i = 1; i < n - 1; i++) {\r\n                    if(ds[i] === 0 || ds[i - 1] === 0 || (ds[i - 1] > 0) !== (ds[i] > 0)) {\r\n                        ms[i] = 0;\r\n                    } else {\r\n                        ms[i] = 3 * (dxs[i - 1] + dxs[i]) / (\r\n                            (2 * dxs[i] + dxs[i - 1]) / ds[i - 1] +\r\n                            (dxs[i] + 2 * dxs[i - 1]) / ds[i]);\r\n                        if(!isFinite(ms[i])) {\r\n                            ms[i] = 0;\r\n                        }\r\n                    }\r\n                }\r\n                let d = `M ${xs[0]},${ys[0]}`;\r\n                let dots = '<g class=\"mt-chart-dots\">';\r\n                for(let i = 0; i < n - 1; i++) {\r\n                    d += ` C ${xs[i] + dxs[i] / 3},${ys[i] + ms[i] * dxs[i] / 3} ${xs[i + 1] - dxs[i] / 3},${ys[i + 1] - ms[i + 1] * dxs[i] / 3} ${xs[i + 1]},${ys[i + 1]}`;\r\n                    if (serie.Point.Visible)\r\n                        dots += Lure.Chart.GetPathLineDot(xs[i] , ys[i], line, i, serie.Color, serie.Point.Radius );\r\n                }\r\n                if (serie.Point.Visible)\r\n                    dots += Lure.Chart.GetPathLineDot(xs[n-1] , ys[n-1], line, n-1, serie.Color, serie.Point.Radius );\r\n                dots += '</g>';\r\n                return `<g class=\"mt-chart-serie\"><path data-line=\"${line}\" d=\"${d}\" fill=\"none\" stroke=\"${serie.Color}\" stroke-width=\"${serie.Width}\"></path> ${dots}</g>`;\r\n\r\n            }.bind(this);\r\n            this.__GetPathBar = function (serie, line) {\r\n                if (!Buffer.Abscissa || Buffer.Width !== this.Width)\r\n                    Buffer.Abscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, this.Width);\r\n                let index = this._ScaleY.Dict[line];\r\n                let scale = this._ScaleY.Scales[index];\r\n                let mm = chart._ScaleY.MinMax[index];\r\n                //debugger;\r\n                let DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\r\n                let points = Lure.Chart.GetPoints(Buffer.Abscissa, DataOrdinata);\r\n                Buffer.SeriesPoints[line] = points;\r\n                let height = this.Height;\r\n                let wd = serie.Width;\r\n\r\n\r\n                let bricks = '<g class=\"mt-chart-serie\" data-type=\"Bar\">';\r\n                let GradientId = '';\r\n                if (this.Options.SeriesOptions.BarGradient){\r\n                    GradientId = 'bar_' + Math.random().toString(36).replace(\"0.\", '');\r\n                    bricks += `<linearGradient id=\"${GradientId}\"  x1=\"0\" y1=\"0%\"><stop offset=\"0%\" stop-color=\"rgba(0,0,0,0.2)\"/><stop offset=\"33%\" stop-color=\"rgba(255,255,255,0.2)\"/><stop offset=\"100%\" stop-color=\"rgba(0,0,0,0.3)\"/></linearGradient>`;\r\n                }\r\n                // let d = `M ${points[0][0]}  ${points[0][1]}`;\r\n\r\n                let dots = '';\r\n                for (let i = 0; i < points.length; i++){\r\n                    let d =`M ${points[i][0]-wd/2} ${height} L ${(points[i][0]+wd/2)} ${height} ${(points[i][0]+wd/2)} ${points[i][1]} ${points[i][0]-wd/2} ${points[i][1]}Z`;\r\n                    // debugger;\r\n                    bricks += `<path class=\"mt-chart-tooltipable\" data-line=\"${line}\" data-item=\"${i}\" d=\"${d}\" fill=\"${serie.Color}\" stroke=\"#000\" stroke-width=\"0\"></path>`;\r\n                    if (this.Options.SeriesOptions.BarGradient)\r\n                        bricks += `<path class=\"mt-chart-tooltipable\"  data-line=\"${line}\" data-item=\"${i}\" d=\"${d}\" fill=\"url(#${GradientId})\" ></path>`;\r\n                    //dots += Lure.Chart.GetPathLineDot(points[i][0] , points[i][1], line, i, serie.Color, serie.Point.Radius );\r\n                }\r\n                bricks += dots+'</g>';\r\n                return bricks;\r\n            }.bind(this);\r\n\r\n\r\n            (function Init(){\r\n                /* let Legend = '';\r\n                 for (let i = 0; i < this.Options.Series.length; i++){\r\n                 Legend += Lure.Chart.MakeLegend(this.Options.Series[i], i);\r\n                 }*/\r\n                this.Block.Legend = Buffer.Legend;\r\n                Buffer.ParametersAxisX = Builders.CalcAxisX();\r\n                console.log('this.Height-Buffer.ParametersAxisX.Height',this.Height,Buffer.ParametersAxisX.Height);\r\n                this._ScaleY = Lure.Chart.GetScaleY(this.Options.Series, (this.Height-Buffer.ParametersAxisX.Height), this);\r\n\r\n                this.Block.AxisX = Builders.MakeAxisX();\r\n                this.Block.Grid  = Lure.Chart.GetGrid(this.Options.Labels.Data.length, this._ScaleY.Scales[0].length-1);\r\n\r\n                const isGraph = this.isGraph;\r\n                console.log('isGraph',isGraph);\r\n                let PathBuilder;\r\n                if (isGraph)\r\n                    PathBuilder = Builders.MakeGraph;\r\n                let AxeY = '';\r\n                //let Svg = '';\r\n                let SvgBar = '';\r\n                let SvgLine = '';\r\n\r\n                /*\r\n                 for (let i = 0; i < chart._ScaleY.Scales.length; i++){\r\n                 let index = this._ScaleY.Dict[i];\r\n                 //debugger;\r\n                 AxeY += Builders.MakeAxisY(chart._ScaleY.Scales[index], i, chart.Options.Series[i].Title, chart.Options.Series[i].Color);\r\n                 }*/\r\n                AxeY = Builders.MakeAxisY();\r\n                this.Block.AxisY = AxeY;\r\n                for (let i = 0; i < chart.Options.Series.length; i++){\r\n\r\n                    //AxeY += Builders.MakeAxisY(chart._ScaleY.Scales[i], i, chart.Options.Series[chart._ScaleY.Dict[i]].Title? chart.Options.Series[chart._ScaleY.Dict[i]].Title:chart.Options.Series[chart._ScaleY.Dict[i]].Name, chart.Options.Series[chart._ScaleY.Dict[i]].Color);\r\n                    //Svg += PathBuilder(chart.Options.Series[i], i);\r\n                    switch (chart.Options.Series[i].Type){\r\n                        case 'line':\r\n                            SvgLine += this.__GetPathLine(chart.Options.Series[i], i);\r\n                            break;\r\n                        case 'bar':\r\n                            SvgBar += this.__GetPathBar(chart.Options.Series[i], i);\r\n                            break;\r\n                    }\r\n                    //Svg += this.__GetPath(chart.Options.Series[i], i);\r\n                    // this.__GetPath(chart.Options.Series[i], i)\r\n                }\r\n\r\n\r\n                this.Block.Svg   = SvgBar+SvgLine;\r\n\r\n\r\n\r\n                this.Block.AxisY.style.height = this.Height+'px';\r\n\r\n\r\n                //console.log(`AxisX FactHeight: ${this.Block.AxisX.clientHeight}`);\r\n                // this.Block.AxisX.style.height = this.BuidlerData.AxisXOptions.Height+'px';\r\n\r\n            }.bind(this))();\r\n            /********************************************************************************/\r\n            /*******/\r\n\r\n\r\n\r\n            /*<tooltips>*/\r\n            this.Tooltip = new Lure.Content({\r\n                Name: 'Tooltipchek',\r\n                Target: this.Block.ChartArea,\r\n                Content: `<div class=\"mt-chart-tooltip\">\r\n                        <div class=\"val\">${this.Options.Tooltip.Template}</div>\r\n                      </div>`,\r\n                Visible: false,\r\n                Controller: {\r\n                    Data: {},\r\n                },\r\n                BeforeShow: function (a,b) {\r\n\r\n                },\r\n                Prop: function () {\r\n                    this._Timer = null;\r\n                    this._Timer2 = null;\r\n                },\r\n                Shower: function () {\r\n                    clearTimeout(this._Timer);\r\n                    clearTimeout(this._Timer2);\r\n                    this.Content.style.display = '';\r\n                    this.Content.style.opacity = '1';\r\n                },\r\n                Hider: function () {\r\n                    clearTimeout(this._Timer);\r\n                    this._Timer = setTimeout(\r\n                        function () {\r\n                            this.Content.style.opacity = '0';\r\n                            this._Timer2 = setTimeout(function () {\r\n                                this.Content.style.display = 'none';\r\n                            }.bind(this), 200)\r\n\r\n                        }.bind(this), 500);\r\n                },\r\n                Show: function (options) {\r\n                    clearTimeout(this._Timer);\r\n                    this.Data.Name = options.data[0];\r\n                    this.Data.Value = options.data[1];\r\n                    this.Refresh();\r\n                    this.Content.style.left = (options.pos[0] + 7)+\"px\";\r\n                    this.Content.style.top = (options.pos[1] - this.Content.clientHeight - 7)+\"px\";\r\n                    this.Content.style.backgroundColor = options.color;\r\n                    //this._Timer = setTimeout(this.Hide, 2000);\r\n                },\r\n                Methods: function () {\r\n                    this.Do = function (e) {\r\n                        let tag = e.currentTarget.tagName.toLowerCase();\r\n                        switch (tag){\r\n                            case 'circle':\r\n                                this.DoCircle(e);\r\n                                break;\r\n                            case 'path':\r\n                                this.DoBar(e);\r\n                                break;\r\n\r\n                        }\r\n\r\n\r\n                    }.bind(this);\r\n                    this.DoCircle = function (e) {\r\n                        let circle = e.currentTarget;\r\n                        let i = parseInt(circle.dataset['line']);\r\n                        let j = parseInt(circle.dataset['item']);\r\n                        let color = circle.attributes['stroke'].value;\r\n                        //console.log(` parseInt(circle.attributes['r'].value`,  parseInt(circle.attributes['r'].value) );\r\n                        let width = parseInt(circle.attributes['stroke-width'].value);\r\n                        circle.attributes['fill'].value = color;\r\n                        circle.attributes['r'].value = parseInt(circle.attributes['r'].value) + width;\r\n                        circle.attributes['stroke'].value = \"#fff\";\r\n\r\n\r\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\r\n                        let o = {\r\n                            data: [Series[i].Name, Series[i].Data[j]],\r\n                            color: color,\r\n                            pos: Buffer.SeriesPoints[i][j]  //[e.offsetX, e.offsetY]\r\n                        };\r\n                        this.Show(o);\r\n                    }.bind(this);\r\n                    this.DoBar = function (e) {\r\n                        let bar = e.currentTarget;\r\n                        let i = parseInt(bar.dataset['line']);\r\n                        let j = parseInt(bar.dataset['item']);\r\n\r\n                        // bar.attributes['stroke-width'].value = 2;\r\n\r\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\r\n\r\n                        let o = {\r\n                            data: [chart.Options.Series[i].Name, chart.Options.Series[i].Data[j]],\r\n                            color: chart.Options.Series[i].Color,\r\n                            pos: Buffer.SeriesPoints[i][j]  //[e.offsetX, e.offsetY]\r\n                        };\r\n                        this.Show(o);\r\n                    }.bind(this);\r\n\r\n                },\r\n                AfterBuild: function () {\r\n\r\n                }\r\n            });\r\n            Lure.AddEventListenerGlobal('mouseover', '.mt-chart-point, .mt-chart-tooltipable', function (e) {\r\n                this.Tooltip.Do(e);\r\n            }, this.Content, this);\r\n            Lure.AddEventListenerGlobal('mouseout', '.mt-chart-point', function (e) {\r\n                //console.log(e.currentTarget.dataset['tooltip']);\r\n                let circle = e.currentTarget;\r\n                let width = parseInt(circle.attributes['stroke-width'].value);\r\n                circle.attributes['stroke'].value = circle.attributes['fill'].value;\r\n                circle.attributes['fill'].value = \"#fff\";\r\n                circle.attributes['r'].value -= width;\r\n                chart.Tooltip.Hide();\r\n            }, this.Content);\r\n            /*</tooltips>*/\r\n\r\n            const getSuperdata = function () {\r\n                let superdata = [];\r\n                for (let i =0; i< Series.length; i++){\r\n                    let index = this._ScaleY.Dict[i];\r\n                    let scale = this._ScaleY.Scales[index];\r\n                    let mm = this._ScaleY.MinMax[index];\r\n                    let DataOrdinata = Lure.Chart.GetOrdinata(Series[i].Data, scale, mm, this.Block.Svg.Height);\r\n                    this._Abscissa = Lure.Chart.GetAbscissa(Labels.Data, this.Block.Svg.Width);\r\n                    let points = Lure.Chart.GetPoints(this._Abscissa, DataOrdinata);\r\n                    let h = 0;//\r\n                    superdata[i] = {\r\n                        h: this.Block.Svg.Height,\r\n                        Name: chart.Options.Series[i].Name,\r\n                        Data: chart.Options.Series[i].Data,\r\n                        DataPoints: points,\r\n                        Color: chart.Options.Series[i].Color,\r\n                        Path: Lure.Chart.GetPath(points, chart.Options.Series[i].Type, i, chart.Options.Series[i].Color, chart.Options.Series[i].Width),\r\n                        Width: chart.Options.Width,\r\n                        options:{\r\n                            pointSize: Series[i].Width? 4+Series[i].Width/4: 4\r\n                        }\r\n                    }\r\n                }\r\n                chart.SuperData = superdata;\r\n                return superdata;\r\n            }.bind(this);\r\n\r\n            this.TestB = function () {\r\n                let per = performance.now();\r\n                Builder();\r\n                Lure.Perf(per, 'builder');\r\n            };\r\n            this.Refresh = function () {\r\n\r\n\r\n            }.bind(this);\r\n            this.Refresh();\r\n            setTimeout(function(){\r\n\r\n            }.bind(this), 0);\r\n\r\n            this.Buffer = Buffer;\r\n        }\r\n        get Height(){\r\n            //return this.__svg.clientHeight;\r\n            return this.Block.Svg.clientHeight;\r\n        }\r\n        get Width(){\r\n            return this.Block.Svg.clientWidth;\r\n            //return this.__svg.clientWidth;\r\n        }\r\n\r\n\r\n\r\n        /*statics*/\r\n        static GetSeriePointOptions(serie, isGraph){\r\n            let p = serie.Point ? serie.Point : {};\r\n            p.Visible = (typeof p.Visible === 'undefined' || p.Visible);\r\n            p.Radius = p.Radius? p.Radius : (4+serie.Width/4);\r\n            if (Number.isNaN(p.Radius))\r\n                debugger;\r\n            return p;\r\n        }\r\n\r\n        static GetScaleY(series, height, ctx){\r\n            if (ctx.Type === 'pie'){\r\n                return [];\r\n            }\r\n            let min = series[0].Data[0];\r\n            let max = series[0].Data[0];\r\n            let isAutoScale = true;\r\n            let isAutoStep = true;\r\n            if (ctx.Options.AxisY.Scale[0] !== 'auto' && ctx.Options.AxisY.Scale[1] !== 'auto')\r\n            {\r\n                isAutoScale = false;\r\n                min = ctx.Options.AxisY.Scale[0];\r\n                max = ctx.Options.AxisY.Scale[1];\r\n            }\r\n            if (ctx.Options.AxisY.Scale[2] !== 'auto')\r\n                isAutoStep = false;\r\n            let mm = [ [series[0].Data[0],series[0].Data[0]] ];\r\n            let index = 0;\r\n            let scales = [];\r\n\r\n            let sc = {\r\n                Scales: [],\r\n                Dict: [],\r\n                MinMax: null\r\n            };\r\n            for (let i = 0; i < series.length; i++){\r\n                sc.Dict[i] = 0;\r\n                if (series[i].OwnAxis){\r\n                    index++;\r\n                    if (typeof series[i].OwnAxis[0] !== 'undefined')\r\n                        mm.push(series[i].OwnAxis);\r\n                    else\r\n                        mm.push([series[i].Data[0],series[i].Data[0]]);\r\n                    sc.Dict[i] = index;\r\n                }\r\n                for (let j = 0; j < series[i].Data.length; j++){\r\n                    if (isAutoScale){\r\n                        if (series[i].Data[j] < min)\r\n                            min = series[i].Data[j];\r\n                        if (series[i].Data[j] > max)\r\n                            max = series[i].Data[j];\r\n                    }\r\n                    if (series[i].OwnAxis && typeof series[i].OwnAxis[0] === 'undefined'){\r\n                        if (series[i].Data[j] < mm[index][0])\r\n                            mm[index][0] = series[i].Data[j];\r\n                        if (series[i].Data[j] > mm[index][1])\r\n                            mm[index][1] = series[i].Data[j];\r\n                    }\r\n                }\r\n            }\r\n            mm[0] = [min, max];\r\n            sc.MinMax = mm;\r\n            for (let i = 0; i < mm.length; i++){\r\n                let order = mm[i][1].toString().length;\r\n                let step;\r\n                if (i===0 && !isAutoStep){\r\n                    step = ctx.Options.AxisY.Scale[2];\r\n                }\r\n                else{\r\n                    step = mm[i][2]? mm[i][2] : ( (mm[i][1]-mm[i][0] )*40 /height / (Math.pow(10, order-1))/5 ).toFixed(1) * Math.pow(10, order-1)*5;\r\n                }\r\n                let s = mm[i][0];\r\n                let scale = [];\r\n                if (order < 3 || true){\r\n                    //debugger;\r\n                    while (s <= mm[i][1]){\r\n                        scale.push(s);\r\n                        s += step;\r\n                    }\r\n                    scale.push(s);\r\n                    sc.Scales.push(scale);\r\n                }\r\n            }\r\n            return sc;\r\n        }\r\n\r\n        static GetAbscissa(labels, width){\r\n            const stepX = width / (labels.length);\r\n            return labels.map(function(a,i){return i*stepX});\r\n        }\r\n        static GetOrdinata(serie, scale, mm, height){\r\n            let min = mm[0];\r\n            let max = mm[1];\r\n            const scaleCoefficient = scale[scale.length-1] / max;\r\n            let ordinata = [];\r\n            for (let j= 0; j < serie.length; j++){\r\n                ordinata.push( height - (  (serie[j] - min) * height/(max-min)/scaleCoefficient )  );\r\n            }\r\n            //console.log('Y', Y);\r\n            //console.log('ordinate', ordinate);\r\n            //console.log(`min=${min} max=${max}`, height);\r\n            //ordinata.push(ordinate);\r\n            //console.log('ordinata', ordinata);\r\n            return ordinata;\r\n\r\n\r\n\r\n        }\r\n        static GetPoints(X,Y){\r\n            let points = [];\r\n            //let length = X.length >= Y.length ? X.length:Y.length;\r\n            for (let i = 0; i < Y.length; i++){\r\n                points.push([X[i], Y[i]]);\r\n            }\r\n            return points;\r\n        }\r\n        static GetPath(points, type, line, color, width){\r\n            switch (type){\r\n                case 'line':\r\n                    return Lure.Chart.GetPathLine(points, line, color, width);\r\n                case 'bar':\r\n                    return Lure.Chart.GetPathBar(points, line, color, width);\r\n                case 'pie':\r\n                    return '';\r\n            }\r\n        }\r\n        static GetPathLine(points, line, color, width, isDots=true){\r\n            const n = points.length;\r\n\r\n            let xs = [];        //x\r\n            let ys = [];        //y\r\n            let dys = [];       //dx\r\n            let dxs = [];       //dy\r\n            let ds = [];        //derivative\r\n            let ms = [];        //desired slope (m) at each point using Fritsch-Carlson method\r\n            for(let i = 0; i < n; i++) {\r\n                xs[i] = points[i][0];\r\n                ys[i] = points[i][1];\r\n            }\r\n            // Calculate deltas and derivative\r\n            for(let i = 0; i < n - 1; i++) {\r\n                dys[i] = ys[i + 1] - ys[i];\r\n                dxs[i] = xs[i + 1] - xs[i];\r\n                ds[i] = dys[i] / dxs[i];\r\n            }\r\n            // Determine desired slope (m) at each point using Fritsch-Carlson method\r\n            // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\r\n            ms[0] = ds[0];\r\n            ms[n - 1] = ds[n - 2];\r\n            for(let i = 1; i < n - 1; i++) {\r\n                if(ds[i] === 0 || ds[i - 1] === 0 || (ds[i - 1] > 0) !== (ds[i] > 0)) {\r\n                    ms[i] = 0;\r\n                } else {\r\n                    ms[i] = 3 * (dxs[i - 1] + dxs[i]) / (\r\n                        (2 * dxs[i] + dxs[i - 1]) / ds[i - 1] +\r\n                        (dxs[i] + 2 * dxs[i - 1]) / ds[i]);\r\n                    if(!isFinite(ms[i])) {\r\n                        ms[i] = 0;\r\n                    }\r\n                }\r\n            }\r\n            let d = `M ${xs[0]},${ys[0]}`;\r\n            let dots = '<g class=\"mt-chart-dots\">';\r\n            for(let i = 0; i < n - 1; i++) {\r\n                //console.log(d);\r\n                d += ` C ${xs[i] + dxs[i] / 3},${ys[i] + ms[i] * dxs[i] / 3} ${xs[i + 1] - dxs[i] / 3},${ys[i + 1] - ms[i + 1] * dxs[i] / 3} ${xs[i + 1]},${ys[i + 1]}`;\r\n                if (isDots)\r\n                    dots += Lure.Chart.GetPathLineDot(xs[i] , ys[i], line, i, color, width );\r\n            }\r\n            dots += '</g>';\r\n            //return d;\r\n            //console.log(d);\r\n            return `<g class=\"mt-chart-serie\"><path data-line=\"${line}\" d=\"${d}\" fill=\"none\" stroke=\"${color}\" stroke-width=\"${width}\"></path> ${dots}</g>`;\r\n        }\r\n        static GetPathLineDot(x,y, i,j, color, width){\r\n            return `<circle class=\"mt-chart-point\" data-line=\"${i}\" data-item=\"${j}\" cx=\"${x}\" cy=\"${y}\" r=\"${width}\" stroke=\"${color}\" stroke-width=\"2\" fill=\"#fff\" ></circle>`\r\n\r\n        }\r\n        static GetPathBar(points, line, color, width){\r\n            const wd = 30;\r\n            console.log('GetPathBar', points);\r\n            // return '';\r\n            let p = `<path data-line=\"${line}\" d=${0} fill=\"${color}\" stroke=\"${color}\" stroke-width=\"${width}\"></path>`;\r\n            // let d = `M ${points[0][0]}  ${points[0][1]}`;\r\n            let dots = '';\r\n            for (let i = 0; i < points.length; i++){\r\n                let d =`M ${points[i][0]} ${points[i][1]} L ${points[i][0]} ${points[i][1]}`;\r\n                dots += Lure.Chart.GetPathLineDot(points[i][0] , points[i][1], line, i, color, width );\r\n            }\r\n            // debugger;\r\n            return dots;\r\n        }\r\n\r\n\r\n        /*builder*/\r\n        static MakeLegend(Serie, i){\r\n            return `<div class=\"mt-chart-legend__item row\">\r\n                          <input class=\"mt-legend-checkbox\" type=\"checkbox\" checked=\"checked\" id=\"legcheck${Serie.Name}${i}\">\r\n                          <div class=\"mt-legend-icon\" style=\"background-color: ${Serie.Color}\"></div>\r\n                          <label class=\"mt-legend-label\" for=\"legcheck${Serie.Name}${i}\">${Serie.Name}</label>\r\n                        </div>`;\r\n        }\r\n\r\n        static GetGrid(sizeX, sizeY){\r\n            let grid = ``;\r\n            for (let i = 0; i < sizeY; i++){\r\n                grid += `<div class=\"mt-chart__grid-line row flex-100 flex-between\">`;\r\n                for (let j = 0; j < sizeX; j++) {\r\n                    grid += `<div class='mt-chart__grid-item flex-100'></div>`;\r\n                }\r\n                grid += `</div>`;\r\n            }\r\n            grid += ``;\r\n            return grid;\r\n        }\r\n    }\r\n};\r\n\r\nLure.Chart = Lure.Plugin.Chart.Chart;\r\n\r\n\r\nLure.__GenegateString = function () {\r\n    let gen = Math.random().toString(36).replace(\"0.\", '').replace(/[\\d]+/, '').substring(0,1);\r\n    if (Lure.Select(`#${gen}`)){\r\n        gen = Lure.__GenegateString();\r\n    }\r\n    return gen;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}