{"version":3,"sources":["lure.chart.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Lure","Plugin","Chart","Core","LureChart","Builder","Legend","AxeY","AxeX","Grid","Svg","isGraph","chart","Options","Series","filter","x","Type","console","log","PathBuilder","Builders","MakeGraph","MakeLegend","MakeAxisY","_ScaleY","Scales","Dict","Title","Name","Color","MakeAxisX","MakeGrid","Labels","Data","Content","innerHTML","Target","arguments","undefined","_ref","_ref$Type","_ref$Title","_ref$Labels","Rotation","_ref$Series","OwnAxis","_ref$Tooltip","Tooltip","Template","_ref$AxisY","AxisY","Scale","Visible","Height","SeriesOptions","this","ColorsDefault","Select","classList","add","style","position","Buffer","AxisX","Width","Abscissa","SeriesPoints","ParametersAxisX","_Series","__InitSeries","Se","ep","toLowerCase","Point","GetSeriePointOptions","push","bind","BarStack","BarGradient","isNumeric","Block","_Legend","querySelector","_AxisX","_AxisY","_ChartArea","_Grid","_Svg","v","ChartArea","Serie","accum","index","indexOf","scale","caption","a","j","labels","Angle","MarginTop","MarginLeft","b","GetGrid","serie","mm","MinMax","DataOrdinata","GetOrdinata","DataAbscissa","GetAbscissa","points","GetPoints","GetPath","CalcAxisX","c","CreateElementFromString","size","GetInlineSize","getComputedStyle","fontSize","w","h","height","wFact","width","angle","parseFloat","cos","Math","round","sqrt","pow","__GetPath","line","__GetPathLine","__GetPathBar","n","xs","ys","dys","dxs","ds","ms","isFinite","d","dots","GetPathLineDot","Radius","wd","bricks","GradientId","random","toString","replace","GetScaleY","SvgBar","SvgLine","Controller","BeforeShow","Prop","_Timer","_Timer2","Shower","clearTimeout","display","opacity","Hider","setTimeout","Show","options","data","Value","Refresh","left","pos","top","clientHeight","backgroundColor","color","Methods","Do","e","tag","currentTarget","tagName","DoCircle","DoBar","circle","parseInt","dataset","attributes","value","o","bar","AfterBuild","AddEventListenerGlobal","Hide","superdata","_Abscissa","DataPoints","Path","pointSize","SuperData","TestB","per","performance","now","Perf","get","clientWidth","p","Number","isNaN","series","ctx","min","max","isAutoScale","isAutoStep","sc","order","step","toFixed","s","stepX","map","scaleCoefficient","ordinata","X","Y","type","GetPathLine","GetPathBar","isDots","y","sizeX","sizeY","grid","__GenegateString","gen","substring"],"mappings":"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","file":"lure.chart.min.js","sourcesContent":["Lure.Plugin.Chart = {\r\n    Core: '',\r\n    Chart: class LureChart{\r\n        constructor(\r\n            Target = null,      //where render chart\r\n            {\r\n                Type = 'Line',  //Line Bar Pie\r\n                Title = '',\r\n                Labels = {\r\n                    Rotation: 'auto',\r\n                    Data: []\r\n                },\r\n                Series = [\r\n                    {Data: [], Type: '', OwnAxis: false, Color: '#eee'},\r\n                    {Data: [], Type: '', OwnAxis: [0, 100], Color: '#eee'},\r\n                ],\r\n                Tooltip = {\r\n                    Template: 'Name: {{Name}}<br>Value: {{Value}}',\r\n                },\r\n                AxisY = {\r\n                    Scale: ['auto', 'auto', 'auto'],\r\n                    Visible: true,\r\n                },\r\n                Height = 400,\r\n                SeriesOptions = {},\r\n            }={},\r\n        ){\r\n            /// <DEFAULTS>\r\n            //const Colors = ['red', 'green', 'blue'];\r\n            const ColorsDefault = ['red', 'green', 'cornflowerblue', 'purple', 'palevioletred', 'orange'];\r\n            //const DefaultPoint = {\r\n            //    Visible: true,\r\n            //    Radius: 4\r\n            //};\r\n            /// </DEFAULTS>\r\n            ///\r\n            let chart = this;\r\n            this.Content = Lure.Select(Target);\r\n            this.Content.classList.add('mt-chart'); // mt\r\n            this.Content.style.position = 'relative';\r\n\r\n            this.isGraph = true;//(Series.filter(x=>x.Type?x.Type.toLowerCase():x.Type === 'line' || x.Type?x.Type.toLowerCase():x.Type === 'bar')).length === Series.length;\r\n\r\n            let Buffer = {\r\n                Legend: '',\r\n                AxisX: '',\r\n                AxisY: '',\r\n                Grid: '',\r\n                Svg: '',\r\n\r\n\r\n\r\n                Height: 0,\r\n                Width: 0,\r\n                Abscissa: null,\r\n                SeriesPoints: [],\r\n\r\n                ParametersAxisX: null,\r\n\r\n            };\r\n\r\n            this._Series = Series;\r\n            //define Series\r\n            this.__InitSeries = function (){\r\n                let Se = [];\r\n\r\n                for (let i = 0; i < this._Series.length; i++){\r\n                    let ep = {};\r\n                    ep.Name    = this._Series[i].Name ? this._Series[i].Name                : 'Unnamed';\r\n                    ep.Data    = this._Series[i].Data;\r\n                    ep.OwnAxis = this._Series[i].OwnAxis;\r\n                    ep.Title   = this._Series[i].Title? this._Series[i].Title               : ep.Name;\r\n                    ep.Type    = this._Series[i].Type ? this._Series[i].Type.toLowerCase()  : (Type?Type.toLowerCase():'line');\r\n                    ep.Color   = this._Series[i].Color? this._Series[i].Color: ColorsDefault[i]?ColorsDefault[i]:'#000';\r\n                    ep.Width   = this._Series[i].Width? this._Series[i].Width               : 2;\r\n\r\n                    ep.Point   = Series[i].Point;\r\n                    ep.Point   = Lure.Chart.GetSeriePointOptions(ep);\r\n\r\n                    Buffer.Legend += Lure.Chart.MakeLegend(ep, i);\r\n                    Se.push(ep)\r\n                }\r\n                return Se;\r\n            }.bind(this);\r\n\r\n            this.Options = {\r\n                //Type: Type? Type.toLowerCase(): 'line',\r\n                Title: Title? Title: '',\r\n                Labels: {\r\n                    Visible: (typeof Labels.Visible === 'undefined' || Labels.Visible),\r\n                    Rotation: Labels.Rotation? Labels.Rotation: 'auto',\r\n                    Data: Labels.Data? Labels.Data: [],\r\n                },\r\n                Series: this.__InitSeries(),\r\n                SeriesOptions: {\r\n                    BarStack: false,\r\n                    BarGradient: true\r\n                },\r\n                AxisY: {\r\n                    Scale: AxisY.Scale? ([Lure.isNumeric(AxisY.Scale[0])? AxisY.Scale[0]:'auto', Lure.isNumeric(AxisY.Scale[1])? AxisY.Scale[1]:'auto', Lure.isNumeric(AxisY.Scale[2])? AxisY.Scale[2]:'auto']):['auto', 'auto', 'auto'],\r\n                    Visible: (typeof AxisY.Visible === 'undefined' || AxisY.Visible)\r\n                },\r\n                Tooltip: {\r\n                    Template: Tooltip.Template?Tooltip.Template : 'Name: {{Name}}<br>Value: {{Value}}'\r\n                }\r\n            };\r\n            this.Block = (function () {\r\n                this.Content.innerHTML = `<div class=\"mt-chart col\">\r\n                                        <div class=\"mt-chart-caption\">\r\n                                          <div class='mt-chart-title'>${Title}</div>\r\n                                          <div class=\"mt-chart-legend row\"></div>\r\n                                        </div>\r\n                                        <div class=\"mt-chart-kek row flex-100\">\r\n                                          <div class=\"mt-chart-y row\"></div>\r\n                                          <div class=\"col flex-100\">\r\n                                            <div class=\"mt-chart-area row flex-100\">\r\n                                              <svg class=\"mt-chart-svg\"></svg>\r\n                                              <div class=\"mt-chart-grid\" style=\" position: absolute;\"></div>\r\n                                            </div>\r\n                                            <div class=\"mt-chart-x row\"></div>\r\n                                           </div>\r\n                                        </div>\r\n                                      </div>`;\r\n                const _Legend     = this.Content.querySelector('.mt-chart-legend');\r\n                const _AxisX      = this.Content.querySelector('.mt-chart-x');\r\n                const _AxisY      = this.Content.querySelector('.mt-chart-y');\r\n                const _ChartArea  = this.Content.querySelector('.mt-chart-area');\r\n                const _Grid       = this.Content.querySelector('.mt-chart-grid');\r\n                const _Svg        = this.Content.querySelector('.mt-chart-svg');\r\n                return {\r\n                    get Legend(){\r\n                        return _Legend;\r\n                    },\r\n                    set Legend(v){\r\n                        _Legend.innerHTML = v;\r\n                    },\r\n                    get AxisX(){\r\n                        return _AxisX;\r\n                    },\r\n                    set AxisX(v){\r\n                        _AxisX.innerHTML = v;\r\n                    },\r\n                    get AxisY(){\r\n                        return _AxisY;\r\n                    },\r\n                    set AxisY(v){\r\n                        _AxisY.innerHTML = v;\r\n                    },\r\n                    get ChartArea(){\r\n                        return _ChartArea;\r\n                    },\r\n                    set ChartArea(v){\r\n                        _ChartArea.innerHTML = v;\r\n                    },\r\n                    get Grid(){\r\n                        return _Grid;\r\n                    },\r\n                    set Grid(v){\r\n                        _Grid.innerHTML = v;\r\n                    },\r\n                    get Svg(){\r\n                        return _Svg;\r\n                    },\r\n                    set Svg(v){\r\n                        _Svg.innerHTML = v;\r\n                    },\r\n                }\r\n            }.bind(this))();\r\n\r\n            /********************************************************************************/\r\n            const Builders = {\r\n                /**\r\n                 *\r\n                 * @param Serie\r\n                 * @param i\r\n                 * @returns {string}\r\n                 * @constructor\r\n                 */\r\n                MakeLegend(Serie, i){\r\n                    return `<div class=\"mt-chart-legend__item row\">\r\n                          <input class=\"mt-legend-checkbox\" type=\"checkbox\" checked=\"checked\" id=\"legcheck${Serie.Name}${i}\">\r\n                          <div class=\"mt-legend-icon\" style=\"background-color: ${Serie.Color}\"></div>\r\n                          <label class=\"mt-legend-label\" for=\"legcheck${Serie.Name}${i}\">${Serie.Name}</label>\r\n                        </div>`;\r\n                },\r\n                /**\r\n                 *\r\n                 * @param scale\r\n                 * @param i\r\n                 * @param name\r\n                 * @param color\r\n                 * @returns {*}\r\n                 * @constructor\r\n                 */\r\n                MakeAxisY(){\r\n                    /*if (!scale)\r\n                     return '';\r\n                     let caption = '';\r\n                     if (i>0)\r\n                     caption = `<div class=\"mt-chart-axis-caption\"><div style=\"transform: rotate(-90deg)\">${name}</div></div>`;\r\n                     let a = '';\r\n                     for (let j = 0; j< scale.length; j++){\r\n                     a += `<div class=\"mt-chart-label mt-chart-label__y\"><span>${scale[j]}</span></div>`;\r\n                     }\r\n                     return `<div class=\"mt-chart-axis__y row\" ${(i>0)? ('style=\"color: '+color+'; font-weight: bold;\"'):''} data-line=\"${i}\">${caption}<div class=\"mt-chart-labels col\">${a}</div></div>`;*/\r\n                    let i = 0;\r\n                    if (!chart.Options.AxisY.Visible){\r\n                        i = 1;\r\n                        if (chart._ScaleY.Scales.length < 2)\r\n                            return '';\r\n                    }\r\n                    let accum = '';\r\n                    for (i; i <chart._ScaleY.Scales.length; i++){\r\n                        let index = chart._ScaleY.Dict.indexOf(i);//.filter(x=>x===i && x !==0)[0];\r\n                        let scale = chart._ScaleY.Scales[i];\r\n                        let caption = '';\r\n                        //let a = '';\r\n                        if (i>0)\r\n                            caption = `<div class=\"mt-chart-axis-caption\"><div style=\"transform: rotate(-90deg)\">${chart.Options.Series[index].Title}</div></div>`;\r\n                        let a = '';\r\n                        for (let j = 0; j< scale.length; j++){\r\n                            a += `<div class=\"mt-chart-label mt-chart-label__y\"><span>${scale[j]}</span></div>`;\r\n                        }\r\n                        accum += `<div class=\"mt-chart-axis__y row\" ${(i>0)? ('style=\"color: '+chart.Options.Series[index].Color+'; font-weight: bold;\"'):''} data-line=\"${i}\">${caption}<div class=\"mt-chart-labels col\">${a}</div></div>`;\r\n\r\n                    }\r\n                    return accum;\r\n                },\r\n                MakeAxisX(){\r\n                    if (!chart.Options.Labels.Visible)\r\n                        return '';\r\n                    let labels = chart.Options.Labels.Data;\r\n\r\n                    const style = `transform: rotate(${Buffer.ParametersAxisX.Angle}deg); margin-top: ${Buffer.ParametersAxisX.MarginTop}px; width: ${Buffer.ParametersAxisX.Width}px; margin-left: ${Buffer.ParametersAxisX.MarginLeft}px;`;\r\n                    let a = '';\r\n                    for (let i = 0 ; i < labels.length; i++){\r\n                        a += `<div class=\"mt-chart-label mt-chart-label__x\"><span style=\"${style}\">${labels[i]}</span></div>`\r\n                    }\r\n                    //console.log(`AxisX forecastHeight: ${Math.round(h/4+ (Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))))}`);\r\n                    return a;\r\n                },\r\n                MakeGrid(a,b){\r\n                    return Lure.Chart.GetGrid(a,b);\r\n                },\r\n                MakeGraph(serie, i){\r\n                    let index = chart._ScaleY.Dict[i];\r\n                    let scale = chart._ScaleY.Scales[index];\r\n                    let mm = chart._ScaleY.MinMax[index];\r\n                    let DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\r\n                    let DataAbscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, chart.Width);\r\n                    let points = Lure.Chart.GetPoints(DataAbscissa, DataOrdinata);\r\n                    return Lure.Chart.GetPath(points, chart.Options.Series[i].Type, i, chart.Options.Series[i].Color, chart.Options.Series[i].Width);\r\n                },\r\n                CalcAxisX(){\r\n                    let c = Lure.CreateElementFromString(`<div class=\"mt-chart-label mt-chart-label__x\"><span>${chart.Options.Labels.Data[0]}</span></div>`);\r\n                    let size = Lure.GetInlineSize(c, getComputedStyle(c.querySelector('span')).fontSize);\r\n                    let w = chart.Width/chart.Options.Labels.Data.length;\r\n                    let h = size.height;\r\n                    let wFact = size.width;\r\n                    let angle;\r\n                    if (chart.Options.Labels.Rotation !== 'auto'){\r\n                        angle = parseFloat(chart.Options.Labels.Rotation);\r\n                    }\r\n                    else{\r\n                        let cos = (w-h)/(wFact+h);\r\n                        if (cos < 0.1)\r\n                            cos = 0;\r\n                        if (cos > 1)\r\n                            cos = 1;\r\n                        angle = (-90*(1-cos));\r\n                    }\r\n                    return {\r\n                        Height: Math.round(h/4+ (Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2)))),\r\n                        Width: wFact,\r\n                        MarginTop:  (wFact>w)? ((Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))) - h) : 0,\r\n                        MarginLeft: (wFact>w)? (-w/2):(-wFact/2),\r\n                        Angle: angle,\r\n                    }\r\n\r\n                }\r\n            };\r\n            /**\r\n             *\r\n             * @returns {string}\r\n             * @constructor\r\n             */\r\n            function Builder(){\r\n                let Legend = '';\r\n                let AxeY = '';\r\n                let AxeX = '';\r\n                let Grid = '';\r\n                let Svg = '';\r\n\r\n                const isGraph = (chart.Options.Series.filter(x=>x.Type === 'pie')).length !== chart.Options.Series.length;\r\n                console.log('isGraph',isGraph);\r\n                let PathBuilder;\r\n                if (isGraph)\r\n                    PathBuilder = Builders.MakeGraph;\r\n\r\n                for (let i = 0; i < chart.Options.Series.length; i++){\r\n                    Legend += Builders.MakeLegend(chart.Options.Series[i], i);\r\n                    AxeY += Builders.MakeAxisY(chart._ScaleY.Scales[i], i, chart.Options.Series[chart._ScaleY.Dict[i]].Title? chart.Options.Series[chart._ScaleY.Dict[i]].Title:chart.Options.Series[chart._ScaleY.Dict[i]].Name, chart.Options.Series[chart._ScaleY.Dict[i]].Color);\r\n                    Svg += PathBuilder(chart.Options.Series[i], i);\r\n                }\r\n                Legend = `<div class=\"mt-chart-legend row\">${Legend}</div>`;\r\n                AxeY = `<div class=\"mt-chart-y row\">${AxeY}</div>`;\r\n                AxeX = Builders.MakeAxisX();\r\n                Grid = Builders.MakeGrid(chart.Options.Labels.Data.length, chart._ScaleY.Scales[0].length-1);\r\n                chart.Content.innerHTML= `<div class=\"mt-chart col\">\r\n                        <div class=\"mt-chart-caption\">\r\n                          <div class='mt-chart-title'>${Title}</div>\r\n                          <div class=\"mt-chart-legend row\">${Legend}</div>\r\n                        </div>\r\n                        <div class=\"mt-chart-kek row flex-100\">\r\n                          <div class=\"mt-chart-y row\">${AxeY}</div>\r\n                          <div class=\"col flex-100\">\r\n                            <div class=\"mt-chart-area row flex-100\">\r\n                              <svg class=\"mt-chart-svg\">${Svg}</svg>\r\n                              <div class=\"mt-chart-grid\" style=\" position: absolute;\">${Grid}</div>\r\n                            </div>\r\n                            <div class=\"mt-chart-x row\">${AxeX}</div>\r\n                           </div>\r\n                        </div>\r\n                      </div>`\r\n            }\r\n\r\n            this.__GetPath = function(serie, line){\r\n                //debugger;\r\n                switch (serie.Type){\r\n                    case 'line':\r\n                        return this.__GetPathLine(serie, line);\r\n                    case 'bar':\r\n                        return this.__GetPathBar(serie, line);\r\n                    case 'pie':\r\n                        return '';\r\n                }\r\n            }.bind(this);\r\n            this.__GetPathLine = function (serie, line) {\r\n                if (!Buffer.Abscissa || Buffer.Width !== this.Width)\r\n                    Buffer.Abscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, this.Width);\r\n                let index = this._ScaleY.Dict[line];\r\n                let scale = this._ScaleY.Scales[index];\r\n                let mm = chart._ScaleY.MinMax[index];\r\n                //debugger;\r\n                let DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\r\n                let points = Lure.Chart.GetPoints(Buffer.Abscissa, DataOrdinata);\r\n                Buffer.SeriesPoints[line] = points;\r\n\r\n                const n = points.length;\r\n\r\n                let xs = [];        //x\r\n                let ys = [];        //y\r\n                let dys = [];       //dx\r\n                let dxs = [];       //dy\r\n                let ds = [];        //derivative\r\n                let ms = [];        //desired slope (m) at each point using Fritsch-Carlson method\r\n                for(let i = 0; i < n; i++) {\r\n                    xs[i] = points[i][0];\r\n                    ys[i] = points[i][1];\r\n                }\r\n                // Calculate deltas and derivative\r\n                for(let i = 0; i < n - 1; i++) {\r\n                    dys[i] = ys[i + 1] - ys[i];\r\n                    dxs[i] = xs[i + 1] - xs[i];\r\n                    ds[i] = dys[i] / dxs[i];\r\n                }\r\n                // Determine desired slope (m) at each point using Fritsch-Carlson method\r\n                // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\r\n                ms[0] = ds[0];\r\n                ms[n - 1] = ds[n - 2];\r\n                for(let i = 1; i < n - 1; i++) {\r\n                    if(ds[i] === 0 || ds[i - 1] === 0 || (ds[i - 1] > 0) !== (ds[i] > 0)) {\r\n                        ms[i] = 0;\r\n                    } else {\r\n                        ms[i] = 3 * (dxs[i - 1] + dxs[i]) / (\r\n                            (2 * dxs[i] + dxs[i - 1]) / ds[i - 1] +\r\n                            (dxs[i] + 2 * dxs[i - 1]) / ds[i]);\r\n                        if(!isFinite(ms[i])) {\r\n                            ms[i] = 0;\r\n                        }\r\n                    }\r\n                }\r\n                let d = `M ${xs[0]},${ys[0]}`;\r\n                let dots = '<g class=\"mt-chart-dots\">';\r\n                for(let i = 0; i < n - 1; i++) {\r\n                    d += ` C ${xs[i] + dxs[i] / 3},${ys[i] + ms[i] * dxs[i] / 3} ${xs[i + 1] - dxs[i] / 3},${ys[i + 1] - ms[i + 1] * dxs[i] / 3} ${xs[i + 1]},${ys[i + 1]}`;\r\n                    if (serie.Point.Visible)\r\n                        dots += Lure.Chart.GetPathLineDot(xs[i] , ys[i], line, i, serie.Color, serie.Point.Radius );\r\n                }\r\n                if (serie.Point.Visible)\r\n                    dots += Lure.Chart.GetPathLineDot(xs[n-1] , ys[n-1], line, n-1, serie.Color, serie.Point.Radius );\r\n                dots += '</g>';\r\n                return `<g class=\"mt-chart-serie\"><path data-line=\"${line}\" d=\"${d}\" fill=\"none\" stroke=\"${serie.Color}\" stroke-width=\"${serie.Width}\"></path> ${dots}</g>`;\r\n\r\n            }.bind(this);\r\n            this.__GetPathBar = function (serie, line) {\r\n                if (!Buffer.Abscissa || Buffer.Width !== this.Width)\r\n                    Buffer.Abscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, this.Width);\r\n                let index = this._ScaleY.Dict[line];\r\n                let scale = this._ScaleY.Scales[index];\r\n                let mm = chart._ScaleY.MinMax[index];\r\n                //debugger;\r\n                let DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\r\n                let points = Lure.Chart.GetPoints(Buffer.Abscissa, DataOrdinata);\r\n                Buffer.SeriesPoints[line] = points;\r\n                let height = this.Height;\r\n                let wd = serie.Width;\r\n\r\n\r\n                let bricks = '<g class=\"mt-chart-serie\" data-type=\"Bar\">';\r\n                let GradientId = '';\r\n                if (this.Options.SeriesOptions.BarGradient){\r\n                    GradientId = 'bar_' + Math.random().toString(36).replace(\"0.\", '');\r\n                    bricks += `<linearGradient id=\"${GradientId}\"  x1=\"0\" y1=\"0%\"><stop offset=\"0%\" stop-color=\"rgba(0,0,0,0.2)\"/><stop offset=\"33%\" stop-color=\"rgba(255,255,255,0.2)\"/><stop offset=\"100%\" stop-color=\"rgba(0,0,0,0.3)\"/></linearGradient>`;\r\n                }\r\n                // let d = `M ${points[0][0]}  ${points[0][1]}`;\r\n\r\n                let dots = '';\r\n                for (let i = 0; i < points.length; i++){\r\n                    let d =`M ${points[i][0]-wd/2} ${height} L ${(points[i][0]+wd/2)} ${height} ${(points[i][0]+wd/2)} ${points[i][1]} ${points[i][0]-wd/2} ${points[i][1]}Z`;\r\n                    // debugger;\r\n                    bricks += `<path class=\"mt-chart-tooltipable\" data-line=\"${line}\" data-item=\"${i}\" d=\"${d}\" fill=\"${serie.Color}\" stroke=\"#000\" stroke-width=\"0\"></path>`;\r\n                    if (this.Options.SeriesOptions.BarGradient)\r\n                        bricks += `<path class=\"mt-chart-tooltipable\"  data-line=\"${line}\" data-item=\"${i}\" d=\"${d}\" fill=\"url(#${GradientId})\" ></path>`;\r\n                    //dots += Lure.Chart.GetPathLineDot(points[i][0] , points[i][1], line, i, serie.Color, serie.Point.Radius );\r\n                }\r\n                bricks += dots+'</g>';\r\n                return bricks;\r\n            }.bind(this);\r\n\r\n\r\n            (function Init(){\r\n                /* let Legend = '';\r\n                 for (let i = 0; i < this.Options.Series.length; i++){\r\n                 Legend += Lure.Chart.MakeLegend(this.Options.Series[i], i);\r\n                 }*/\r\n                this.Block.Legend = Buffer.Legend;\r\n                Buffer.ParametersAxisX = Builders.CalcAxisX();\r\n                console.log('this.Height-Buffer.ParametersAxisX.Height',this.Height,Buffer.ParametersAxisX.Height);\r\n                this._ScaleY = Lure.Chart.GetScaleY(this.Options.Series, (this.Height-Buffer.ParametersAxisX.Height), this);\r\n\r\n                this.Block.AxisX = Builders.MakeAxisX();\r\n                this.Block.Grid  = Lure.Chart.GetGrid(this.Options.Labels.Data.length, this._ScaleY.Scales[0].length-1);\r\n\r\n                const isGraph = this.isGraph;\r\n                console.log('isGraph',isGraph);\r\n                let PathBuilder;\r\n                if (isGraph)\r\n                    PathBuilder = Builders.MakeGraph;\r\n                let AxeY = '';\r\n                //let Svg = '';\r\n                let SvgBar = '';\r\n                let SvgLine = '';\r\n\r\n                /*\r\n                 for (let i = 0; i < chart._ScaleY.Scales.length; i++){\r\n                 let index = this._ScaleY.Dict[i];\r\n                 //debugger;\r\n                 AxeY += Builders.MakeAxisY(chart._ScaleY.Scales[index], i, chart.Options.Series[i].Title, chart.Options.Series[i].Color);\r\n                 }*/\r\n                AxeY = Builders.MakeAxisY();\r\n                this.Block.AxisY = AxeY;\r\n                for (let i = 0; i < chart.Options.Series.length; i++){\r\n\r\n                    //AxeY += Builders.MakeAxisY(chart._ScaleY.Scales[i], i, chart.Options.Series[chart._ScaleY.Dict[i]].Title? chart.Options.Series[chart._ScaleY.Dict[i]].Title:chart.Options.Series[chart._ScaleY.Dict[i]].Name, chart.Options.Series[chart._ScaleY.Dict[i]].Color);\r\n                    //Svg += PathBuilder(chart.Options.Series[i], i);\r\n                    switch (chart.Options.Series[i].Type){\r\n                        case 'line':\r\n                            SvgLine += this.__GetPathLine(chart.Options.Series[i], i);\r\n                            break;\r\n                        case 'bar':\r\n                            SvgBar += this.__GetPathBar(chart.Options.Series[i], i);\r\n                            break;\r\n                    }\r\n                    //Svg += this.__GetPath(chart.Options.Series[i], i);\r\n                    // this.__GetPath(chart.Options.Series[i], i)\r\n                }\r\n\r\n\r\n                this.Block.Svg   = SvgBar+SvgLine;\r\n\r\n\r\n\r\n                this.Block.AxisY.style.height = this.Height+'px';\r\n\r\n\r\n                //console.log(`AxisX FactHeight: ${this.Block.AxisX.clientHeight}`);\r\n                // this.Block.AxisX.style.height = this.BuidlerData.AxisXOptions.Height+'px';\r\n\r\n            }.bind(this))();\r\n            /********************************************************************************/\r\n            /*******/\r\n\r\n\r\n\r\n            /*<tooltips>*/\r\n            this.Tooltip = new Lure.Content({\r\n                Name: 'Tooltipchek',\r\n                Target: this.Block.ChartArea,\r\n                Content: `<div class=\"mt-chart-tooltip\">\r\n                        <div class=\"val\">${this.Options.Tooltip.Template}</div>\r\n                      </div>`,\r\n                Visible: false,\r\n                Controller: {\r\n                    Data: {},\r\n                },\r\n                BeforeShow: function (a,b) {\r\n\r\n                },\r\n                Prop: function () {\r\n                    this._Timer = null;\r\n                    this._Timer2 = null;\r\n                },\r\n                Shower: function () {\r\n                    clearTimeout(this._Timer);\r\n                    clearTimeout(this._Timer2);\r\n                    this.Content.style.display = '';\r\n                    this.Content.style.opacity = '1';\r\n                },\r\n                Hider: function () {\r\n                    clearTimeout(this._Timer);\r\n                    this._Timer = setTimeout(\r\n                        function () {\r\n                            this.Content.style.opacity = '0';\r\n                            this._Timer2 = setTimeout(function () {\r\n                                this.Content.style.display = 'none';\r\n                            }.bind(this), 200)\r\n\r\n                        }.bind(this), 500);\r\n                },\r\n                Show: function (options) {\r\n                    clearTimeout(this._Timer);\r\n                    this.Data.Name = options.data[0];\r\n                    this.Data.Value = options.data[1];\r\n                    this.Refresh();\r\n                    this.Content.style.left = (options.pos[0] + 7)+\"px\";\r\n                    this.Content.style.top = (options.pos[1] - this.Content.clientHeight - 7)+\"px\";\r\n                    this.Content.style.backgroundColor = options.color;\r\n                    //this._Timer = setTimeout(this.Hide, 2000);\r\n                },\r\n                Methods: function () {\r\n                    this.Do = function (e) {\r\n                        let tag = e.currentTarget.tagName.toLowerCase();\r\n                        switch (tag){\r\n                            case 'circle':\r\n                                this.DoCircle(e);\r\n                                break;\r\n                            case 'path':\r\n                                this.DoBar(e);\r\n                                break;\r\n\r\n                        }\r\n\r\n\r\n                    }.bind(this);\r\n                    this.DoCircle = function (e) {\r\n                        let circle = e.currentTarget;\r\n                        let i = parseInt(circle.dataset['line']);\r\n                        let j = parseInt(circle.dataset['item']);\r\n                        let color = circle.attributes['stroke'].value;\r\n                        //console.log(` parseInt(circle.attributes['r'].value`,  parseInt(circle.attributes['r'].value) );\r\n                        let width = parseInt(circle.attributes['stroke-width'].value);\r\n                        circle.attributes['fill'].value = color;\r\n                        circle.attributes['r'].value = parseInt(circle.attributes['r'].value) + width;\r\n                        circle.attributes['stroke'].value = \"#fff\";\r\n\r\n\r\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\r\n                        let o = {\r\n                            data: [Series[i].Name, Series[i].Data[j]],\r\n                            color: color,\r\n                            pos: Buffer.SeriesPoints[i][j]  //[e.offsetX, e.offsetY]\r\n                        };\r\n                        this.Show(o);\r\n                    }.bind(this);\r\n                    this.DoBar = function (e) {\r\n                        let bar = e.currentTarget;\r\n                        let i = parseInt(bar.dataset['line']);\r\n                        let j = parseInt(bar.dataset['item']);\r\n\r\n                        // bar.attributes['stroke-width'].value = 2;\r\n\r\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\r\n\r\n                        let o = {\r\n                            data: [chart.Options.Series[i].Name, chart.Options.Series[i].Data[j]],\r\n                            color: chart.Options.Series[i].Color,\r\n                            pos: Buffer.SeriesPoints[i][j]  //[e.offsetX, e.offsetY]\r\n                        };\r\n                        this.Show(o);\r\n                    }.bind(this);\r\n\r\n                },\r\n                AfterBuild: function () {\r\n\r\n                }\r\n            });\r\n            Lure.AddEventListenerGlobal('mouseover', '.mt-chart-point, .mt-chart-tooltipable', function (e) {\r\n                this.Tooltip.Do(e);\r\n            }, this.Content, this);\r\n            Lure.AddEventListenerGlobal('mouseout', '.mt-chart-point', function (e) {\r\n                //console.log(e.currentTarget.dataset['tooltip']);\r\n                let circle = e.currentTarget;\r\n                let width = parseInt(circle.attributes['stroke-width'].value);\r\n                circle.attributes['stroke'].value = circle.attributes['fill'].value;\r\n                circle.attributes['fill'].value = \"#fff\";\r\n                circle.attributes['r'].value -= width;\r\n                chart.Tooltip.Hide();\r\n            }, this.Content);\r\n            /*</tooltips>*/\r\n\r\n            const getSuperdata = function () {\r\n                let superdata = [];\r\n                for (let i =0; i< Series.length; i++){\r\n                    let index = this._ScaleY.Dict[i];\r\n                    let scale = this._ScaleY.Scales[index];\r\n                    let mm = this._ScaleY.MinMax[index];\r\n                    let DataOrdinata = Lure.Chart.GetOrdinata(Series[i].Data, scale, mm, this.Block.Svg.Height);\r\n                    this._Abscissa = Lure.Chart.GetAbscissa(Labels.Data, this.Block.Svg.Width);\r\n                    let points = Lure.Chart.GetPoints(this._Abscissa, DataOrdinata);\r\n                    let h = 0;//\r\n                    superdata[i] = {\r\n                        h: this.Block.Svg.Height,\r\n                        Name: chart.Options.Series[i].Name,\r\n                        Data: chart.Options.Series[i].Data,\r\n                        DataPoints: points,\r\n                        Color: chart.Options.Series[i].Color,\r\n                        Path: Lure.Chart.GetPath(points, chart.Options.Series[i].Type, i, chart.Options.Series[i].Color, chart.Options.Series[i].Width),\r\n                        Width: chart.Options.Width,\r\n                        options:{\r\n                            pointSize: Series[i].Width? 4+Series[i].Width/4: 4\r\n                        }\r\n                    }\r\n                }\r\n                chart.SuperData = superdata;\r\n                return superdata;\r\n            }.bind(this);\r\n\r\n            this.TestB = function () {\r\n                let per = performance.now();\r\n                Builder();\r\n                Lure.Perf(per, 'builder');\r\n            };\r\n            this.Refresh = function () {\r\n\r\n\r\n            }.bind(this);\r\n            this.Refresh();\r\n            setTimeout(function(){\r\n\r\n            }.bind(this), 0);\r\n\r\n            this.Buffer = Buffer;\r\n        }\r\n        get Height(){\r\n            //return this.__svg.clientHeight;\r\n            return this.Block.Svg.clientHeight;\r\n        }\r\n        get Width(){\r\n            return this.Block.Svg.clientWidth;\r\n            //return this.__svg.clientWidth;\r\n        }\r\n\r\n\r\n\r\n        /*statics*/\r\n        static GetSeriePointOptions(serie, isGraph){\r\n            let p = serie.Point ? serie.Point : {};\r\n            p.Visible = (typeof p.Visible === 'undefined' || p.Visible);\r\n            p.Radius = p.Radius? p.Radius : (4+serie.Width/4);\r\n            if (Number.isNaN(p.Radius))\r\n                debugger;\r\n            return p;\r\n        }\r\n\r\n        static GetScaleY(series, height, ctx){\r\n            if (ctx.Type === 'pie'){\r\n                return [];\r\n            }\r\n            let min = series[0].Data[0];\r\n            let max = series[0].Data[0];\r\n            let isAutoScale = true;\r\n            let isAutoStep = true;\r\n            if (ctx.Options.AxisY.Scale[0] !== 'auto' && ctx.Options.AxisY.Scale[1] !== 'auto')\r\n            {\r\n                isAutoScale = false;\r\n                min = ctx.Options.AxisY.Scale[0];\r\n                max = ctx.Options.AxisY.Scale[1];\r\n            }\r\n            if (ctx.Options.AxisY.Scale[2] !== 'auto')\r\n                isAutoStep = false;\r\n            let mm = [ [series[0].Data[0],series[0].Data[0]] ];\r\n            let index = 0;\r\n            let scales = [];\r\n\r\n            let sc = {\r\n                Scales: [],\r\n                Dict: [],\r\n                MinMax: null\r\n            };\r\n            for (let i = 0; i < series.length; i++){\r\n                sc.Dict[i] = 0;\r\n                if (series[i].OwnAxis){\r\n                    index++;\r\n                    if (typeof series[i].OwnAxis[0] !== 'undefined')\r\n                        mm.push(series[i].OwnAxis);\r\n                    else\r\n                        mm.push([series[i].Data[0],series[i].Data[0]]);\r\n                    sc.Dict[i] = index;\r\n                }\r\n                for (let j = 0; j < series[i].Data.length; j++){\r\n                    if (isAutoScale){\r\n                        if (series[i].Data[j] < min)\r\n                            min = series[i].Data[j];\r\n                        if (series[i].Data[j] > max)\r\n                            max = series[i].Data[j];\r\n                    }\r\n                    if (series[i].OwnAxis && typeof series[i].OwnAxis[0] === 'undefined'){\r\n                        if (series[i].Data[j] < mm[index][0])\r\n                            mm[index][0] = series[i].Data[j];\r\n                        if (series[i].Data[j] > mm[index][1])\r\n                            mm[index][1] = series[i].Data[j];\r\n                    }\r\n                }\r\n            }\r\n            mm[0] = [min, max];\r\n            sc.MinMax = mm;\r\n            for (let i = 0; i < mm.length; i++){\r\n                let order = mm[i][1].toString().length;\r\n                let step;\r\n                if (i===0 && !isAutoStep){\r\n                    step = ctx.Options.AxisY.Scale[2];\r\n                }\r\n                else{\r\n                    step = mm[i][2]? mm[i][2] : ( (mm[i][1]-mm[i][0] )*40 /height / (Math.pow(10, order-1))/5 ).toFixed(1) * Math.pow(10, order-1)*5;\r\n                }\r\n                let s = mm[i][0];\r\n                let scale = [];\r\n                if (order < 3 || true){\r\n                    //debugger;\r\n                    while (s <= mm[i][1]){\r\n                        scale.push(s);\r\n                        s += step;\r\n                    }\r\n                    scale.push(s);\r\n                    sc.Scales.push(scale);\r\n                }\r\n            }\r\n            return sc;\r\n        }\r\n\r\n        static GetAbscissa(labels, width){\r\n            const stepX = width / (labels.length);\r\n            return labels.map(function(a,i){return i*stepX});\r\n        }\r\n        static GetOrdinata(serie, scale, mm, height){\r\n            let min = mm[0];\r\n            let max = mm[1];\r\n            const scaleCoefficient = scale[scale.length-1] / max;\r\n            let ordinata = [];\r\n            for (let j= 0; j < serie.length; j++){\r\n                ordinata.push( height - (  (serie[j] - min) * height/(max-min)/scaleCoefficient )  );\r\n            }\r\n            //console.log('Y', Y);\r\n            //console.log('ordinate', ordinate);\r\n            //console.log(`min=${min} max=${max}`, height);\r\n            //ordinata.push(ordinate);\r\n            //console.log('ordinata', ordinata);\r\n            return ordinata;\r\n\r\n\r\n\r\n        }\r\n        static GetPoints(X,Y){\r\n            let points = [];\r\n            //let length = X.length >= Y.length ? X.length:Y.length;\r\n            for (let i = 0; i < Y.length; i++){\r\n                points.push([X[i], Y[i]]);\r\n            }\r\n            return points;\r\n        }\r\n        static GetPath(points, type, line, color, width){\r\n            switch (type){\r\n                case 'line':\r\n                    return Lure.Chart.GetPathLine(points, line, color, width);\r\n                case 'bar':\r\n                    return Lure.Chart.GetPathBar(points, line, color, width);\r\n                case 'pie':\r\n                    return '';\r\n            }\r\n        }\r\n        static GetPathLine(points, line, color, width, isDots=true){\r\n            const n = points.length;\r\n\r\n            let xs = [];        //x\r\n            let ys = [];        //y\r\n            let dys = [];       //dx\r\n            let dxs = [];       //dy\r\n            let ds = [];        //derivative\r\n            let ms = [];        //desired slope (m) at each point using Fritsch-Carlson method\r\n            for(let i = 0; i < n; i++) {\r\n                xs[i] = points[i][0];\r\n                ys[i] = points[i][1];\r\n            }\r\n            // Calculate deltas and derivative\r\n            for(let i = 0; i < n - 1; i++) {\r\n                dys[i] = ys[i + 1] - ys[i];\r\n                dxs[i] = xs[i + 1] - xs[i];\r\n                ds[i] = dys[i] / dxs[i];\r\n            }\r\n            // Determine desired slope (m) at each point using Fritsch-Carlson method\r\n            // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\r\n            ms[0] = ds[0];\r\n            ms[n - 1] = ds[n - 2];\r\n            for(let i = 1; i < n - 1; i++) {\r\n                if(ds[i] === 0 || ds[i - 1] === 0 || (ds[i - 1] > 0) !== (ds[i] > 0)) {\r\n                    ms[i] = 0;\r\n                } else {\r\n                    ms[i] = 3 * (dxs[i - 1] + dxs[i]) / (\r\n                        (2 * dxs[i] + dxs[i - 1]) / ds[i - 1] +\r\n                        (dxs[i] + 2 * dxs[i - 1]) / ds[i]);\r\n                    if(!isFinite(ms[i])) {\r\n                        ms[i] = 0;\r\n                    }\r\n                }\r\n            }\r\n            let d = `M ${xs[0]},${ys[0]}`;\r\n            let dots = '<g class=\"mt-chart-dots\">';\r\n            for(let i = 0; i < n - 1; i++) {\r\n                //console.log(d);\r\n                d += ` C ${xs[i] + dxs[i] / 3},${ys[i] + ms[i] * dxs[i] / 3} ${xs[i + 1] - dxs[i] / 3},${ys[i + 1] - ms[i + 1] * dxs[i] / 3} ${xs[i + 1]},${ys[i + 1]}`;\r\n                if (isDots)\r\n                    dots += Lure.Chart.GetPathLineDot(xs[i] , ys[i], line, i, color, width );\r\n            }\r\n            dots += '</g>';\r\n            //return d;\r\n            //console.log(d);\r\n            return `<g class=\"mt-chart-serie\"><path data-line=\"${line}\" d=\"${d}\" fill=\"none\" stroke=\"${color}\" stroke-width=\"${width}\"></path> ${dots}</g>`;\r\n        }\r\n        static GetPathLineDot(x,y, i,j, color, width){\r\n            return `<circle class=\"mt-chart-point\" data-line=\"${i}\" data-item=\"${j}\" cx=\"${x}\" cy=\"${y}\" r=\"${width}\" stroke=\"${color}\" stroke-width=\"2\" fill=\"#fff\" ></circle>`\r\n\r\n        }\r\n        static GetPathBar(points, line, color, width){\r\n            const wd = 30;\r\n            console.log('GetPathBar', points);\r\n            // return '';\r\n            let p = `<path data-line=\"${line}\" d=${0} fill=\"${color}\" stroke=\"${color}\" stroke-width=\"${width}\"></path>`;\r\n            // let d = `M ${points[0][0]}  ${points[0][1]}`;\r\n            let dots = '';\r\n            for (let i = 0; i < points.length; i++){\r\n                let d =`M ${points[i][0]} ${points[i][1]} L ${points[i][0]} ${points[i][1]}`;\r\n                dots += Lure.Chart.GetPathLineDot(points[i][0] , points[i][1], line, i, color, width );\r\n            }\r\n            // debugger;\r\n            return dots;\r\n        }\r\n\r\n\r\n        /*builder*/\r\n        static MakeLegend(Serie, i){\r\n            return `<div class=\"mt-chart-legend__item row\">\r\n                          <input class=\"mt-legend-checkbox\" type=\"checkbox\" checked=\"checked\" id=\"legcheck${Serie.Name}${i}\">\r\n                          <div class=\"mt-legend-icon\" style=\"background-color: ${Serie.Color}\"></div>\r\n                          <label class=\"mt-legend-label\" for=\"legcheck${Serie.Name}${i}\">${Serie.Name}</label>\r\n                        </div>`;\r\n        }\r\n\r\n        static GetGrid(sizeX, sizeY){\r\n            let grid = ``;\r\n            for (let i = 0; i < sizeY; i++){\r\n                grid += `<div class=\"mt-chart__grid-line row flex-100 flex-between\">`;\r\n                for (let j = 0; j < sizeX; j++) {\r\n                    grid += `<div class='mt-chart__grid-item flex-100'></div>`;\r\n                }\r\n                grid += `</div>`;\r\n            }\r\n            grid += ``;\r\n            return grid;\r\n        }\r\n    }\r\n};\r\n\r\nLure.Chart = Lure.Plugin.Chart.Chart;\r\n\r\n\r\nLure.__GenegateString = function () {\r\n    let gen = Math.random().toString(36).replace(\"0.\", '').replace(/[\\d]+/, '').substring(0,1);\r\n    if (Lure.Select(`#${gen}`)){\r\n        gen = Lure.__GenegateString();\r\n    }\r\n    return gen;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}