{"version":3,"sources":["lure.content.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Lure","Plugin","Content","Version","LureContent","_ref","MakeContent","Controller","Array","isArray","Data","this","CreateElementFromString","replace","match","group","x","matche","Target","appendChild","construct","Type","Name","AllContents","ContentList","Refresh","bind","Select","s","$this","SelectAll","GetParent","stringName","arguments","undefined","content","Parent","GetContent","parent","found","searcher","isContent","GetIndex","HTMLElement","slice","call","parentElement","children","indexOf","AddEventListener","eventName","selector","func","AddEventListenerGlobal","AddTutor","buttonTutorStarter","MonsieurTutor","_SortBy","f","data","console","log","sort","a","b","_Sorting","Sorted","kf","hasOwnProperty","classList","remove","add","_FilterBy","p","performance","now","filters","_d","_Filter","_DataDefault","_loop","Filter","filter","toString","toLowerCase","_sorter","_Data","PageSize","_PageSize","_PageCursor","_Rebuilder","mr","PerformanceNow","Props","k","GetSet","getOwnPropertyDescriptor","Methods","Show","e","isActive","Control","Active","style","window","getComputedStyle","duration","eval","transitionDuration","durationAni","animationDuration","isVisible","forEach","item","Hide","Dialog","_DialogCount","DialogWrapper","document","body","onclick","zIndexWrapper","parseInt","zIndex","zIndexContent","Number","isNaN","DialogBlur","background","DialogAnimation","BeforeShow","Shower","display","clearTimeout","__private","ToggleTimer","setTimeout","Disactive","Hider","Toggle","OnClick","SubContent","cname","TitleContent","Title","Visible","isController","isHasEditable","_EditablesEventListenerRun","Sorting","_loop2","addEventListener","info","Filtering","_loop3","innerHTML","querySelector","value","push","from","contains","AfterBuild","_ref$Target","_ref$Content","_ref$CSS","CSS","_ref$Name","_ref$Global","Global","_ref$Title","_ref$Type","_ref$Visible","_ref$SubContent","_ref$Dialog","_ref$DialogWrapper","_ref$DialogBlur","_ref$DialogAnimation","_ref$Show","_ref$Hide","_ref$Shower","_ref$Hider","_ref$BeforeShow","_ref$Refresh","_ref$Sorting","_ref$Filtering","_ref$OnClick","_ref$Controller","_ref$Control","_ref$Props","_ref$Methods","_ref$GetSet","_ref$AfterBuild","_ref$Disabled","Disabled","_ref$Parent","GetFileText","then","node","createElement","RefreshOne","removeData","Remove","itemData","extraclass","isPrepend","addData","Add","index","Edit","get","set","t","Items","LureControl","control","owner","_this","controls","_loop4","Math","random","substr","_Content","isGlobal","OnChange","currentTarget","onchange","type","Templator","_ref2","_ref2$Target","_ref2$Data","_ref2$ListElement","ListElement","_ref2$EmptyMessage","EmptyMessage","_ref2$EmptyHide","EmptyHide","_ref2$PageSize","_ref2$DataCount","DataCount","_ref2$PageGet","PageGet","_ref2$ShowAllButton","ShowAllButton","_ref2$LineSave","LineSave","line","property","newValue","callback","_ref2$LineAdd","LineAdd","dataObject","_ref2$EditModeSwitch","EditModeSwitch","_ref2$NoAnimation","DataSaveAll","NoAnimation","_ref2$NoBuild","NoBuild","_ref2$BeforeBuild","BeforeBuild","_ref2$AfterBuild","_ref2$AfterAdd","AfterAdd","_ref2$Parent","_DataCount","_PageGet","isShowAllButton","isNoAnimaton","isEmptyHide","Dictionary","_Dictionary","Refresher","j","fields","isAttribute","NewValue","BuildValue","obj","attributes","split","lines","querySelectorAll","NextCount","Limit","paginator","tag","empty","_LineBuilder","CreateElementsFromString","tagName","also","showAll","isTable","colspan","btnNext","BuildWithIt","Build","btnNextAll","FieldAdd","element","elemAttributes","WhatFields","name","Compile","childNodes","PageCursor","newItem","itemOld","parentNode","replaceChild","fragment","createDocumentFragment","elem","dataset","unshift","prepend","splice","SwitchToEditMode","Editable","EditMode","AddEdits","isListElementCssSelector","outerHTML","list_element","list_elementClassed","pos","checked","click","MonsieurController","AllChildren","TemplatorList","TreeBuilder","_ref3","_ref3$Target","_ref3$Data","_ref3$ListElement","_ref3$Drop","Drop","_ref3$SubSelector","SubSelector","_ref3$SubSelectorHand","SubSelectorHandler","_ref3$BeforeBuild","_ref3$AfterBuild","_ref3$Parent","SubTreeClass","Lvl","Branch","html","entag","LineBuilder","Index","BuildElement","indexJ","extra","$lvl","$key","$index","$j","ObjItem","sub"],"mappings":"AAAA,YAIA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,KAiBhiBkB,MAAKC,OAAOC,SACRC,QAAS,QACTD,QAAAA,WACI,QAAAE,aAAAC,MA6EI,QAASC,aAAYJ,GACE,OAAfK,YAAuBC,MAAMC,QAAQF,WAAWG,MAEhDC,KAAKT,QAAUF,KAAKY,wBAAwBV,GAExB,OAAfK,YAAwBC,MAAMC,QAAQF,WAAWG,QAQtDR,EAAUA,EAAQW,QAAQ,4BAA6B,SAAUC,EAAOC,GAIpE,GAAMC,GAAIF,EAAMD,QAAQ,cAAe,SAAUI,GAC7C,MAAA,SAAgBA,EAAhB,WAEJ,OAAOD,KAEXL,KAAKT,QAAUF,KAAKY,wBAAwBV,IAGhDS,KAAKO,OAAOC,YAAYR,KAAKT,SAmBjC,QAASkB,aACLT,KAAKU,KAAOA,KACZV,KAAKW,KAAOA,KACZX,KAAKY,YAAcvB,KAAKwB,YAQxBb,KAAKc,QAAUA,QAAQC,KAAKf,MAO5BA,KAAKgB,OAAS,SAASC,GACnB,MAAO5B,MAAK2B,OAAOC,EAAGC,MAAM3B,UAQhCS,KAAKmB,UAAY,SAASF,GACtB,MAAO5B,MAAK8B,UAAUF,EAAGC,MAAM3B,UAQnCS,KAAKoB,UAAY,WAEb,IAFwC,GAAlBC,GAAkBC,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,GAAP,OAC7BE,EAAUN,MACY,OAAnBM,EAAQC,QAAmBD,EAAQb,OAASU,GAC/CG,EAAUA,EAAQC,MACtB,OAAOD,IAQXxB,KAAK0B,WAAa,WAA6B,GAAnBL,GAAmBC,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,GAAR,OAC/BK,EAAS3B,KAAKoB,UAAUC,EAC5B,IAAIM,EAAOhB,OAASU,EAChB,MAAOM,EAEX,IAAIC,GAAQD,CACZ,IAAmB,SAAfN,EACA,MAAOO,EACX,IAWIC,GAAW,QAAXA,GAAqBL,GAErB,IAAI,GAAIvC,KAAOuC,GACX,GAAY,WAARvC,GAAsBuC,EAAQvC,IAAQuC,EAAQvC,GAAK6C,UAAU,CAE7D,GAAIN,EAAQvC,GAAK0B,OAASU,EACtB,MAAOG,GAAQvC,EACnB2C,GAAQC,EAASL,EAAQvC,IAIjC,MAAO2C,GAEX,OAAOC,GAASD,IASpB5B,KAAK+B,SAAW,SAAUC,GAEtB,MADAA,GAAcd,MAAMF,OAAOgB,GACpBnC,MAAMT,UAAU6C,MAAMC,KAAMF,EAAYG,cAAcC,UAAWC,QAAQL,IASpFhC,KAAKsC,iBAAmB,SAAUC,EAAWC,EAAUC,GACnDpD,KAAKqD,uBAAuBH,EAAUC,EAASC,EAAMvB,MAAM3B,QAAS2B,QAOxElB,KAAK2C,SAAW,SAAUC,GACtB1B,MAAM2B,cAAgB,GAAIA,eAAc3B,MAAMF,OAAO4B,GAAqB1B,MAAM3B,UAGpFS,KAAK8C,QAAU,SAASC,EAAGC,GAAuB1B,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,IAAAA,UAAA,EAC9C,MAAI0B,EAAKtE,OAAS,GAAlB,CAEAuE,QAAQC,IAAI,UAAWH,GACvBC,EAAKG,KAAK,SAAUC,EAAGC,GACnB,MAAUD,GAAEL,GAAKM,EAAEN,IAAO7B,MAAMoC,SAASP,GAAGQ,OACjC,EACDH,EAAEL,GAAKM,EAAEN,IAAO7B,MAAMoC,SAASP,GAAGQ,UAElCH,EAAEL,GAAKM,EAAEN,KAAQ7B,MAAMoC,SAASP,GAAGQ,UAEnCH,EAAEL,GAAKM,EAAEN,KAAQ7B,MAAMoC,SAASP,GAAGQ,OAClC,EACJ,IAEXrC,MAAMoC,SAASP,GAAGQ,QAAUrC,MAAMoC,SAASP,GAAGQ,MAC9C,KAAK,GAAIC,KAAMtC,OAAMoC,SACbpC,MAAMoC,SAASG,eAAeD,IAAc,YAAPA,IACrCtC,MAAMoC,SAASE,GAAIjD,OAAOmD,UAAUC,OAAO,iBAC3CzC,MAAMoC,SAASE,GAAIjD,OAAOmD,UAAUC,OAAO,mBACvCZ,IAAKS,IACLtC,MAAMoC,SAASE,GAAID,QAAS,GAGxCrC,OAAMoC,SAASP,GAAGxC,OAAOmD,UAAUE,IAAI1C,MAAMoC,SAASP,GAAGQ,OAAS,kBAAkB,iBACpFrC,MAAMJ,YAEVd,KAAK6D,UAAY,WACb,GAAIC,GAAIC,YAAYC,MAChBC,EAAU,EACVC,EAAKhD,MAAMiD,QAAQC,aAAanC,MAAM,GAHjBoC,EAAA,SAIhBtB,GACD7B,MAAMiD,QAAQV,eAAeV,IAAM7B,MAAMiD,QAAQpB,GAAGuB,QAAqC,KAA3BpD,MAAMiD,QAAQpB,GAAGuB,SAC/EJ,EAAKA,EAAGK,OAAO,SAAAlE,GAAA,MAAGA,GAAE0C,GAAGyB,WAAWC,cAAcpC,QAAQnB,MAAMiD,QAAQpB,GAAGuB,aACzEL,KAHR,KAAK,GAAIlB,KAAK7B,OAAMiD,QAAQE,EAAnBtB,EAMTE,SAAQC,IAAIgB,GACI,IAAZD,GAEI/C,MAAMoC,SAASoB,UACfxD,MAAMoC,SAASpC,MAAMoC,SAASoB,SAASnB,QAAUrC,MAAMoC,SAASpC,MAAMoC,SAASoB,SAASnB,OACxFrC,MAAM4B,QAAQ5B,MAAMoC,SAASoB,QAASxD,MAAMtB,WAAW+E,QAE3DzD,MAAMtB,WAAWkB,YAIbI,MAAMoC,SAASoB,UACfxD,MAAMoC,SAASpC,MAAMoC,SAASoB,SAASnB,QAAUrC,MAAMoC,SAASpC,MAAMoC,SAASoB,SAASnB,OACxFrC,MAAM4B,QAAQ5B,MAAMoC,SAASoB,QAASR,IAE1ChD,MAAMtB,WAAWgF,SAAW1D,MAAM2D,UAClC3D,MAAMtB,WAAWkF,YAAc,EAC/B5D,MAAMtB,WAAWmF,WAAWb,IAIhCc,GAAGC,eAAenB,EAAG,aAIzBoB,MAAMhD,KAAKlC,KAEX,KAAI,GAAImF,KAAKC,QACTrG,OAAOC,eAAekC,MAAOiE,EAAGpG,OAAOsG,yBAAyBD,OAAQD,GAiG5E,IA9FAG,QAAQpD,KAAKlC,MAEbA,KAAKuF,KAAO,SAASC,GACjBxF,KAAKyF,UAAW,EACZzF,KAAK0F,SACL1F,KAAK0F,QAAQC,QACjB,IAAIC,OAAQC,OAAOC,iBAAiB5E,MAAM3B,SACtCwG,SAAWC,KAAKJ,MAAMK,mBAAmB/F,QAAQ,KAAM,MAAMA,QAAQ,IAAK,UAC1EgG,YAAcF,KAAKJ,MAAMO,kBAAkBjG,QAAQ,KAAM,MAAMA,QAAQ,IAAK,SAYhF,IAXI6F,SAAWG,cACXH,SAAWG,aACfH,WACmB,YAAf7E,MAAMR,MAAuBQ,MAAMkF,WAEnC/G,KAAKwB,YAAYK,MAAMR,MAAM2F,QAAQ,SAACC,GAE7BA,IAAUpF,OAASoF,EAAKb,UACzBa,EAAKC,SAGbC,OAAO,CAIP,GAHAnH,KAAKoH,eACLvF,MAAM3B,QAAQmE,UAAUE,IAAI,eAExB8C,cAAc,CACdxF,MAAMwF,cAAgBrH,KAAKY,wBAAwB,gCACnD0G,SAASC,KAAKpG,YAAYU,MAAMwF,eAChCxF,MAAMwF,cAAcG,QAAU3F,MAAMqF,KAAKxF,KAAKG,MAE9C,IAAI4F,eAAgBC,SAASlB,OAAOC,iBAAiB5E,MAAMwF,eAAeM,QACtEC,cAAgBF,SAASlB,OAAOC,iBAAiB5E,MAAM3B,SAASyH,SAChEE,OAAOC,MAAMF,gBAAkBA,cAAgBH,iBAC/C5F,MAAM3B,QAAQqG,MAAMoB,OAASF,cAAc,GAG/CM,aAEAlG,MAAMwF,cAAcd,MAAMyB,WAAa,OACvChI,KAAK2B,OAAOoG,YAAY1D,UAAUE,IAAI,cAEtC0D,iBACApG,MAAM3B,QAAQmE,UAAUE,IAAI0D,iBAGpCC,WAAWrF,KAAKhB,MAAOsE,GACvBgC,OAAOtF,KAAKhB,MAAOsE,GACnBtE,MAAM3B,QAAQqG,MAAM6B,QAAU,GAC9BC,aAAaxG,MAAMyG,UAAUC,aAEhB,OAATrC,OACArE,MAAMyG,UAAUC,YAAcC,WAAW,WACrCtC,KAAKrD,KAAKhB,MAAOsE,IACnBO,YAGV/F,KAAKuG,KAAO,SAASf,GACjBxF,KAAKyF,UAAW,EACZzF,KAAK0F,SACL1F,KAAK0F,QAAQoC,WACjB,IAAIlC,OAAQC,OAAOC,iBAAiB5E,MAAM3B,SACtCwG,SAAWC,KAAKJ,MAAMK,mBAAmB/F,QAAQ,KAAM,MAAMA,QAAQ,IAAK,UAC1EgG,YAAcF,KAAKJ,MAAMO,kBAAkBjG,QAAQ,KAAM,MAAMA,QAAQ,IAAK,SAC5E6F,UAAWG,cACXH,SAAWG,aACfH,WACIS,SAEAnH,KAAKoH,eACDvF,MAAMwF,eACNxF,MAAMwF,cAAc/C,SACpByD,YAAe/H,KAAKoH,aAAe,GACnCpH,KAAK2B,OAAOoG,YAAY1D,UAAUC,OAAO,cAGjDoE,MAAM7F,KAAKhB,MAAOsE,GAClBkC,aAAaxG,MAAMyG,UAAUC,aAChB,OAATrB,OACArF,MAAMyG,UAAUC,YAAcC,WAAW,WACrCtB,KAAKrE,KAAKhB,MAAOsE,IAClBO,YAGX/F,KAAKgI,OAAS,SAASxC,GACftE,MAAMkF,UACNlF,MAAMqF,KAAKf,GAEXtE,MAAMqE,KAAKC,IAGnBxF,KAAK2H,aACL3H,KAAK2H,UAAUC,YAAc,KAC7B5H,KAAK0F,QAAU,GAAIrG,MAAKC,OAAOC,QAAQmG,QAAQA,QAASxE,OACxDlB,KAAKT,QAAQsH,QAAUoB,QAASA,QAAQlH,KAAKG,OAAS,KAElDrB,MAAMC,QAAQoI,YACd,IAAK,GAAIzJ,GAAI,EAAGA,EAAIyJ,WAAWxJ,OAAQD,IAE1ByJ,WAAWzJ,GAAGgD,SACfyG,WAAWzJ,GAAGgD,OAASP,OAE3BA,MAAMgH,WAAWzJ,GAAGkC,MAAQ,GAAItB,MAAKE,QAAS2I,WAAWzJ,QAKjE,KAAK,GAAI0J,SAASD,YACdA,WAAWC,OAAO1G,OAASP,MAC3BgH,WAAWC,OAAOxH,KAAOwH,MAEzBjH,MAAMiH,OAAS,GAAI9I,MAAKE,QAAQ2I,WAAWC,OAuCnD,IAnCAnI,KAAKoI,aAAe/I,KAAK2B,OAAOqH,MAAOrI,KAAKT,SAE7B,YAATmB,MAAsB4H,WAAY,GAAW9B,QAE/B,YAAT9F,MAAsB4H,WAAY,GAAW9B,QAAU8B,WAAY,KAC1EA,SAAU,GAFVA,SAAU,EAIVA,SACAtI,KAAKT,QAAQqG,MAAM6B,QAAU,GACzBzH,KAAK0F,SACL1F,KAAK0F,QAAQC,WAGjB3F,KAAKyF,UAAW,EAChBzF,KAAKT,QAAQqG,MAAM6B,QAAU,QAE7B7H,aACIA,WAAW2I,cACXvI,KAAKJ,WAAaA,WAClBI,KAAKJ,WAAW6B,OAASzB,OAGpBJ,WAAWW,SACZX,WAAWW,OAASP,KAAKT,SACxBK,WAAWc,OACZd,WAAWc,KAAO,aACtBd,WAAW6B,OAASzB,KACpBA,KAAKJ,WAAa,GAAIP,MAAKC,OAAOC,QAAQK,WAAWA,WAAWc,MAAMd,aAEtEI,KAAKJ,WAAW4I,eAEhBnJ,KAAKoJ,2BAA2BvH,MAAM3B,UAI1CmJ,QAAQ,CACRxH,MAAMoC,YACNpC,MAAMoC,SAASoB,QAAU,IAFjB,IAAAiE,QAAA,SAGC5F,GACD2F,QAAQjF,eAAeV,IAAY,YAANA,IAC7B7B,MAAMoC,SAASP,IACXxC,OAAQW,MAAMF,OAAO0H,QAAQ3F,IAC7BQ,QAAQ,GAEZrC,MAAMoC,SAASP,GAAGxC,OAAOmD,UAAUE,IAAI,cACvC1C,MAAMoC,SAASP,GAAGxC,OAAOqI,iBAAiB,QAAS,WAC/C1H,MAAMoC,SAASoB,QAAU3B,EACzB7B,MAAM4B,QAAQC,EAAG7B,MAAMtB,WAAW+E,UAT9C,KAAK,GAAI5B,KAAK2F,SAAQC,OAAb5F,EAaTE,SAAQ4F,KAAK,cAAe3H,MAAMoC,UAEtC,GAAIwF,UAAU,CACV5H,MAAMiD,WACNjD,MAAMiD,QAAQC,aAAelD,MAAMtB,WAAW+E,MAAM1C,MAAM,EAFhD,IAAA8G,QAAA,SAGDhG,GACD+F,UAAUrF,eAAeV,IAAY,YAANA,IAC/B7B,MAAMiD,QAAQpB,IACVxC,OAAQW,MAAMF,OAAO8H,UAAU/F,IAC/BuB,OAAQ,IAEZpD,MAAMiD,QAAQpB,GAAGxC,OAAOmD,UAAUE,IAAI,gBACtC1C,MAAMiD,QAAQpB,GAAGxC,OAAOyI,UAAY,iDACpC9H,MAAMiD,QAAQpB,GAAGxC,OAAO0I,cAAc,uBAAuBL,iBAAiB,QAAS,SAAUpD,GAE7FtE,MAAMiD,QAAQpB,GAAGuB,OAASkB,EAAEjH,OAAO2K,MAAMzE,cACzCvD,MAAM2C,eAXlB,KAAK,GAAId,KAAK+F,WAAUC,OAAfhG,GAiBR1D,KAAKwB,YAAYK,MAAMR,QACxBrB,KAAKwB,YAAYK,MAAMR,UAC3BrB,KAAKwB,YAAYK,MAAMR,MAAMyI,KAAKnJ,MAGlCH,MAAMuJ,KAAKpJ,KAAKT,QAAQ6C,UAAUiE,QAAQ,SAASC,GAC3CA,EAAK5C,UAAU2F,SAAS,WACxB/C,EAAKO,QAAU,SAAUrB,GACrBtE,MAAMqF,KAAKf,OAIvBqC,WAAW,WACPyB,WAAWpH,KAAKhB,QACjB,GA/cX,GAAAqI,aAAA7J,KArCgBa,OAAAA,OAqChBgB,SAAAgI,YArC6B,KAqC7BA,YAAAC,aAAA9J,KApCgBH,QAAAA,QAoChBgC,SAAAiI,aApC6B,KAoC7BA,aAAAC,SAAA/J,KAnCgBgK,IAAAA,IAmChBnI,SAAAkI,SAnC6B,GAmC7BA,SAAAE,UAAAjK,KAlCgBiB,KAAAA,KAkChBY,SAAAoI,UAlC6B,KAkC7BA,UAAAC,YAAAlK,KAjCgBmK,OAAAA,OAiChBtI,SAAAqI,aAAAA,YAAAE,WAAApK,KAhCgB2I,MAAAA,MAgChB9G,SAAAuI,WAhC6B,GAgC7BA,WAAAC,UAAArK,KA/BgBgB,KAAAA,KA+BhBa,SAAAwI,UA/B6B,UA+B7BA,UAAAC,aAAAtK,KA9BgB4I,QAAAA,QA8BhB/G,SAAAyI,aA9B6BzI,OA8B7ByI,aAAAC,gBAAAvK,KA7BgBwI,WAAAA,WA6BhB3G,SAAA0I,mBAAAA,gBAAAC,YAAAxK,KA5BgB8G,OAAAA,OA4BhBjF,SAAA2I,aAAAA,YAAAC,mBAAAzK,KA3BgBgH,cAAAA,cA2BhBnF,SAAA4I,oBAAAA,mBAAAC,gBAAA1K,KA1BgB0H,WAAAA,WA0BhB7F,SAAA6I,gBA1B6B,KA0B7BA,gBAAAC,qBAAA3K,KAzBgB4H,gBAAAA,gBAyBhB/F,SAAA8I,qBAzBkC,KAyBlCA,qBAAAC,UAAA5K,KAxBgB6F,KAAAA,KAwBhBhE,SAAA+I,UAxB6B,KAwB7BA,UAAAC,UAAA7K,KAvBgB6G,KAAAA,KAuBhBhF,SAAAgJ,UAvB6B,KAuB7BA,UAAAC,YAAA9K,KAtBgB8H,OAAAA,OAsBhBjG,SAAAiJ,YAtB6B,WAAWxK,KAAKT,QAAQqG,MAAM6B,QAAU,IAsBrE+C,YAAAC,WAAA/K,KArBgBqI,MAAAA,MAqBhBxG,SAAAkJ,WArB6B,WAAWzK,KAAKT,QAAQqG,MAAM6B,QAAU,QAqBrEgD,WAAAC,gBAAAhL,KApBgB6H,WAAAA,WAoBhBhG,SAAAmJ,gBApB6B,aAoB7BA,gBAAAC,aAAAjL,KAnBgBoB,QAAAA,QAmBhBS,SAAAoJ,aAnB6B,SAAS3H,EAAMvE,GACpBuB,KAAKJ,YACLI,KAAKJ,WAAWkB,QAAQkC,EAAMvE,IAiBtDkM,aAAAC,aAAAlL,KAfgBgJ,QAAAA,QAehBnH,SAAAqJ,cAAAA,aAAAC,eAAAnL,KAdgBoJ,UAAAA,UAchBvH,SAAAsJ,gBAAAA,eAAAC,aAAApL,KAbgBuI,QAAAA,QAahB1G,SAAAuJ,aAb6B,KAa7BA,aAAAC,gBAAArL,KAZgBE,WAAAA,WAYhB2B,SAAAwJ,gBAZ6B,KAY7BA,gBAAAC,aAAAtL,KAXgBgG,QAAAA,QAWhBnE,SAAAyJ,aAX6B,KAW7BA,aAAAC,WAAAvL,KARgBwF,MAAAA,MAQhB3D,SAAA0J,WAR6B,aAQ7BA,WAAAC,aAAAxL,KAPgB4F,QAAAA,QAOhB/D,SAAA2J,aAP6B,aAO7BA,aAAAC,YAAAzL,KANgB0F,OAAAA,OAMhB7D,SAAA4J,eAAAA,YAAAC,gBAAA1L,KALgB4J,WAAAA,WAKhB/H,SAAA6J,gBAL6B,aAK7BA,gBAAAC,cAAA3L,KAJgB4L,SAAAA,SAIhB/J,SAAA8J,eAAAA,cAAAE,YAAA7L,KAHgB+B,OAAAA,OAGhBF,SAAAgK,YAH6B,KAG7BA,WACI,IADJtN,gBAAA+B,KAAAP,cACQ6L,SAAJ,CAEA,GAAIpK,OAAQlB,IAiEZ,IAhEAA,KAAK8B,WAAY,EACjB9B,KAAKyF,UAAW,EAIhBzF,KAAKyB,OAASA,OACC,OAAXA,QACAzB,KAAKO,OAASsJ,OAAQxK,KAAK2B,OAAOT,QAAUlB,KAAK2B,OAAOT,OAAQP,KAAKyB,OAAOlC,SACxD,OAAhBS,KAAKO,SACLP,KAAKO,OAASP,KAAKyB,OAAOlC,UAEd,OAAXgB,SACLP,KAAKO,OAASlB,KAAK2B,OAAOT,SAId,OAAZhB,SACAS,KAAKT,QAAUS,KAAKO,OACpBE,UAAUyB,KAAKhB,QAEkB,OAA7B3B,QAAQY,MAAM,YACd8C,QAAQC,IAAI,YACZ7D,KAAKmM,YAAYjM,SAASkM,KAAK,SAAApL,GAG3BV,YAAYuC,KAAKhB,MAAOb,GACxBI,UAAUyB,KAAKhB,WAGnBvB,YAAYuC,KAAKhB,MAAO3B,SACxBkB,UAAUyB,KAAKhB,QAkCF,OAAjBlB,KAAKT,SAAoC,OAAhBS,KAAKO,OAG9B,YADAP,KAAK8B,WAAY,EAQrB,IAAY,KAAR4H,IAAW,CACX,GAAIgC,MAAO/E,SAASgF,cAAc,QAClCD,MAAK1C,UAAYU,IACjB/C,SAASC,KAAKpG,YAAYkL,QAxHtC,MAAArN,cAAAoB,cAAAR,IAAA,aAAAiK,MAAA,SAihBezK,GACHuB,KAAKJ,YACLI,KAAKJ,WAAWgM,WAAWnN,MAnhBvCQ,IAAA,SAAAiK,MAAA,SAqhBWzK,EAAGoN,GACF7L,KAAKJ,YACLI,KAAKJ,WAAWkM,OAAOrN,EAAGoN,MAvhBtC5M,IAAA,MAAAiK,MAAA,SAyhBQ6C,GAAgE,GAAtDC,GAAsD1K,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,IAAAA,UAAA,GAAlC2K,EAAkC3K,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,IAAAA,UAAA,GAAf4K,IAAe5K,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,KAAAA,UAAA,EAC5DtB,MAAKJ,YACLI,KAAKJ,WAAWuM,IAAIJ,EAAUC,EAAYC,EAAWC,MA3hBjEjN,IAAA,OAAAiK,MAAA,SAoiBS6C,EAAUK,GACPpM,KAAKJ,YACLI,KAAKJ,WAAWyM,KAAKN,EAAUK,MAtiB3CnN,IAAA,UAAAiK,MAAA,WAyiBQlJ,KAAKT,QAAQoE,SACb3D,KAAK0F,QAAQoC,kBACN9H,MAAKJ,iBACLI,MAAK0F,WA5iBpBzG,IAAA,YAAAqN,IAAA,WA2fQ,MAAOjN,MAAK+G,UAAUpG,KAAKT,YA3fnCN,IAAA,QAAAqN,IAAA,WA8fQ,MAAOtM,MAAKoI,aAAaY,WA9fjCuD,IAAA,SAggBcC,GACNxM,KAAKoI,aAAaY,UAAYwD,KAjgBtCvN,IAAA,OAAAqN,IAAA,WAogBQ,MAAItM,MAAKJ,WACEI,KAAKJ,WAAWG,KACpB,MAtgBfwM,IAAA,SAwgBavJ,GACDhD,KAAKJ,aACLI,KAAKJ,WAAWG,KAAOiD,MA1gBnC/D,IAAA,QAAAqN,IAAA,WA6gBQ,MAAItM,MAAKJ,WACEI,KAAKJ,WAAW6M,MACpB,SA/gBfhN,eA+iBAiG,QAAAA,WACI,QAAAgH,GAAYC,EAASC,GAAM,GAAAC,GAAA7M,IAAA/B,iBAAA+B,KAAA0M,GACP,OAAZC,GAEAA,EAAQjO,OAAS,IACrB,WAEI,IAAK,GADDoO,GAAAA,EADRC,EAAA,SAEatO,GAEAkO,EAAQlO,GAAGkC,OACZgM,EAAQlO,GAAGkC,KAAO,WAAaqM,KAAKC,SAASzI,SAAS,IAAItE,QAAQ,WAAY,IAAIgN,OAAO,EAAG,KAChGJ,EAASH,EAAQlO,GAAGkC,OAChBpB,QAASF,KAAK8B,UAAUwL,EAAQlO,GAAG8B,QACnC4M,SAAUR,EAAQlO,GAAG8B,OACrBG,KAAMiM,EAAQlO,GAAGiC,KAAOiM,EAAQlO,GAAGiC,KAAO,UAC1C0M,SAAUT,EAAQlO,GAAGoL,OACrB5B,QAAS0E,EAAQlO,GAAGwJ,QAAU0E,EAAQlO,GAAGwJ,QAAU2E,EAAMrH,KACzD8H,SAAUV,EAAQlO,GAAG4O,SACrB1H,OAAQ,WACJtG,KAAK8B,UAAUwL,EAAQlO,GAAG8B,QAAQ8F,QAAQ,SAAUC,GAChDA,EAAK5C,UAAUE,IAAI,aAG3BkE,UAAW,WACPzI,KAAK8B,UAAUwL,EAAQlO,GAAG8B,QAAQ8F,QAAQ,SAAUC,GAChDA,EAAK5C,UAAUC,OAAO,cAMlCmJ,EAASH,EAAQlO,GAAGkC,MAAMpB,QAAQ8G,QAAQ,SAAUC,GAChDA,EAAK5C,UAAUE,IAAI,aAEnB+I,EAAQlO,GAAGoL,OAEXxK,KAAKqD,uBAAuB,QAASiK,EAAQlO,GAAG8B,OAAQ,SAAUiF,GAC9DnG,KAAK8B,UAAUwL,EAAQlO,GAAG8B,QAAQ8F,QAAQ,SAAUC,GAChDA,EAAK5C,UAAUC,OAAO,YAE1B6B,EAAEjH,OAAOmF,UAAUE,IAAI,UACnBkJ,EAASH,EAAQlO,GAAGkC,MAAMsH,SAC1B6E,EAASH,EAAQlO,GAAGkC,MAAMsH,QAAQ/F,KAAK0K,EAAOpH,KAItDsH,EAASH,EAAQlO,GAAGkC,MAAMpB,QAAQ8G,QAAQ,SAAUC,GAChDA,EAAKO,QAAU,SAAUrB,GACrBnG,KAAKwB,YAAY+L,EAAMlM,MAAM2F,QAAQ,SAACC,GAE7BA,IAAUsG,GAEPtG,EAAKZ,SACLY,EAAKZ,QAAQoC,cAIzBgF,EAASH,EAAQlO,GAAGkC,MAAMpB,QAAQ8G,QAAQ,SAAUC,GAChDA,EAAK5C,UAAUC,OAAO,YAE1B6B,EAAE8H,cAAc5J,UAAUE,IAAI,UAC9BkJ,EAASH,EAAQlO,GAAGkC,MAAMsH,QAAQ/F,KAAK0K,EAAOpH,MAMtDmH,EAAQlO,GAAG4O,WAEPV,EAAQlO,GAAGoL,OACXxK,KAAKqD,uBAAuB,SAAUiK,EAAQlO,GAAG8B,OAAQ,SAAUiF,GAC/DmH,EAAQlO,GAAG4O,SAASnL,KAAK0K,EAAOpH,KAIpCsH,EAASH,EAAQlO,GAAGkC,MAAMpB,QAAQ8G,QAAQ,SAAUC,GAChDA,EAAKiH,SAAW,SAAU/H,GACtBmH,EAAQlO,GAAG4O,SAASnL,KAAK0K,EAAOpH,QAtE3C/G,EAAI,EAAGA,EAAIkO,EAAQjO,OAAQD,IACpCsO,EADStO,MAPrB,MAAAJ,cAAAqO,IAAAzN,IAAA,SAAAiK,MAAA,WAqF4B,GAAjBsE,GAAiBlM,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,GAAV,SACV,KAAK,GAAI6D,KAAKnF,MACNA,KAAKmF,GAAGzE,OAAS8M,GACjBxN,KAAKmF,GAAG5F,QAAQ8G,QAAQ,SAAUC,GAC9BA,EAAK5C,UAAUE,IAAI,eAzFvC3E,IAAA,YAAAiK,MAAA,WA4F+B,GAAjBsE,GAAiBlM,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,GAAV,SACb,KAAK,GAAI6D,KAAKnF,MACNA,KAAKmF,GAAGzE,OAAS8M,IAEjBxN,KAAKmF,GAAG5F,QAAQ8G,QAAQ,SAAUC,GAC9BA,EAAK5C,UAAUC,OAAO,YAEtB3D,KAAKmF,GAAGiI,UACR/N,KAAK8B,UAAUnB,KAAKmF,GAAGgI,UAAU9G,QAAQ,SAASC,GAC9CA,EAAK5C,UAAUC,OAAO,iBArG9C+I,KA2GA9M,YACI6N,UAAAA,WACI,QAAAA,KAgCA,GAAAC,GAAApM,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,MAAAqM,EAAAD,EA9BQnN,OAAAA,EA8BRgB,SAAAoM,EA9BiB,KA8BjBA,EAAAC,EAAAF,EA7BQ3N,KAAAA,EA6BRwB,SAAAqM,KAAAA,EAAAC,EAAAH,EA5BQI,YAAAA,EA4BRvM,SAAAsM,EA5BsB,gBA4BtBA,EAAAE,EAAAL,EA1BQM,aAAAA,EA0BRzM,SAAAwM,EA1BuB,GA0BvBA,EAAAE,EAAAP,EAzBQQ,UAAAA,EAyBR3M,SAAA0M,GAAAA,EAAAE,EAAAT,EAtBQ9I,SAAAA,EAsBRrD,SAAA4M,KAAAA,EAAAC,EAAAV,EArBQW,UAAAA,EAqBR9M,SAAA6M,KAAAA,EAAAE,EAAAZ,EApBQa,QAAAA,EAoBRhN,SAAA+M,EApBkB,KAoBlBA,EAAAE,EAAAd,EAlBQe,cAAAA,EAkBRlN,SAAAiN,GAAAA,EAAAE,EAAAhB,EAhBQiB,SAAAA,EAgBRpN,SAAAmN,EAhBmB,SAASE,EAAMC,EAAUC,GAA0B,GAAhBC,GAAgBzN,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,GAAP,YAAQuG,YAAW,WAAKkH,KAAa,MAgBpGL,EAAAM,EAAAtB,EAfQuB,QAAAA,EAeR1N,SAAAyN,EAfkB,SAASE,GAA4B,GAAhBH,GAAgBzN,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,GAAP,YAAQuG,YAAW,WAAMkH,KAAa,MAetFC,EAAAG,EAAAzB,EAdQ0B,eAAAA,EAcR7N,SAAA4N,EAdyB,KAczBA,EAAAE,GAAA3B,EAbQ4B,YAaR5B,EATQ6B,aAAAA,EASRhO,SAAA8N,GAAAA,EAAAG,EAAA9B,EARQ+B,QAAAA,EAQRlO,SAAAiO,GAAAA,EAAAE,EAAAhC,EANQiC,YAAAA,EAMRpO,SAAAmO,EANsB,aAMtBA,EAAAE,EAAAlC,EALQpE,WAAAA,EAKR/H,SAAAqO,EALqB,aAKrBA,EAAAC,EAAAnC,EAJQoC,SAAAA,EAIRvO,SAAAsO,EAJmB,aAInBA,EAAAE,EAAArC,EAHQjM,OAAAA,EAGRF,SAAAwO,EAHiB,KAGjBA,CAAA9R,iBAAA+B,KAAAyN,EAEI,IAAIvM,GAAQlB,IACZA,MAAKuI,cAAe,EACL,OAAX9G,EACAzB,KAAKT,QAAUF,KAAK2B,OAAOT,EAAQkB,EAAOlC,SAE1CS,KAAKT,QAAUF,KAAK2B,OAAOT,GAC/BP,KAAKO,OAASP,KAAKT,QACnBS,KAAK2E,MAAQ5E,EACbC,KAAKgO,aAAeA,EACpBhO,KAAK8N,YAAc,GAEnB9N,KAAK2P,YAAcA,EAAY5O,KAAKf,MACpCA,KAAKsJ,WAAaA,EAAWvI,KAAKf,MAClCA,KAAK8P,SAAWA,EAAS/O,KAAKf,MAC9BA,KAAKyB,OAASA,EAEdzB,KAAK4E,SAAWA,EAChB5E,KAAK6E,UAAYD,EACjB5E,KAAKgQ,WAAa3B,EAAY,EAAIA,EAAYrO,KAAK2E,MAAMjG,OACzDsB,KAAK8E,YAAc,EACnB9E,KAAKiQ,SAAW1B,EAGhBvO,KAAKiP,QAAUA,EACfjP,KAAK2O,SAAWA,EAChB3O,KAAKU,KAAO,KAGZV,KAAKkQ,gBAAkBzB,EACvBzO,KAAKmQ,aAAeZ,EACpBvP,KAAKoQ,YAAclC,CAGnB,IAAImC,KACJrQ,MAAKsQ,YAAcD,CACnB,IAAME,GAAY,WAETrP,EAAMyD,QACPzD,EAAMyD,SACV,KAAK,GAAIlG,GAAI,EAAGA,EAAI4R,EAAW3R,OAAQD,IAGnC,IAAK,GAAI+R,GAAI,EAAGA,EAAIH,EAAW5R,GAAGgS,OAAO/R,OAAQ8R,IACjD,CACI,GAAIE,GAAcL,EAAW5R,GAAGgS,OAAOD,GAAGjQ,OAAO8B,QAAQ,iBACrDsO,EAAWN,EAAW5R,GAAGgS,OAAOD,GAAGI,WAAW1P,EAAMyD,MACpD+L,GAGAL,EAAW5R,GAAGoS,IAAIC,WAAWT,EAAW5R,GAAGgS,OAAOD,GAAGjQ,OAAOwQ,MAAM,KAAK,IAAI7H,MAAQyH,EAGnFN,EAAW5R,GAAGoS,IAAIR,EAAW5R,GAAGgS,OAAOD,GAAGjQ,QAAU8P,EAAW5R,GAAGgS,OAAOD,GAAGI,WAAW1P,EAAMyD,QAM7G3E,MAAK+E,WAAa,WAA8B,GAApB/B,GAAoB1B,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,GAAbJ,EAAMyD,MACjCqM,EAAQ,EAEc,KAAtB9P,EAAM4D,aACN5D,EAAM3B,QAAQ0R,iBAAiB,sCAAsC5K,QAAQ,SAASC,GAAOA,EAAK3C,UAEtG,IAAIuN,GAAAA,OAEAC,EAAQnO,EAAKtE,MAEjB,IADAwC,EAAM8O,WAAa3B,EAAY,EAAIA,EAAY8C,EAC3CjQ,EAAM0D,SAAW,EACrB,CAEI1D,EAAM8O,WAAa9O,EAAM8O,WAAa,EAAI9O,EAAM8O,WAAahN,EAAKtE,MAClE,IAAI0S,GAAYlQ,EAAM3B,QAAQ0J,cAAc,gBAC1B,QAAdmI,GACAA,EAAUzN,SACdwN,EAAQpK,SAAS7F,EAAM4D,aAAeiC,SAAS7F,EAAM0D,UACjDuM,EAAQjQ,EAAM8O,YAAc9O,EAAM8O,WAAa,IAC/CmB,EAAQjQ,EAAM8O,YAElBkB,EAAYhQ,EAAM8O,WAAamB,EAC3BD,EAAYhQ,EAAM0D,WAClBsM,EAAYhQ,EAAM0D,UAE1B,GAAmB,aAAf1D,EAAMR,MAAuC,IAAhBsC,EAAKtE,QAAuC,KAAvBwC,EAAM8M,eAAwB9M,EAAMkP,YAC1F,CACI,GAAIiB,GAAMnQ,EAAM4M,YAAY3N,MAAM,eAAe,GAAGD,QAAQ,MAAO,IAC/DoR,EAAQ3K,SAASgF,cAAc0F,EAInC,OAHAC,GAAM5N,UAAUE,IAAI,YACpB0N,EAAMtI,UAAY9H,EAAM8M,iBACxB9M,GAAM3B,QAAQiB,YAAY8Q,GAGzB,GAAmB,aAAfpQ,EAAMR,MAAuC,IAAhBsC,EAAKtE,QAAgBwC,EAAMkP,YAE7D,YADAlP,EAAM3B,QAAQqG,MAAM6B,QAAU,OAG7B,IAAoB,IAAhBzE,EAAKtE,OAAT,CAIL,IAAK,GAAID,GAAIyC,EAAM4D,YAAarG,EAAI0S,EAAO1S,IACvCuS,GAAS9P,EAAMqQ,aAAavO,EAAKvE,GAAIA,EAAGuE,EAAKtE,OAgCjD,IA7BIwC,EAAM3B,QAAQ6C,SAAS1D,OAAS,EAEhCwC,EAAM3B,QAAQyJ,UAAYgI,GAG1BA,EAAQ3R,KAAKmS,yBAAyBR,EAAO9P,EAAM3B,QAAQkS,SAC7C,OAAVT,GACAA,EAAM3K,QAAQ,SAAUC,GACpBpF,EAAM3B,QAAQiB,YAAY8F,MAiBlCpF,EAAM0D,SAAW,IACjB1D,EAAM4D,YAAcqM,GAGpBjQ,EAAM0D,SAAW,GAAK1D,EAAM4D,YAAc5D,EAAM8O,WAAW,CAC3D,GAAI0B,GAAAA,OACAC,EAAAA,0BAAoCzQ,EAAM8O,WAAY9O,EAAM4D,aAA5D,WACA5D,GAAMgP,kBAENyB,EAAAA,yEAAmFzQ,EAAM8O,WAAa9O,EAAM4D,aAA5G,YAEJ,IAAI8M,GAAoC,UAA1B1Q,EAAM3B,QAAQkS,SAAiD,UAA1BvQ,EAAM3B,QAAQkS,SAAiD,UAA1BvQ,EAAM3B,QAAQkS,OACtG,IAAIG,EACJ,CACI,GAAIC,GAAU3Q,EAAM3B,QAAQ0J,cAAc,qBAAqBvK,OAAS,CAExEgT,GAAAA,yCAAgDG,EAAhD,qFAA4IX,EAA5I,UAA+JS,EAA/J,aACAD,EAAOrS,KAAKY,wBAAwByR,EAAMxQ,EAAM3B,QAAQkS,aAGxDC,GAAOrS,KAAKY,wBAAL,qFAAgHiR,EAAhH,UAAmIS,EAAnI,SAGX,IAAIG,GAAUJ,EAAKzI,cAAc,eAEjC6I,GAAQjL,QAAU,WACV3F,EAAM4D,aAAe9B,EAAKtE,OAC1BwC,EAAM+O,SAAS/O,EAAM4D,YAAa5D,EAAM0D,SAAUmN,GAElDC,IAGR,IAAIC,GAAaP,EAAKzI,cAAc,kBACpCgJ,GAAWpL,QAAU,WACjB3F,EAAM0D,SAAW1D,EAAM8O,WACA,OAAnB9O,EAAM+O,SACN/O,EAAM+O,SAAS/O,EAAM4D,YAAc5D,EAAM8O,WAAa9O,EAAM4D,YAAciN,GAE1EC,KAER9Q,EAAM3B,QAAQiB,YAAYkR,KAKlC,IAAMM,GAAQ,WACV9Q,EAAMyO,cAEa,YAAfzO,EAAMR,KACN6P,IACoB,aAAfrP,EAAMR,MACXQ,EAAM6D,aAGV7D,EAAMoI,cAEJyI,EAAc,SAAU/O,GAC1B,IAAK,GAAIvE,GAAI,EAAGA,EAAIuE,EAAKtE,OAAQD,IAC7ByC,EAAMyD,MAAMwE,KAAKnG,EAAKvE,GAC1BuT,KA6JJ,IAxJAhS,KAAKkS,SAAW,SAAUC,GAKtB,IAAK,GAJDC,GAAiBD,EAAQrB,WACzBL,KACA4B,KAEK5T,EAAI,EAAGA,EAAI2T,EAAe1T,OAAQD,IAEnC2T,EAAe3T,GAAGyK,MAAM7G,QAAQ,WAED,UAA3B+P,EAAe3T,GAAG6T,KAClB7B,EAAOtH,MACH5I,OAAQ,cAAc6R,EAAe3T,GAAG6T,KACxC1B,WAAYvR,KAAKkT,QAAQH,EAAe3T,GAAGyK,SAG/CuH,EAAOtH,MACH5I,OAAQ6R,EAAe3T,GAAG6T,KAC1B1B,WAAYvR,KAAKkT,QAAQH,EAAe3T,GAAGyK,SAGnDmJ,EAAa,EAIjBF,GAAQK,WAAW9T,OAAS,GAExByT,EAAQnJ,UAAU3G,QAAQ,WAE1BoO,EAAOtH,MACH5I,OAAQ,YACRqQ,WAAYvR,KAAKkT,QAAQJ,EAAQnJ,aAErCqJ,EAA2B,IAAdA,EAAkB,EAAE,GAKrCA,MAEAhC,EAAWlH,MACP0H,IAAKsB,EACL1B,OAAQA,KAIpBzQ,KAAKc,QAAU,WAAmC,GAA1BkC,GAA0B1B,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,GAAnB,KAAM8K,EAAa9K,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,GAAL,IACzCJ,GAAM0D,SAAW1D,EAAM2D,UACvB3D,EAAM4D,YAAc,EACP,OAAT9B,IACA9B,EAAMyD,MAAQ3B,GAClB9B,EAAMuR,WAAa,EACL,OAAVrG,EACA4F,IAEA9Q,EAAM0K,WAAWQ,IAEzBpM,KAAK4L,WAAa,SAAUnN,GACxB,GAAIiU,GAAUrT,KAAKY,wBAAwBiB,EAAMqQ,aAAarQ,EAAMyD,MAAMlG,GAAIA,EAAGyC,EAAMyD,MAAMjG,QAASwC,EAAM3B,QAAQkS,SAChHkB,EAAUzR,EAAMuL,MAAMhO,EAC1ByC,GAAMuL,MAAMhO,GAAGmU,WAAWC,aAAaH,EAASC,IAEpD3S,KAAKmM,IAAM,SAAS7F,GAA4D,GAAtD0F,GAAsD1K,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,IAAAA,UAAA,GAAlC2K,EAAkC3K,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,IAAAA,UAAA,GAAf4K,IAAe5K,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,KAAAA,UAAA,EACjD,KAAvBJ,EAAMyD,MAAMjG,QAA6D,OAA7CwC,EAAM3B,QAAQ0J,cAAc,cACxD/H,EAAM3B,QAAQ0J,cAAc,aAAatF,QAC7C,IAAImP,GAAWnM,SAASoM,yBACpBC,EAAOrM,SAASgF,cAAczK,EAAM3B,QAAQkS,SAC5ChT,EAAAA,MACJ,IAAKwN,EAeD,CAWA,IAVAxN,EAAI,EAEJyC,EAAMuL,MAAMpG,QAAQ,SAAUC,GAC1BrD,QAAQC,IAAIoD,GACZrD,QAAQC,IAAIoD,EAAK2M,QAAL,MACZ3M,EAAK2M,QAAL,KAAwBlM,SAAUT,EAAK2M,QAAL,MAAyB,IAI/DD,EAAKhK,UAAa9H,EAAMqQ,aAAajL,EAAM,EAAGpF,EAAMyD,MAAMjG,OAAO,GAC1DsU,EAAKR,WAAW,IACnBM,EAAStS,YAAYwS,EAAKR,WAAW,GAErCxG,IACA8G,EAAS1Q,SAAS,GAAGsB,UAAUE,IAAIoI,GACnCE,GACAhL,EAAMyD,MAAMuO,QAAQ5M,GACxBpF,EAAM3B,QAAQ4T,QAAQL,OAhC1B,CAKI,IAJArU,EAAIyC,EAAMyD,MAAMjG,OACXwN,GACDzN,IACJuU,EAAKhK,UAAY9H,EAAMqQ,aAAajL,EAAM7H,EAAGA,EAAE,GACxCuU,EAAKR,WAAW,IACnBM,EAAStS,YAAYwS,EAAKR,WAAW,GAErCxG,IACA8G,EAAS1Q,SAAS,GAAGsB,UAAUE,IAAIoI,GACnCE,GACAhL,EAAMyD,MAAMwE,KAAK7C,GACrBpF,EAAM3B,QAAQiB,YAAYsS,GAuBR,OAAlB5R,EAAM+N,SAEN/N,EAAM+N,QAAQ3I,EAAM,WAChB,GAAIjG,GAAIa,EAAM3B,QAAQ0J,cAAc,IAAI+C,EACpC3L,IACAA,EAAEqD,UAAUC,OAAOqI,KAG/B9K,EAAM4O,SAASxJ,EAAM7H,IAEzBuB,KAAKqM,KAAO,SAAUN,EAAUtN,GAC5BwE,QAAQC,IAAI,gBAAiBzE,EAAGsN,GAChClM,MAAMuJ,KAAKlI,EAAMuL,OAAOlI,OAAO,SAAAlE,GAAA,MAAK0G,UAAS1G,EAAE4S,QAAF,QAAqBxU,IAAG,GAAGiF,UAAUE,IAAI,oBACtF1C,EAAMyN,SAASlQ,EAAG,QAASsN,EACvB,WACI7K,EAAMyD,MAAMlG,GAAKsN,EACjB7K,EAAM0K,WAAWnN,MAU7BuB,KAAK8L,OAAS,SAASM,GAAyB,GAAlBP,KAAkBvK,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,KAAAA,UAAA,EAE5CJ,GAAM3B,QAAQ0J,cAAd,uBAAmDmD,EAAnD,MAA8DzI,QAC9D,KAAK,GAAI6M,GAAIpE,EAAOoE,EAAItP,EAAMuL,MAAM/N,OAAQ8R,IACxCtP,EAAMuL,MAAM+D,GAAGyC,QAAf,KAAkClM,SAAU7F,EAAMuL,MAAM+D,GAAGyC,QAAf,MAAmC,EAC/E/R,EAAMuL,MAAM+D,GAAGS,iBAAiB,eAAe5K,QAAQ,SAAUC,GAC7DA,EAAK2M,QAAL,KAAuBlM,SAAUT,EAAK2M,QAAL,MAAyB,GAG9DpH,IACA3K,EAAMyD,MAAMyO,OAAOhH,EAAO,GACH,IAAvBlL,EAAMyD,MAAMjG,QACZwC,EAAMJ,WAEdd,KAAKqT,iBAAmB,WACpBhU,KAAKiU,SAASC,UAAW,EACzBlU,KAAK8B,UAAU,YAAaD,EAAM3B,SAAS8G,QAAQ,SAAUC,GAEzDjH,KAAKiU,SAASE,SAASlN,MAK1BzG,MAAMC,QAAQE,KAAK2E,OAAQ,CAC5B3E,KAAKU,KAAO,UACZ,IAAM+S,GAA4E,OAAjD3F,EAAY3N,MAAM,0BACnD,IAAIsT,EAAyB,CACzB,GAAItB,GAAUnS,KAAKT,QAAQ0J,cAAc6E,EACzCqE,GAAQzO,UAAUE,IAAI,WACtBkK,EAAcqE,EAAQuB,UACtBvB,EAAQxO,aAER,CACA,GAAIgQ,GAAe7F,EAAY3N,MAAM,WAAW,GAC5CyT,EAAAA,OACAC,EAAMF,EAAatR,QAAQ,UAC3BwR,GAAM,EAEND,EAAsBD,EAAazG,OAAO,EAAEyG,EAAajV,OAAS,GAAK,mBAAqBiV,EAAazG,OAAOyG,EAAajV,OAAO,IAIpImV,EAAMF,EAAatR,QAAQ,IAAKwR,EAAI,GACpCD,EAAsBD,EAAazG,OAAO,EAAE2G,GAAO,WAAaF,EAAazG,OAAO2G,IAExF/F,EAAcA,EAAY5N,QAAQyT,EAAcC,GAGpD9F,EAAcA,EAAY5N,QAAQ,eAAgB,SAAUkD,EAAGC,GAC3D,MAAOD,GAAElD,QAAQmD,EAAG,yBAExBrD,KAAK8N,YAAcA,EACnB9N,KAAKuR,aAAelS,KAAKkT,QAAQzE,GAAa,GACsD,OAAhGA,EAAY3N,MAAM,4EAElBH,KAAKwI,eAAgB,EACE,OAAnB4G,GACA/P,KAAK2B,OAAOoO,GAAgBxG,iBAAiB,SAAU,SAAUpD,GACxDA,EAAE8H,cAAcwG,QACjB5S,EAAMmS,oBAGNhU,KAAKiU,SAASC,UAAW,EACzB5M,SAASC,KAAKmN,YAI9B/T,KAAKT,QAAQyU,mBAAqBhU,KAClCA,KAAKT,QAAQmE,UAAUE,IAAI,kBAG1B,CACD5D,KAAKU,KAAO,SACZ,IAAIuT,GAAcpU,MAAMT,UAAU6C,MAAMC,KAAMlC,KAAKT,QAAQ0R,iBAAiB,sDAC5EgD,GAAY9K,KAAMnJ,KAAKT,SACvB0U,EAAY5N,QAAQ,SAAUC,GAC1BpF,EAAMgR,SAAS5L,KAGvBjH,KAAK6U,cAAc/K,KAAKnJ,MACnByP,GACDuC,IAtbZ,MAAA3T,cAAAoP,IAAAxO,IAAA,OAAAqN,IAAA,WAybQ,MAAOtM,MAAK2E,OAzbpB4H,IAAA,SA2bavJ,GACLhD,KAAK2E,MAAQ3B,KA5brB/D,IAAA,QAAAqN,IAAA,WA+bQ,MAAOtM,MAAKT,QAAQ0R,iBAAiB,gBA/b7CxD,KAkcA0G,YAAAA,WACI,QAAAA,GAAAC,GAeA,GAAAC,GAAAD,EAbQ7T,OAAAA,EAaRgB,SAAA8S,EAbiB,KAajBA,EAAAC,EAAAF,EAZQrU,KAAAA,EAYRwB,SAAA+S,KAAAA,EAAAC,EAAAH,EAXQtG,YAAAA,EAWRvM,SAAAgT,EAXsB,KAWtBA,EAAAC,EAAAJ,EAVQK,KAAAA,EAURlT,SAAAiT,GAAAA,EAAAE,EAAAN,EATQO,YAAAA,EASRpT,SAAAmT,EATsB,KAStBA,EAAAE,EAAAR,EARQS,mBAAAA,EAQRtT,SAAAqT,EAR6B,aAQ7BA,EAAAE,EAAAV,EANQzE,YAAAA,EAMRpO,SAAAuT,EANsB,aAMtBA,EAAAC,EAAAX,EALQ9K,WAAAA,EAKR/H,SAAAwT,EALqB,aAKrBA,EAAAC,EAAAZ,EAHQ3S,OAAAA,EAGRF,SAAAyT,EAHiB,KAGjBA,CAAA/W,iBAAA+B,KAAAmU,GAEInU,KAAKuI,cAAe,EACpBvI,KAAKT,QAAUF,KAAK2B,OAAOT,GAC3BP,KAAKO,OAASP,KAAKT,QACnBS,KAAKyB,OAASA,EACdzB,KAAK2E,MAAQ5E,EACbC,KAAK2U,YAAcA,EACnB3U,KAAK6U,mBAAqBA,EAAmB9T,KAAKf,MAClDA,KAAK2P,YAAcA,EAAY5O,KAAKf,MACpCA,KAAKsJ,WAAaA,EAAWvI,KAAKf,KAClC,IAAIiV,GAAeR,EAAO,wBAAwB,eAC9CS,EAAM,EACNC,EAAyB,OAAhBrH,EAAuB9N,KAAKT,QAAQyJ,UAAY8E,CACpC,QAArB9N,KAAK2U,cACL3U,KAAK2U,YAAc,gBACnBQ,EAASA,EAAOjV,QAAQ,uBAAwB,SAAUC,EAAOiV,EAAMC,GAEnE,MADAA,GAAAA,eAAuBJ,EAAvB,WAA8CI,EACvCD,EAAKC,KAGpBrV,KAAKsV,YAAcjW,KAAKkT,QAAQ4C,GAAQ,EACxC,IAAIjU,GAAQlB,KAERuV,EAAQ,EAERC,EAAe,QAAfA,GAAwB3E,EAAK5R,EAAKwW,GAClCF,GACA,IAAIG,IACAC,KAAMT,EACNU,KAAM3W,EACN4W,OAAQN,EACRO,GAAIL,GAEJ7G,EAAOvP,KAAKY,wBAAwBiB,EAAMoU,YAAYzE,EAAK0E,EAAO,KAAMG,GAC5E9G,GAAKlL,UAAUE,IAAI,aACnB,KAAK,GAAI3E,KAAO4R,GAChB,CACI,GAAIkF,GAAUlF,EAAI5R,EAClB,IAAIY,MAAMC,QAAQiW,GAClB,CACIb,GACA,KAAK,GAAIzW,GAAI,EAAGA,EAAIsX,EAAQrX,OAAQD,IAEhC,GAA0B,OAAtByC,EAAMyT,YAEN/F,EAAKpO,YAAcgV,EAAaO,EAAQtX,GAAIQ,EAAKR,QAGrD,CACImQ,EAAKlL,UAAUE,IAAI,gBACf6Q,GACA7F,EAAKlL,UAAUE,IAAI,WACvB,IAAIoS,GAAMpH,EAAK3F,cAAc/H,EAAMyT,YACnCqB,GAAIxV,YAAcgV,EAAaO,EAAQtX,GAAIQ,EAAKR,IAGxDyW,KAGR,MAAOtG,IAEPoD,EAAQ,WAER,GADA9Q,EAAMyO,cACF9P,MAAMC,QAAQoB,EAAMyD,OACxB,CACIzD,EAAM3B,QAAQyJ,UAAY,GAC1BkM,GACA,KAAK,GAAI1E,GAAI,EAAGA,EAAItP,EAAMyD,MAAMjG,OAAQ8R,IACpCtP,EAAM3B,QAAQiB,YAAcgV,EAAatU,EAAMyD,MAAM6L,GAAI,OAAQ,GACrE0E,SAGAhU,GAAM3B,QAAQiB,YAAYgV,EAAatU,EAAMyD,MAAO,OAAQ,GAEhEuQ,GAAM,EACNK,EAAQ,EACRrU,EAAMoI,aAIV0I,GAAMhS,KAAK2E,OAGX3E,KAAKc,QAAU,WAA4B,GAAlBkC,GAAkB1B,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,GAAbJ,EAAMyD,KAChCzD,GAAMyD,MAAQ3B,EACdgP,KAtGZ,MAAA3T,cAAA8V,IAAAlV,IAAA,OAAAqN,IAAA,WA2GQ,MAAOtM,MAAK2E,OA3GpB4H,IAAA,SA6GavJ,GACLhD,KAAK2E,MAAQ3B,MA9GrBmR,OAoHR9U,KAAKE,QAAUF,KAAKC,OAAOC,QAAQA","file":"lure.content.min.js","sourcesContent":["//sets = {\r\n//  SubContent: [\r\n//      {sets},                             -same object to create subs\r\n// ],\r\n//\r\n// Controller:{                                   - if needs some Template master\r\n//    Type: Templator,                                    - class link [optional] Templator by default\r\n//    Target: {string|HTMLElement}                        -[optional] if Controller.Target is undefined, Controller.Target = sets.Target\r\n//    Data: {array|object},                               - data array [optional] Data === [] by default\r\n//    ListElement: {string|HTMLElement},                  - repeated element\r\n//    EmptyMessage: \"no items\",                           - render if Data.length === 0;\r\n\r\n//  Control: {\r\n//    Target: {string, jQuery, HTMLElement},\r\n//    Global: {bool}                               - set global event listener. Set true if control renders after init or it renders dynamicly\r\n//    OnClick: {function}                          - here this === current Lure.Content\r\n//    OnChange: {function}                         - here this === current Lure.Content\r\n// },}\r\n\r\nLure.Plugin.Content = {\r\n    Version: '0.9.1',\r\n    Content: class LureContent {\r\n        constructor({                       //--Lure.Content Settings--\r\n                        Target     = null,              //{string, HTMLElement} - where to render       [by default this.Parent.Content];\r\n                        Content    = null,              //{string}  - html content string, if           [by default this.Target.innerHTML]\r\n                        CSS        = '',                //{string}  - css classes string\r\n                        Name       = null,              //{string}  - Lure.Content's name. Need for search content by .GetContent(contentName)\r\n                        Global     = false,             //{bool}    - actual for SubContent. Set true, if SubContent is outside of Parent\r\n                        Title      = \"\",                //{string}  -  header element, contains name/caption/title of content\r\n                        Type       = \"Untyped\",         //{string}  - if has - this.Content will be invisible by default, if need be visible set next property:\r\n                        Visible    = undefined,         //{bool}    - make visible by default (if has no Type - visible by default)\r\n                        SubContent = [],                //{Array} of Lure.Content Settings\r\n                        Dialog     = false,             //{bool} - make dialog absolute window with dialog wrapper\r\n                        DialogWrapper = true,           //{bool} - show dialog  wrapper bg\r\n                        DialogBlur = null,              //{string, jQuery, HTMLElement} target background for blur when dialog\r\n                        DialogAnimation = null,         //{string} - css animation name\r\n                        Show       = null,              //{function} - show action\r\n                        Hide       = null,              //{function} - hide action\r\n                        Shower     = function(){this.Content.style.display = '';},       //custom show handler [calls before .Show]\r\n                        Hider      = function(){this.Content.style.display = 'none';},   //custom hide handler [calls before .Hide]\r\n                        BeforeShow = function(){},      //{function} - calls before .Shower and .Show\r\n                        Refresh    = function(data, i){\r\n                            if (this.Controller)\r\n                                this.Controller.Refresh(data, i)\r\n                        },                              //{function} - refresh content, may be call on page resize for example\r\n                        Sorting    = false,             //{object}   - sort controls by field like 'field' -> '{css|HTMLElement}'  ex.: { count: '.head .count'}\r\n                        Filtering  = false,             //{object}   - like sorting, but fast filter textbox would be\r\n                        OnClick    = null,              //{function} - this.Content.onclick event\r\n                        Controller = null,              //{object} contoller settings(Templator or TreeBuilder)\r\n                        Control    = null,              //{object} (help upper)\r\n\r\n\r\n                        Props      = function(){},      //{function}  - recomented for extra fields  for Lure.Content (this.Extrafield =...)\r\n                        Methods    = function(){},      //{function}  - recomented for extra methods for Lure.Content (this.ExtraMethod = function(){...} )\r\n                        GetSet     = {},                //{function}  - recomenter for extra getters and setters for Lure.Content\r\n                        AfterBuild = function(){},      //{function} - calls after Lure.Content init\r\n                        Disabled   = false,             //debugging,\r\n                        Parent     = null               //link to parent Lure.Content of SubContent\r\n                    })\r\n\r\n        {\r\n            if (Disabled)\r\n                return;\r\n            let $this = this;\r\n            this.isContent = true;\r\n            this.isActive = true;\r\n            if (Name  === 'Tooltipchek')\r\n                ;//debugger;\r\n\r\n            this.Parent = Parent;\r\n            if (Parent !== null){\r\n                this.Target = Global? Lure.Select(Target) : Lure.Select(Target, this.Parent.Content);\r\n                if (this.Target === null)\r\n                    this.Target = this.Parent.Content;\r\n            }\r\n            else if (Target !== null){\r\n                this.Target = Lure.Select(Target);\r\n            }\r\n            // debugger;\r\n            ////\r\n            if (Content === null){\r\n                this.Content = this.Target;\r\n                construct.call($this);\r\n            }else{\r\n                if (Content.match(/<[^>]+>/) === null) {//if not dom string\r\n                    console.log('get load');\r\n                    Lure.GetFileText(Content).then(x => {\r\n                        // debugger;\r\n                        //     console.log('x', x);\r\n                        MakeContent.call($this, x);\r\n                        construct.call($this);\r\n                    });\r\n                }else {\r\n                    MakeContent.call($this, Content);\r\n                    construct.call($this);\r\n                }\r\n\r\n\r\n            }\r\n            function MakeContent(Content){\r\n                if (Controller === null || Array.isArray(Controller.Data))\r\n                {\r\n                    this.Content = Lure.CreateElementFromString(Content);\r\n                }\r\n                else if (Controller !== null && !Array.isArray(Controller.Data))\r\n                {\r\n                    /*Content = Content.replace(/<[^>]+>([^<]*{{([^#}]+)}}[^<]*)<[^>]+>/g, function (match, group) {\r\n                     let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                     return match.replace(match, `<span>${match}</span>`);\r\n                     });\r\n                     return  match.replace(group, newGroup);\r\n                     });*/\r\n                    Content = Content.replace(/>[^>]*({{[^#}]+}})[^>]*</g, function (match, group) {\r\n                        /*let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                         return match.replace(match, `<span>${match}</span>`);\r\n                         });*/\r\n                        const x = match.replace(/{{[^#}]+}}/g, function (matche) {\r\n                            return `<span>${matche}</span>`\r\n                        });\r\n                        return x;// match.replace(group, `<span>${group}</span>`);\r\n                    });\r\n                    this.Content = Lure.CreateElementFromString(Content);\r\n                }\r\n                //this._Content = Content;\r\n                this.Target.appendChild(this.Content);\r\n            }\r\n\r\n            /////\r\n            if (this.Content === null || this.Target === null)\r\n            {\r\n                this.isContent = false;\r\n                return;\r\n            }\r\n\r\n\r\n\r\n\r\n            //### CONSTRUCTION\r\n            if (CSS !== ''){\r\n                let node = document.createElement('style');\r\n                node.innerHTML = CSS;\r\n                document.body.appendChild(node);\r\n            }\r\n            function construct(){\r\n                this.Type = Type;\r\n                this.Name = Name;\r\n                this.AllContents = Lure.ContentList;\r\n\r\n\r\n                //### METHODS\r\n                /**\r\n                 * @param {object} Data\r\n                 * @param {int} index\r\n                 */\r\n                this.Refresh = Refresh.bind(this);\r\n                /**\r\n                 *\r\n                 * @param {selector|HTMLElement} s\r\n                 * @returns {HTMLElement}\r\n                 * @constructor\r\n                 */\r\n                this.Select = function(s){\r\n                    return Lure.Select(s, $this.Content)\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {selector|HTMLElement} s\r\n                 * @returns {NodeList}\r\n                 * @constructor\r\n                 */\r\n                this.SelectAll = function(s){\r\n                    return Lure.SelectAll(s, $this.Content)\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {string}stringName\r\n                 * @constructor\r\n                 * @returns {Lure.Content}\r\n                 */\r\n                this.GetParent = function(stringName='root'){\r\n                    let content = $this;\r\n                    while (content.Parent !== null && content.Name !== stringName)\r\n                        content = content.Parent;\r\n                    return content;\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {string}stringName\r\n                 * @constructor\r\n                 * @returns {Lure.Content}\r\n                 */\r\n                this.GetContent = function (stringName='root') {\r\n                    let parent = this.GetParent(stringName);\r\n                    if (parent.Name === stringName)\r\n                        return parent;\r\n                    // let root = parent;\r\n                    let found = parent;\r\n                    if (stringName === 'root')\r\n                        return found;\r\n                    let searcher0 = function (content) {\r\n                        if (content.isContent && content.__private.ContentNames)\r\n\r\n                            for( let i = 0; i < content.__private.ContentNames.length; i++){\r\n                                let name = content.__private.ContentNames[i];\r\n                                if (name === stringName)\r\n                                    return content[name];\r\n                                found = searcher(content[name])\r\n                            }\r\n                        return found;\r\n                    };\r\n                    let searcher = function (content) {\r\n                        // debugger;\r\n                        for(let key in content){\r\n                            if (key !== \"Parent\" && !!content[key] && content[key].isContent){\r\n\r\n                                if (content[key].Name === stringName)\r\n                                    return content[key];\r\n                                found = searcher(content[key]);\r\n                            }\r\n\r\n                        }\r\n                        return found;\r\n                    };\r\n                    return searcher(found);\r\n\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {HTMLElement|string} HTMLElement\r\n                 * @returns {number|Number}\r\n                 * @constructor\r\n                 */\r\n                this.GetIndex = function (HTMLElement) {\r\n                    HTMLElement = $this.Select(HTMLElement);\r\n                    return Array.prototype.slice.call( HTMLElement.parentElement.children ).indexOf(HTMLElement);\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {string} eventName\r\n                 * @param {string} selector\r\n                 * @param {function} func\r\n                 * @constructor\r\n                 */\r\n                this.AddEventListener = function (eventName, selector, func) {\r\n                    Lure.AddEventListenerGlobal(eventName,selector,func, $this.Content, $this);\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {string|HTMLElement} buttonTutorStarter\r\n                 * @constructor\r\n                 */\r\n                this.AddTutor = function (buttonTutorStarter) {\r\n                    $this.MonsieurTutor = new MonsieurTutor($this.Select(buttonTutorStarter), $this.Content);\r\n                };\r\n                //private\r\n                this._SortBy = function(f, data, isSorted = false){\r\n                    if (data.length < 2)\r\n                        return;\r\n                    console.log('sort by', f);\r\n                    data.sort(function (a, b) {\r\n                        if      ((a[f] < b[f]) && $this._Sorting[f].Sorted)\r\n                            return 1;\r\n                        else if ((a[f] > b[f]) && $this._Sorting[f].Sorted)\r\n                            return -1;\r\n                        else if ((a[f] < b[f]) && !$this._Sorting[f].Sorted)\r\n                            return -1;\r\n                        else if ((a[f] > b[f]) && !$this._Sorting[f].Sorted)\r\n                            return 1;\r\n                        return 0;\r\n                    });\r\n                    $this._Sorting[f].Sorted = !$this._Sorting[f].Sorted;\r\n                    for (let kf in $this._Sorting){\r\n                        if ($this._Sorting.hasOwnProperty(kf) && kf !== '_sorter'){\r\n                            $this._Sorting[kf].Target.classList.remove('mt-sorting-up');\r\n                            $this._Sorting[kf].Target.classList.remove('mt-sorting-down');\r\n                            if (f !==kf)\r\n                                $this._Sorting[kf].Sorted = false;\r\n                        }\r\n                    }\r\n                    $this._Sorting[f].Target.classList.add($this._Sorting[f].Sorted ? 'mt-sorting-down':'mt-sorting-up');\r\n                    $this.Refresh();\r\n                };\r\n                this._FilterBy = function () {\r\n                    let p = performance.now();\r\n                    let filters = 0;\r\n                    let _d = $this._Filter._DataDefault.slice(0);\r\n                    for (let f in $this._Filter){\r\n                        if ($this._Filter.hasOwnProperty(f) && $this._Filter[f].Filter && $this._Filter[f].Filter !==''){\r\n                            _d = _d.filter(x=>x[f].toString().toLowerCase().indexOf($this._Filter[f].Filter) > -1);\r\n                            filters++;\r\n                        }\r\n                    }\r\n                    console.log(_d);\r\n                    if (filters === 0)\r\n                    {\r\n                        if ($this._Sorting._sorter){\r\n                            $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\r\n                            $this._SortBy($this._Sorting._sorter, $this.Controller._Data);\r\n                        }\r\n                        $this.Controller.Refresh();\r\n                    }\r\n                    else\r\n                    {\r\n                        if ($this._Sorting._sorter){\r\n                            $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\r\n                            $this._SortBy($this._Sorting._sorter, _d);\r\n                        }\r\n                        $this.Controller.PageSize = $this._PageSize;\r\n                        $this.Controller._PageCursor = 0;\r\n                        $this.Controller._Rebuilder(_d);\r\n\r\n                    }\r\n\r\n                    mr.PerformanceNow(p, 'FilterBy')\r\n                };\r\n\r\n                //extra properties\r\n                Props.call(this);\r\n                //extra getters/setters\r\n                for(let k in GetSet){\r\n                    Object.defineProperty($this, k, Object.getOwnPropertyDescriptor(GetSet, k));\r\n                }\r\n                //extra methods\r\n                Methods.call(this);\r\n                //--\r\n                this.Show = function(e) {\r\n                    this.isActive = true;\r\n                    if (this.Control)\r\n                        this.Control.Active();\r\n                    let style = window.getComputedStyle($this.Content);\r\n                    let duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                    let durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                    if (duration < durationAni)\r\n                        duration = durationAni;\r\n                    duration++;\r\n                    if ($this.Type !== \"Untyped\" && !$this.isVisible)\r\n                    {\r\n                        Lure.ContentList[$this.Type].forEach((item) =>\r\n                        {\r\n                            if ((item) !== $this && item.isActive)\r\n                                item.Hide();\r\n                        });\r\n                    }\r\n                    if (Dialog){\r\n                        Lure._DialogCount++;\r\n                        $this.Content.classList.add('lure-dialog');\r\n                        //    console.log('DialogWrapper', DialogWrapper);\r\n                        if (DialogWrapper){\r\n                            $this.DialogWrapper = Lure.CreateElementFromString('<div class=\"dialog-wrapper\">');\r\n                            document.body.appendChild($this.DialogWrapper);\r\n                            $this.DialogWrapper.onclick = $this.Hide.bind($this);\r\n\r\n                            let zIndexWrapper = parseInt(window.getComputedStyle($this.DialogWrapper).zIndex);\r\n                            let zIndexContent = parseInt(window.getComputedStyle($this.Content).zIndex);\r\n                            if (Number.isNaN(zIndexContent) || zIndexContent < zIndexWrapper)\r\n                                $this.Content.style.zIndex = zIndexWrapper+1;\r\n                        }\r\n\r\n                        if (DialogBlur)\r\n                        {\r\n                            $this.DialogWrapper.style.background = 'none';\r\n                            Lure.Select(DialogBlur).classList.add('lure-blur');\r\n                        }\r\n                        if (DialogAnimation){\r\n                            $this.Content.classList.add(DialogAnimation);\r\n                        }\r\n                    }\r\n                    BeforeShow.call($this, e);\r\n                    Shower.call($this, e);\r\n                    $this.Content.style.display = '';\r\n                    clearTimeout($this.__private.ToggleTimer);\r\n                    //this.Content.addEventListener('transitionend', Show.bind($this, e));\r\n                    if (Show !== null) {\r\n                        $this.__private.ToggleTimer = setTimeout(function() {\r\n                            Show.call($this, e);\r\n                        },duration);\r\n                    }\r\n                };\r\n                this.Hide = function(e) {\r\n                    this.isActive = false;\r\n                    if (this.Control)\r\n                        this.Control.Disactive();\r\n                    let style = window.getComputedStyle($this.Content);\r\n                    let duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                    let durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                    if (duration < durationAni)\r\n                        duration = durationAni;\r\n                    duration++;\r\n                    if (Dialog)\r\n                    {\r\n                        Lure._DialogCount--;\r\n                        if ($this.DialogWrapper)\r\n                            $this.DialogWrapper.remove();\r\n                        if (DialogBlur  && Lure._DialogCount < 1)\r\n                            Lure.Select(DialogBlur).classList.remove('lure-blur');\r\n                    }\r\n\r\n                    Hider.call($this, e);\r\n                    clearTimeout($this.__private.ToggleTimer);\r\n                    if (Hide !== null)\r\n                        $this.__private.ToggleTimer = setTimeout(function () {\r\n                            Hide.call($this, e);\r\n                        }, duration);\r\n\r\n                };\r\n                this.Toggle = function(e){\r\n                    if ($this.isVisible)\r\n                        $this.Hide(e);\r\n                    else\r\n                        $this.Show(e);\r\n                };\r\n\r\n                this.__private = {};\r\n                this.__private.ToggleTimer = null;\r\n                this.Control = new Lure.Plugin.Content.Control(Control, $this);\r\n                this.Content.onclick = OnClick? OnClick.bind($this) : null;\r\n                //SubContent\r\n                if (Array.isArray(SubContent)){\r\n                    for (let i = 0; i < SubContent.length; i++){\r\n                        {\r\n                            if (!SubContent[i].Parent)\r\n                                SubContent[i].Parent = $this;\r\n                            //  $this.__private.ContentNames.push(SubContent[i].Name);\r\n                            $this[SubContent[i].Name] = new Lure.Content( SubContent[i] );\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    for (let cname in SubContent){\r\n                        SubContent[cname].Parent = $this;\r\n                        SubContent[cname].Name = cname;\r\n                        //       $this.__private.ContentNames.push(cname);\r\n                        $this[cname] = new Lure.Content(SubContent[cname]);\r\n                    }\r\n                }\r\n                //title\r\n                this.TitleContent = Lure.Select(Title, this.Content);\r\n\r\n                if ( (Type === \"Untyped\" && Visible !== false) && !Dialog)\r\n                    Visible = true;\r\n                else if ( (Type !== \"Untyped\" && Visible !== true) || ( Dialog && Visible !== true) )\r\n                    Visible = false;\r\n                //if (Typed) Content is Visible\r\n                if (Visible){\r\n                    this.Content.style.display = '';\r\n                    if (this.Control)\r\n                        this.Control.Active();\r\n                }\r\n                else { //not undefined\r\n                    this.isActive = false;\r\n                    this.Content.style.display = 'none';\r\n                }\r\n                if (Controller){\r\n                    if (Controller.isController){\r\n                        this.Controller = Controller;\r\n                        this.Controller.Parent = this;\r\n                    }\r\n                    else{\r\n                        if (!Controller.Target)\r\n                            Controller.Target = this.Content;\r\n                        if (!Controller.Type)\r\n                            Controller.Type = \"Templator\";\r\n                        Controller.Parent = this;\r\n                        this.Controller = new Lure.Plugin.Content.Controller[Controller.Type](Controller);\r\n                    }\r\n                    if (this.Controller.isHasEditable)\r\n                    {\r\n                        Lure._EditablesEventListenerRun($this.Content);\r\n                    }\r\n                }\r\n\r\n                if (Sorting){\r\n                    $this._Sorting = {};\r\n                    $this._Sorting._sorter = null;\r\n                    for (let f in Sorting){\r\n                        if (Sorting.hasOwnProperty(f) && f !== '_sorter'){\r\n                            $this._Sorting[f] = {\r\n                                Target: $this.Select(Sorting[f]),\r\n                                Sorted: false,\r\n                            };\r\n                            $this._Sorting[f].Target.classList.add('mt-sorting');\r\n                            $this._Sorting[f].Target.addEventListener('click', function () {\r\n                                $this._Sorting._sorter = f;\r\n                                $this._SortBy(f, $this.Controller._Data);\r\n                            })\r\n                        }\r\n                    }\r\n                    console.info('mt-sortable', $this._Sorting);\r\n                }\r\n                if (Filtering){\r\n                    $this._Filter = {};\r\n                    $this._Filter._DataDefault = $this.Controller._Data.slice(0);\r\n                    for (let f in Filtering){\r\n                        if (Filtering.hasOwnProperty(f) && f !== '_format'){\r\n                            $this._Filter[f] = {\r\n                                Target: $this.Select(Filtering[f]),\r\n                                Filter: '',\r\n                            };\r\n                            $this._Filter[f].Target.classList.add('mt-filtering');\r\n                            $this._Filter[f].Target.innerHTML = '<input type=\"text\" class=\"mt-filtering-input\">';\r\n                            $this._Filter[f].Target.querySelector('.mt-filtering-input').addEventListener('keyup', function (e) {\r\n                                //$this._SortBy(f);\r\n                                $this._Filter[f].Filter = e.target.value.toLowerCase();\r\n                                $this._FilterBy();\r\n\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                if (!Lure.ContentList[$this.Type]) //if list is empty, create it, else just add\r\n                    Lure.ContentList[$this.Type] = [];\r\n                Lure.ContentList[$this.Type].push(this);\r\n\r\n                //close button\r\n                Array.from(this.Content.children).forEach(function(item){\r\n                    if (item.classList.contains(\"close\"))\r\n                        item.onclick = function (e) {\r\n                            $this.Hide(e);\r\n                        }\r\n                });\r\n\r\n                setTimeout(function () {\r\n                    AfterBuild.call($this);\r\n                }, 1);\r\n            }\r\n\r\n        }\r\n        get isVisible(){\r\n            return Lure.isVisible(this.Content);\r\n        }\r\n        get Title(){\r\n            return this.TitleContent.innerHTML;\r\n        }\r\n        set Title(t){\r\n            this.TitleContent.innerHTML = t;\r\n        }\r\n        get Data(){\r\n            if (this.Controller)\r\n                return this.Controller.Data;\r\n            return null;\r\n        }\r\n        set Data(data){\r\n            if (this.Controller)\r\n                this.Controller.Data = data;\r\n        }\r\n        get Items(){\r\n            if (this.Controller)\r\n                return this.Controller.Items;\r\n            return null;\r\n        }\r\n        RefreshOne(i){\r\n            if (this.Controller)\r\n                this.Controller.RefreshOne(i);\r\n        }\r\n        Remove(i, removeData){\r\n            if (this.Controller)\r\n                this.Controller.Remove(i, removeData);\r\n        }\r\n        Add(itemData, extraclass = false, isPrepend = false, addData = true){\r\n            if (this.Controller)\r\n                this.Controller.Add(itemData, extraclass, isPrepend, addData);\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {object} itemData\r\n         * @param {int} index\r\n         * @constructor\r\n         */\r\n        Edit(itemData, index){\r\n            if (this.Controller)\r\n                this.Controller.Edit(itemData, index);\r\n        }\r\n        Dispose(){\r\n            this.Content.remove();\r\n            this.Control.Disactive();\r\n            delete this.Controller;\r\n            delete this.Control;\r\n        }\r\n    },\r\n    Control: class LureControl{\r\n        constructor(control, owner){\r\n            if (control === null)\r\n                return;\r\n            if (control.length > 0) //if control list not empty\r\n            {\r\n                let controls = this;\r\n                for (let i = 0; i < control.length; i++)\r\n                {\r\n                    if (!control[i].Name)\r\n                        control[i].Name = \"unnamed_\" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);\r\n                    controls[control[i].Name] = {\r\n                        Content: Lure.SelectAll(control[i].Target),\r\n                        _Content: control[i].Target,\r\n                        Type: control[i].Type ? control[i].Type : \"Untyped\",\r\n                        isGlobal: control[i].Global,\r\n                        OnClick: control[i].OnClick ? control[i].OnClick : owner.Show,\r\n                        OnChange: control[i].OnChange,\r\n                        Active: function(){\r\n                            Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                                item.classList.add('active');\r\n                            })\r\n                        },\r\n                        Disactive: function(){\r\n                            Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                                item.classList.remove('active');\r\n                            });\r\n                        }\r\n\r\n                    };\r\n                    //onclick\r\n                    controls[control[i].Name].Content.forEach(function (item) {\r\n                        item.classList.add('pointer');\r\n                    });\r\n                    if (control[i].Global){\r\n\r\n                        Lure.AddEventListenerGlobal('click', control[i].Target, function (e) {\r\n                            Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                                item.classList.remove('active');\r\n                            });\r\n                            e.target.classList.add('active');\r\n                            if (controls[control[i].Name].OnClick)\r\n                                controls[control[i].Name].OnClick.call(owner, e);\r\n                        });\r\n                    }\r\n                    else{\r\n                        controls[control[i].Name].Content.forEach(function (item) {\r\n                            item.onclick = function (e) {\r\n                                Lure.ContentList[owner.Type].forEach((item) =>\r\n                                {\r\n                                    if ((item) !== owner)\r\n                                    {\r\n                                        if (item.Control)\r\n                                            item.Control.Disactive();\r\n                                    }\r\n                                });\r\n                                //console.log('remover', e);\r\n                                controls[control[i].Name].Content.forEach(function (item) {\r\n                                    item.classList.remove('active');\r\n                                });\r\n                                e.currentTarget.classList.add('active');\r\n                                controls[control[i].Name].OnClick.call(owner, e);\r\n                            };\r\n\r\n                        })\r\n                    }\r\n\r\n                    if (control[i].OnChange)\r\n                    {\r\n                        if (control[i].Global){\r\n                            Lure.AddEventListenerGlobal('change', control[i].Target, function (e) {\r\n                                control[i].OnChange.call(owner, e);\r\n                            } )\r\n                        }\r\n                        else{\r\n                            controls[control[i].Name].Content.forEach(function (item) {\r\n                                item.onchange = function (e) {\r\n                                    control[i].OnChange.call(owner, e);\r\n                                };\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Active(type = \"Untyped\"){\r\n            for (let k in this)\r\n                if (this[k].Type === type)\r\n                    this[k].Content.forEach(function (item) {\r\n                        item.classList.add('active')\r\n                    })\r\n        }\r\n        Disactive(type = \"Untyped\"){\r\n            for (let k in this)\r\n                if (this[k].Type === type)\r\n                {\r\n                    this[k].Content.forEach(function (item) {\r\n                        item.classList.remove('active');\r\n                    });\r\n                    if (this[k].isGlobal)\r\n                        Lure.SelectAll(this[k]._Content).forEach(function(item){\r\n                            item.classList.remove('active');\r\n                        })\r\n                }\r\n\r\n        }\r\n    },\r\n    Controller: {\r\n        Templator: class Templator{\r\n            constructor(\r\n                {\r\n                    Target = null,                              //{HTMLelement}\r\n                    Data = [],                                  // {object}, {array} - if object Templator would be refresh, if array - rebuild\r\n                    ListElement = \".list_element\",              //{string} - css selector or dom string\r\n                    //ListElementOnClick = null,                //{function} -\r\n                    EmptyMessage = \"\",\r\n                    EmptyHide = false,      //{bool} - Templator.Content would be hidden if Data.length = 0\r\n                    //DataType = \"untyped\",  //--BAD EXPERIENCE-- ODO when refresh one of typed Templator, would be refreshed/added/removed all of same type Templators (exclude untyped ofcourse)\r\n\r\n                    PageSize = -1,\r\n                    DataCount = -1,         //if > 0 PageGet is requied!!!\r\n                    PageGet = null,         //{function} - requied if DataCount > 0\r\n\r\n                    ShowAllButton = true,\r\n\r\n                    LineSave = function(line, property, newValue, callback=()=>{}){setTimeout(()=>{callback()}, 500)},            // callback would remove editable-waiting css class;\r\n                    LineAdd = function(dataObject, callback=()=>{}){setTimeout(()=>{ callback()}, 500)},                     // callback would remove editable-waiting css class;\r\n                    EditModeSwitch = null,     //checkbox, which toggle to edit mode\r\n                    DataSaveAll = function(){},//TODO\r\n\r\n                    //Sortable = false, //sort data columns\r\n\r\n                    NoAnimation = false,    //TODO\r\n                    NoBuild = false,\r\n\r\n                    BeforeBuild = function(){},\r\n                    AfterBuild = function(){},\r\n                    AfterAdd = function(){},\r\n                    Parent = null           //Lure.Content, which owns this Controller\r\n\r\n                } = {})\r\n            {\r\n                //### DEFINES\r\n                let $this = this;\r\n                this.isController = true;\r\n                if (Parent !== null)\r\n                    this.Content = Lure.Select(Target, Parent.Content);\r\n                else\r\n                    this.Content = Lure.Select(Target);\r\n                this.Target = this.Content;\r\n                this._Data = Data;\r\n                this.EmptyMessage = EmptyMessage;\r\n                this.ListElement = \"\";\r\n\r\n                this.BeforeBuild = BeforeBuild.bind(this);\r\n                this.AfterBuild = AfterBuild.bind(this);\r\n                this.AfterAdd = AfterAdd.bind(this);\r\n                this.Parent = Parent;\r\n                //paginating\r\n                this.PageSize = PageSize;\r\n                this._PageSize = PageSize;\r\n                this._DataCount = DataCount > 0 ? DataCount : this._Data.length ;\r\n                this._PageCursor = 0;\r\n                this._PageGet = PageGet;\r\n\r\n                //server handling\r\n                this.LineAdd = LineAdd;\r\n                this.LineSave = LineSave;\r\n                this.Type = null; // Refresh or ItemList\r\n\r\n                //settings\r\n                this.isShowAllButton = ShowAllButton;\r\n                this.isNoAnimaton = NoAnimation;\r\n                this.isEmptyHide = EmptyHide;\r\n\r\n                //fields to refresh (for refresh type)\r\n                let Dictionary = [];\r\n                this._Dictionary = Dictionary;\r\n                const Refresher = function () {\r\n                    //TODO refresh only changes\r\n                    if (!$this._Data)\r\n                        $this._Data = {};\r\n                    for (let i = 0; i < Dictionary.length; i++)\r\n                    {\r\n\r\n                        for (let j = 0; j < Dictionary[i].fields.length; j++)\r\n                        {\r\n                            let isAttribute = Dictionary[i].fields[j].Target.indexOf('attributes') > -1;\r\n                            let NewValue = Dictionary[i].fields[j].BuildValue($this._Data);\r\n                            if (isAttribute)\r\n                            {\r\n\r\n                                Dictionary[i].obj.attributes[Dictionary[i].fields[j].Target.split(\".\")[1]].value = NewValue;\r\n                            }\r\n                            else {\r\n                                Dictionary[i].obj[Dictionary[i].fields[j].Target] = Dictionary[i].fields[j].BuildValue($this._Data);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                };\r\n                this._Rebuilder = function (data = $this._Data) {\r\n                    let lines = \"\";\r\n                    //$this.Content.style.display = '';\r\n                    if ($this._PageCursor === 0 )\r\n                        $this.Content.querySelectorAll('.mt-line, .mt-paginator, .mt-empty').forEach(function(item) {item.remove();});\r\n                    //pagination check\r\n                    let NextCount;\r\n                    //let line;\r\n                    let Limit = data.length;\r\n                    $this._DataCount = DataCount > 0 ? DataCount : Limit ;\r\n                    if ($this.PageSize > 0)\r\n                    {\r\n                        //  debugger;\r\n                        $this._DataCount = $this._DataCount > 0 ? $this._DataCount : data.length ;\r\n                        let paginator = $this.Content.querySelector('.mt-paginator');\r\n                        if (paginator !== null)\r\n                            paginator.remove();\r\n                        Limit = parseInt($this._PageCursor) + parseInt($this.PageSize);\r\n                        if (Limit > $this._DataCount && $this._DataCount > 0)\r\n                            Limit = $this._DataCount;\r\n                        //how much will be load in next step\r\n                        NextCount = $this._DataCount - Limit;\r\n                        if (NextCount > $this.PageSize)\r\n                            NextCount = $this.PageSize;\r\n                    }\r\n                    if ($this.Type === \"ItemList\" && data.length === 0 && $this.EmptyMessage !== \"\" && !$this.isEmptyHide)\r\n                    {\r\n                        let tag = $this.ListElement.match(/\\s?([\\w]+) /)[0].replace(/\\s/g, \"\");\r\n                        let empty = document.createElement(tag);\r\n                        empty.classList.add('mt-empty');\r\n                        empty.innerHTML = $this.EmptyMessage;\r\n                        $this.Content.appendChild(empty);\r\n                        return;\r\n                    }\r\n                    else if ($this.Type === \"ItemList\" && data.length === 0 && $this.isEmptyHide){\r\n                        $this.Content.style.display = 'none';\r\n                        return;\r\n                    }\r\n                    else if (data.length === 0) {\r\n                        return;\r\n                    }\r\n                    //linebuilding\r\n                    for (let i = $this._PageCursor; i < Limit; i++)\r\n                        lines += $this._LineBuilder(data[i], i, data.length);\r\n                    //appending\r\n                    //   debugger;\r\n                    if ($this.Content.children.length < 1)\r\n                    {\r\n                        $this.Content.innerHTML = lines;\r\n                    }\r\n                    else{\r\n                        lines = Lure.CreateElementsFromString(lines, $this.Content.tagName);\r\n                        if (lines !== null)\r\n                            lines.forEach(function (item) {\r\n                                $this.Content.appendChild(item);\r\n                            });\r\n                    }\r\n                    /*{\r\n                     lines += $this._LineBuilder(data[i], i, data.length);\r\n                     //if should to save changed class list after rebuild\r\n                     if (data[i] && data[i].$classlist)\r\n                     {\r\n                     line = $(line);\r\n                     line.attr('class', data[i].$classlist);\r\n                     lines +=line[0].outerHTML;\r\n                     }\r\n                     else{\r\n                     lines += line;\r\n                     }\r\n                     }*/\r\n                    //save cursor index\r\n                    if ($this.PageSize > 0)\r\n                        $this._PageCursor = Limit;\r\n                    //PAGINATION BUILD\r\n                    //limit data case\r\n                    if ($this.PageSize > 0 && $this._PageCursor < $this._DataCount){\r\n                        let also;\r\n                        let showAll = `<span>  (Не загружено ${($this._DataCount- $this._PageCursor)}) </span>`;\r\n                        if ($this.isShowAllButton)\r\n                        {\r\n                            showAll = `<span> или </span><span class=\"mt-btn-nextAll dotted pointer\"> Все ( ${($this._DataCount - $this._PageCursor)} )</span>`;\r\n                        }\r\n                        let isTable = $this.Content.tagName === 'table' || $this.Content.tagName === 'thead' || $this.Content.tagName === 'tbody';\r\n                        if (isTable)\r\n                        {\r\n                            let colspan = $this.Content.querySelector(\"tr:first-child th\").length + 1;\r\n\r\n                            also = `<tr class=\"mt-paginator\"><td colspan=\"${colspan}\" class=\"element block-head\"><span class=\"tpltr-next dotted pointer\">Показать еще ${NextCount}</span>${showAll}</td></tr>`;\r\n                            also = Lure.CreateElementFromString(also, $this.Content.tagName);\r\n                        }\r\n                        else {\r\n                            also = Lure.CreateElementFromString(`<div class='mt-paginator'><span class=\"mt-btn-next dotted pointer\">Показать еще ${NextCount}</span>${showAll}</div>`);\r\n\r\n                        }\r\n                        let btnNext = also.querySelector('.mt-btn-next');\r\n                        //console.log('btnNext', btnNext);\r\n                        btnNext.onclick = function(){\r\n                            if ($this._PageCursor >= data.length)\r\n                                $this._PageGet($this._PageCursor, $this.PageSize, BuildWithIt);\r\n                            else\r\n                                Build();\r\n\r\n                        };\r\n                        let btnNextAll = also.querySelector('.mt-btn-nextAll');\r\n                        btnNextAll.onclick = function(){\r\n                            $this.PageSize = $this._DataCount;\r\n                            if ($this._PageGet !== null)\r\n                                $this._PageGet($this._PageCursor, ($this._DataCount - $this._PageCursor), BuildWithIt);\r\n                            else\r\n                                Build();\r\n                        };\r\n                        $this.Content.appendChild(also);\r\n\r\n                    }\r\n\r\n                };\r\n                const Build = function () {\r\n                    $this.BeforeBuild();\r\n\r\n                    if ($this.Type === \"Refresh\")\r\n                        Refresher();\r\n                    else if ($this.Type === \"ItemList\"/* && $this._Data.length > 0*/)\r\n                        $this._Rebuilder();\r\n\r\n\r\n                    $this.AfterBuild();\r\n                };\r\n                const BuildWithIt = function (data) {\r\n                    for (let i = 0; i < data.length; i++)\r\n                        $this._Data.push(data[i]);\r\n                    Build();\r\n                };\r\n                // = Rebuild1er;\r\n\r\n                //#### METHODS\r\n                this.FieldAdd = function (element) {\r\n                    let elemAttributes = element.attributes;\r\n                    let fields = [];\r\n                    let WhatFields = -1; // 0-att only, 1-innerHTML only, 2-both\r\n                    //find fields in attributes\r\n                    for (let i = 0; i < elemAttributes.length; i++)\r\n                    {\r\n                        if (elemAttributes[i].value.indexOf(\"{{\") > -1)\r\n                        {\r\n                            if (elemAttributes[i].name !== 'value')\r\n                                fields.push({\r\n                                    Target: 'attributes.'+elemAttributes[i].name,\r\n                                    BuildValue: Lure.Compile(elemAttributes[i].value)\r\n                                });\r\n                            else {\r\n                                fields.push({\r\n                                    Target: elemAttributes[i].name,\r\n                                    BuildValue: Lure.Compile(elemAttributes[i].value)\r\n                                });\r\n                            }\r\n                            WhatFields = 0;\r\n                        }\r\n                    }\r\n                    //innerHTML check\r\n                    if (element.childNodes.length < 2)\r\n                    {\r\n                        if (element.innerHTML.indexOf(\"{{\") > -1)\r\n                        {\r\n                            fields.push({\r\n                                Target: \"innerHTML\",\r\n                                BuildValue: Lure.Compile(element.innerHTML)\r\n                            });\r\n                            WhatFields = WhatFields !==0 ? 1:2; //1 if no att, 2 if att exists\r\n\r\n                        }\r\n\r\n                    }\r\n                    if (WhatFields > -1)\r\n                    {\r\n                        Dictionary.push( {\r\n                            obj: element,\r\n                            fields: fields\r\n                        } );\r\n                    }\r\n                };\r\n                this.Refresh = function(data = null, index = null){\r\n                    $this.PageSize = $this._PageSize;\r\n                    $this._PageCursor = 0;\r\n                    if (data !== null)\r\n                        $this._Data = data;\r\n                    $this.PageCursor = 0;\r\n                    if (index === null)\r\n                        Build();\r\n                    else\r\n                        $this.RefreshOne(index);\r\n                };\r\n                this.RefreshOne = function (i) {\r\n                    let newItem = Lure.CreateElementFromString($this._LineBuilder($this._Data[i], i, $this._Data.length), $this.Content.tagName);\r\n                    let itemOld = $this.Items[i];\r\n                    $this.Items[i].parentNode.replaceChild(newItem, itemOld);\r\n                };\r\n                this.Add = function(item, extraclass = false, isPrepend = false, addData = true){\r\n                    if ($this._Data.length === 0 && $this.Content.querySelector(\".mt-empty\") !== null)\r\n                        $this.Content.querySelector(\".mt-empty\").remove();\r\n                    let fragment = document.createDocumentFragment();\r\n                    let elem = document.createElement($this.Content.tagName);\r\n                    let i;\r\n                    if (!isPrepend)\r\n                    {\r\n                        i = $this._Data.length;\r\n                        if (!addData)\r\n                            i--;\r\n                        elem.innerHTML = $this._LineBuilder(item, i, i+1);\r\n                        while (elem.childNodes[0]) {\r\n                            fragment.appendChild(elem.childNodes[0]);\r\n                        }\r\n                        if (extraclass)\r\n                            fragment.children[0].classList.add(extraclass);\r\n                        if (addData)\r\n                            $this._Data.push(item);\r\n                        $this.Content.appendChild(fragment);\r\n                    }\r\n                    else{\r\n                        i = 0;\r\n                        //change data-line attributes\r\n                        $this.Items.forEach(function (item) {\r\n                            console.log(item);\r\n                            console.log(item.dataset['line']);\r\n                            item.dataset['line'] =  parseInt( item.dataset['line'] ) + 1;\r\n                        });\r\n                        //TODO rendered indexes not changings\r\n\r\n                        elem.innerHTML =  $this._LineBuilder(item, 0, $this._Data.length+1);\r\n                        while (elem.childNodes[0]) {\r\n                            fragment.appendChild(elem.childNodes[0]);\r\n                        }\r\n                        if (extraclass)\r\n                            fragment.children[0].classList.add(extraclass);\r\n                        if (addData)\r\n                            $this._Data.unshift(item);\r\n                        $this.Content.prepend(fragment);\r\n                    }\r\n                    //server saver\r\n                    if ($this.LineAdd !== null)\r\n                    {\r\n                        $this.LineAdd(item, function () { //remove extraclass callback\r\n                            let x = $this.Content.querySelector('.'+extraclass);\r\n                            if (x)\r\n                                x.classList.remove(extraclass);\r\n                        });\r\n                    }\r\n                    $this.AfterAdd(item, i);\r\n                };\r\n                this.Edit = function (itemData, i){\r\n                    console.log('edit itemData', i, itemData);\r\n                    Array.from($this.Items).filter(x => parseInt(x.dataset['line'])===i)[0].classList.add('editable-waiting');\r\n                    $this.LineSave(i, '$this', itemData,\r\n                        function () {\r\n                            $this._Data[i] = itemData;\r\n                            $this.RefreshOne(i);\r\n                        });\r\n\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {int} index\r\n                 * @param {bool} removeData\r\n                 * @constructor\r\n                 */\r\n                this.Remove = function(index, removeData = true){\r\n                    //TODO rendered indexes not changings\r\n                    $this.Content.querySelector(`.mt-line[data-line=\"${index}\"]`).remove();\r\n                    for (let j = index; j < $this.Items.length; j++){\r\n                        $this.Items[j].dataset['line'] =  parseInt( $this.Items[j].dataset['line'] ) - 1;\r\n                        $this.Items[j].querySelectorAll('[data-line]').forEach(function (item) {\r\n                            item.dataset['line'] = parseInt( item.dataset['line'] ) - 1;\r\n                        })\r\n                    }\r\n                    if (removeData)\r\n                        $this._Data.splice(index, 1);\r\n                    if ($this._Data.length === 0)\r\n                        $this.Refresh();\r\n                };\r\n                this.SwitchToEditMode = function () {\r\n                    Lure.Editable.EditMode = true;\r\n                    Lure.SelectAll('.editable', $this.Content).forEach(function (item) {\r\n                        // console.log(item);\r\n                        Lure.Editable.AddEdits(item);\r\n                    });\r\n                };\r\n\r\n                //### CONSTRUCTOR\r\n                if ( Array.isArray(this._Data) ){\r\n                    this.Type = \"ItemList\";\r\n                    const isListElementCssSelector = ListElement.match(/^[a-zA-Z0-9.,\\-_ *#]+$/g) !== null;\r\n                    if (isListElementCssSelector){\r\n                        let element = this.Content.querySelector(ListElement);\r\n                        element.classList.add('mt-line');\r\n                        ListElement = element.outerHTML;\r\n                        element.remove();\r\n                    }\r\n                    else{\r\n                        let list_element = ListElement.match(/<[^>]+>/)[0];\r\n                        let list_elementClassed;\r\n                        let pos = list_element.indexOf('class=\"');\r\n                        if (pos < 0)\r\n                        {\r\n                            list_elementClassed = list_element.substr(0,list_element.length - 1) + ' class=\"mt-line\"' + list_element.substr(list_element.length-1);\r\n                        }\r\n                        else\r\n                        {\r\n                            pos = list_element.indexOf('\"', pos+8);\r\n                            list_elementClassed = list_element.substr(0,pos) + \" mt-line\" + list_element.substr(pos);\r\n                        }\r\n                        ListElement = ListElement.replace(list_element, list_elementClassed);\r\n                    }\r\n                    //add data-line attribute\r\n                    ListElement = ListElement.replace(/<[\\s\\S]+?(>)/, function (a, b) {\r\n                        return a.replace(b, ' data-line=\"{{i}}\">')\r\n                    });\r\n                    this.ListElement = ListElement;\r\n                    this._LineBuilder = Lure.Compile(ListElement, true);\r\n                    if (ListElement.match(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/) !== null)\r\n                    {\r\n                        this.isHasEditable = true;\r\n                        if (EditModeSwitch !== null)\r\n                            Lure.Select(EditModeSwitch).addEventListener('change', function (e) {\r\n                                if ( e.currentTarget.checked ){\r\n                                    $this.SwitchToEditMode();\r\n                                }\r\n                                else{\r\n                                    Lure.Editable.EditMode = false;\r\n                                    document.body.click();\r\n                                }\r\n                            });\r\n                    }\r\n                    this.Content.MonsieurController = this;\r\n                    this.Content.classList.add('mt-content');\r\n\r\n                }\r\n                else {\r\n                    this.Type = \"Refresh\";\r\n                    let AllChildren = Array.prototype.slice.call( this.Content.querySelectorAll('*:not(g):not(path):not(clipPath):not(text):not(br)'));\r\n                    AllChildren.push( this.Content);\r\n                    AllChildren.forEach(function (item) {\r\n                        $this.FieldAdd(item);\r\n                    })\r\n                }\r\n                Lure.TemplatorList.push(this);\r\n                if (!NoBuild)\r\n                    Build();\r\n            }\r\n            get Data(){\r\n                return this._Data;\r\n            }\r\n            set Data(data){\r\n                this._Data = data;\r\n            }\r\n            get Items(){\r\n                return this.Content.querySelectorAll('.mt-line');\r\n            }\r\n        },\r\n        TreeBuilder: class TreeBuilder{\r\n            constructor(\r\n                {\r\n                    Target = null,                          //{string, HTMLElement}\r\n                    Data = [],\r\n                    ListElement = null,\r\n                    Drop = false,                       //{bool}   - horisontal menu with drop down subtrees;\r\n                    SubSelector = null,                 //{string} - cssselector of element, where put branches\r\n                    SubSelectorHandler = function(){},  //{function} - click handle on SubSelector Element (hide/show branch for exaple)\r\n\r\n                    BeforeBuild = function(){},\r\n                    AfterBuild = function(){},\r\n\r\n                    Parent = null               //Lure.Content, which owns this Controller\r\n                }\r\n            )\r\n            {\r\n                //### DEFINES\r\n                this.isController = true;\r\n                this.Content = Lure.Select(Target);\r\n                this.Target = this.Content;\r\n                this.Parent = Parent;\r\n                this._Data = Data;\r\n                this.SubSelector = SubSelector;\r\n                this.SubSelectorHandler = SubSelectorHandler.bind(this);\r\n                this.BeforeBuild = BeforeBuild.bind(this);\r\n                this.AfterBuild = AfterBuild.bind(this);\r\n                let SubTreeClass = Drop ? 'mtb-sub_tree dropable':'mtb-sub_tree';\r\n                let Lvl = 0;\r\n                let Branch = ListElement === null ? this.Content.innerHTML : ListElement;\r\n                if (this.SubSelector === null){\r\n                    this.SubSelector = '.mtb-sub_tree';\r\n                    Branch = Branch.replace(/^([\\s\\S]*)(<\\/\\w+>)$/, function (match, html, entag) {\r\n                        entag = `<div class=\"${SubTreeClass}\"></div>${entag}`;\r\n                        return html+entag\r\n                    })\r\n                }\r\n                this.LineBuilder = Lure.Compile(Branch, true);\r\n                let $this = this;\r\n\r\n                let Index = 0;          //unque serial number of branch\r\n\r\n                let BuildElement = function(obj, key, indexJ) {\r\n                    Index++;\r\n                    let extra = {\r\n                        $lvl: Lvl,\r\n                        $key: key,\r\n                        $index: Index,\r\n                        $j: indexJ\r\n                    };\r\n                    let line = Lure.CreateElementFromString($this.LineBuilder(obj, Index, null, extra));\r\n                    line.classList.add('mtb-branch');\r\n                    for (let key in obj)\r\n                    {\r\n                        let ObjItem = obj[key];\r\n                        if (Array.isArray(ObjItem))\r\n                        {\r\n                            Lvl++;\r\n                            for (let i = 0; i < ObjItem.length; i++)\r\n                            {\r\n                                if ($this.SubSelector === null)\r\n                                {\r\n                                    line.appendChild(  BuildElement(ObjItem[i], key, i) );\r\n                                }\r\n                                else\r\n                                {\r\n                                    line.classList.add('mtb-has_tree');\r\n                                    if (Drop)\r\n                                        line.classList.add('dropable');\r\n                                    let sub = line.querySelector($this.SubSelector);\r\n                                    sub.appendChild(  BuildElement(ObjItem[i], key, i) );\r\n                                }\r\n                            }\r\n                            Lvl--;\r\n                        }\r\n                    }\r\n                    return line;\r\n                };\r\n                let Build = function () {\r\n                    $this.BeforeBuild();\r\n                    if (Array.isArray($this._Data))\r\n                    {\r\n                        $this.Content.innerHTML = '';\r\n                        Lvl++;\r\n                        for (let j = 0; j < $this._Data.length; j++)\r\n                            $this.Content.appendChild(  BuildElement($this._Data[j], \"root\", 0) );\r\n                        Lvl--;\r\n                    }\r\n                    else{\r\n                        $this.Content.appendChild(BuildElement($this._Data, \"root\", 0));\r\n                    }\r\n                    Lvl = 0;\r\n                    Index = 0;\r\n                    $this.AfterBuild();\r\n\r\n                };\r\n\r\n                Build(this._Data);\r\n\r\n                //### METHODS\r\n                this.Refresh = function (data=$this._Data) {\r\n                    $this._Data = data;\r\n                    Build();\r\n                }\r\n\r\n            }\r\n            get Data(){\r\n                return this._Data;\r\n            }\r\n            set Data(data){\r\n                this._Data = data;\r\n            }\r\n        }\r\n    }\r\n};\r\n//register plugin\r\nLure.Content = Lure.Plugin.Content.Content;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Lure.Content = Lure.Content;\r\n\r\n"]}