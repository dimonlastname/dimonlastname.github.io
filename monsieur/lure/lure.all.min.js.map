{"version":3,"sources":["lure.all.js","lure.core.js","lure.content.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","Date","format","Lure","_DateFormat","this","LureClass","Plugin","$this","Debug","isEditableEventsEnabled","regexEach","RegExp","regexIfOuter","regexIfInner","regexExpressions","regexEditable","spaces","preCompileIfOuter","s","replace","bkt","condition","expression","preParseObjectChecker","preCompileIfInner","preCompileEach","EachList","match","lvl","current","isInnerEach","StartPoint","indexOf","EndPoint","prevStarts","slice","prevEnds","string_Each","ObjectName","a","name","eachComplied","repeat","preParse","preCompileEditable","editable","content","b","checking","c","containsSpecialObject","containsSpecialObjectTreeBuiler","isSpecialSymbol","isString","isIterator","isNumber","isNaN","parent","isCheckExpression","arguments","undefined","Compile","DomString","isListElement","string_Function","val","function_f","Function","e","console","info","error","_EditablesEventListenerRun","AddEventListenerGlobal","Editable","RemoveEdits","AddEdits","currentTarget","closest","value","valPrev","parentElement","dataset","classList","add","remove","keyCode","Save","EditableElement","querySelector","isHasEditablesEventsEnabled","document","addEventListener","contains","querySelectorAll","CreateElementFromString","string","ownerTagName","frag","createDocumentFragment","elem","createElement","innerHTML","childNodes","appendChild","CreateElementsFromString","nodes","push","Select","query","Node","SelectAll","Selector","tagName","eventName","selector","handler","thisArg","isIt","event","_EventClone","elems","call","isVisible","HTMLElement","isVisibleSelf","element","ContentStyle","window","getComputedStyle","display","opacity","visibility","parseInt","minWidth","width","minHeight","height","isVisibleParent","ClonedEvent","clone","p","d","getOwnPropertyDescriptor","get","set","setPrototypeOf","GetFileText","url","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","Error","statusText","location","protocol","host","href","substring","lastIndexOf","log","open","send","GetInlineSize","fontSize","hiddenStyle","k","style","all","setAttribute","body","sizes","clientWidth","clientHeight","removeChild","isNumeric","n","parseFloat","isFinite","date","data","getDate","mo","getMonth","year","getFullYear","hour","getHours","min","getMinutes","sec","getSeconds","toString","Culture","MonthNames","EditMode","RemoveWaiting","waiedites","forEach","item","editables","_innerHTML","ValuePrev","SaveButton","string_Select","SelectData","eval","Property","SelectOptions","attributes","EditType","focus","select","ValueNew","Content","Controller","MonsieurController","DataObject","Data","ErrorHint","LineSave","Settings","DialogBlur","DialogAnimation","EditableClass","EditableWaiting","MonthNamesShort","WeekDays","WeekDaysShort","TemplatorList","ContentList","_DialogCount","perfStart","text","x","Math","floor","performance","now","Caption","Message","_ref","_ref$CaptionColor","CaptionColor","_ref$CaptionBackgroun","CaptionBackground","_ref$OnAgree","OnAgree","_ref$OnCancel","OnCancel","activeElement","blur","dialog","title","color","background","msg","buttons","btnOk","onclick","wrap","getElementsByClassName","btnCancel","Confirm","object","div","position","animate","duration","setTimeout","onfinish","Control","Templator","TreeBuilder","MonsieurContent","_ref2","MakeContent","Array","isArray","group","matche","Target","construct","Type","Name","AllContents","Refresh","bind","GetParent","stringName","Parent","GetContent","found","searcher","isContent","GetIndex","children","AddEventListener","func","AddTutor","buttonTutorStarter","MonsieurTutor","_SortBy","f","sort","_Sorting","Sorted","kf","hasOwnProperty","_FilterBy","filters","_d","_Filter","_DataDefault","_loop","Filter","filter","toLowerCase","_sorter","_Data","PageSize","_PageSize","_PageCursor","_Rebuilder","mr","PerformanceNow","Props","GetSet","Methods","Show","isActive","Active","transitionDuration","durationAni","animationDuration","Hide","Dialog","DialogWrapper","zIndexWrapper","zIndex","zIndexContent","Number","BeforeShow","Shower","clearTimeout","__private","ToggleTimer","Disactive","Hider","Toggle","MonsieurControl","OnClick","SubContent","cname","TitleContent","Title","Visible","isController","isHasEditable","Sorting","_loop2","Filtering","_loop3","from","AfterBuild","_ref2$Target","_ref2$Content","_ref2$CSS","CSS","_ref2$Name","_ref2$Global","Global","_ref2$Title","_ref2$Type","_ref2$Visible","_ref2$SubContent","_ref2$Dialog","_ref2$DialogWrapper","_ref2$DialogBlur","_ref2$DialogAnimation","_ref2$Show","_ref2$Hide","_ref2$Shower","_ref2$Hider","_ref2$BeforeShow","_ref2$Refresh","_ref2$Sorting","_ref2$Filtering","_ref2$OnClick","_ref2$Controller","_ref2$Control","_ref2$Props","_ref2$Methods","_ref2$GetSet","_ref2$AfterBuild","_ref2$Disabled","Disabled","_ref2$Parent","then","node","RefreshOne","removeData","Remove","itemData","extraclass","isPrepend","addData","Add","index","Edit","t","Items","control","owner","_this","controls","_loop4","random","substr","_Content","isGlobal","OnChange","onchange","type","_ref3","_ref3$Target","_ref3$Data","_ref3$ListElement","ListElement","_ref3$EmptyMessage","EmptyMessage","_ref3$EmptyHide","EmptyHide","_ref3$PageSize","_ref3$DataCount","DataCount","_ref3$PageGet","PageGet","_ref3$ShowAllButton","ShowAllButton","_ref3$LineSave","line","property","newValue","callback","_ref3$LineAdd","LineAdd","dataObject","_ref3$EditModeSwitch","EditModeSwitch","_ref3$NoAnimation","DataSaveAll","NoAnimation","_ref3$NoBuild","NoBuild","_ref3$BeforeBuild","BeforeBuild","_ref3$AfterBuild","_ref3$AfterAdd","AfterAdd","_ref3$Parent","_DataCount","_PageGet","isShowAllButton","isNoAnimaton","isEmptyHide","Dictionary","_Dictionary","Refresher","j","fields","isAttribute","NewValue","BuildValue","split","lines","NextCount","Limit","paginator","tag","empty","_LineBuilder","also","showAll","isTable","colspan","btnNext","BuildWithIt","Build","btnNextAll","FieldAdd","elemAttributes","WhatFields","PageCursor","newItem","itemOld","parentNode","replaceChild","fragment","unshift","prepend","splice","SwitchToEditMode","isListElementCssSelector","outerHTML","list_element","list_elementClassed","pos","checked","click","AllChildren","_ref4","_ref4$Target","_ref4$Data","_ref4$ListElement","_ref4$Drop","Drop","_ref4$SubSelector","SubSelector","_ref4$SubSelectorHand","SubSelectorHandler","_ref4$BeforeBuild","_ref4$AfterBuild","_ref4$Parent","SubTreeClass","Lvl","Branch","html","entag","LineBuilder","Index","BuildElement","indexJ","extra","$lvl","$key","$index","$j","ObjItem","sub","TargetButton","TargetContent","MT","ContentBG","_Description","_Step","_ButtonNext","_ButtonStop","ButtonNextText","TutorPosition","temp","ColorTransparent","backgroundColor","ElemCssRestore","Element","outline","nElements","ElemCssSet","Run","desc","GoStep","Stop","ElementDesc","ElemParent","posX","offsetLeft","posY","offsetTop","innerWidth","documentElement","scrollTop","innerHeight","offsetHeight","left","top","MonsieurLoading","_ref5","_ref5$Target","cx","cy","_DoArc","radius","maxAngle","angle","rad","PI","cos","y","sin","svg","Timeout","TimeoutHide","MonsieurTooltip","_ref6","_ref6$Target","_ref6$Attribute","Attribute","_ref6$Delay","Delay","_ref6$Time","Time","_ref6$Custom","Cursor","Custom","_ref6$AfterBuild","ToolTip","Timer","Destr"],"mappings":"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","file":"lure.all.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//\n// Lure Framework v0.9.1 [29.08.2017]\n//\n//<utils>;\nif (!Date.prototype.format) {\n    Date.prototype.format = function (format) {\n        return Lure._DateFormat(this, format);\n    };\n}\n//</utils>\nvar Lure = function () {\n    var LureClass = function () {\n        function LureClass() {\n            _classCallCheck(this, LureClass);\n\n            this.Plugin = {};\n            var $this = this;\n            this.Debug = false;\n            this.isEditableEventsEnabled = false;\n            //regexes\n            var regexEach = new RegExp(/{{#each\\s+([^}]+)}}/g);\n            var regexIfOuter = new RegExp(/{{#if\\s+([^}]+)}}([\\s\\S]*?){{#endif}}/g);\n            var regexIfInner = new RegExp(/{{#if([\\s\\S]*?)}}/g);\n            var regexExpressions = new RegExp(/{{([^#}]+)}}/g);\n            var regexEditable = new RegExp(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/g);\n            //compile helpers\n            var spaces = \"    \";\n            var preCompileIfOuter = function preCompileIfOuter(s) {\n                s = s.replace(/#IF/g, '#if').replace(/#ENDIF/g, '#endif').replace(regexIfOuter, function (bkt, condition, expression) {\n                    return '`+\\n/* OUTER \"IF\" */\\n(function($this){\\n    if (' + preParseObjectChecker(condition) + ') {\\n        return `' + expression + '`;\\n    }\\n    return \\'\\';\\n})($this)+`';\n                });\n                return s;\n            };\n            var preCompileIfInner = function preCompileIfInner(s) {\n                s = s.replace(regexIfInner, function (s, condition) {\n                    condition = condition.replace(/&gt;/g, \">\").replace(/&lt;/g, \"<\").replace(/#less/g, \" < \").replace(/#more/g, \" > \").replace(/&amp;/g, \"&\").replace(/\\|/g, '\"');\n                    return '`+\\n    /* LOCAL \"IF\" */\\n    (function(){\\n        return (' + condition + '); \\n        return \\'\\';})()+`';\n                });\n                return s;\n            };\n            var preCompileEach = function preCompileEach(s) {\n                s = s.replace(/{{#EACH/g, \"{{#each\").replace(/{{#ENDEACH/g, \"{{#endeach\");\n                var EachList = s.match(regexEach);\n                var lvl = 0;\n                if (EachList !== null) {\n                    for (var i = EachList.length - 1; i >= 0; i--) {\n                        var current = EachList[i];\n                        var isInnerEach = false;\n                        lvl++;\n                        var StartPoint = s.indexOf(current);\n                        var EndPoint = s.indexOf(\"{{#endeach}}\", StartPoint);\n\n                        var prevStarts = s.slice(0, StartPoint).match(regexEach);\n                        prevStarts = prevStarts !== null ? prevStarts.length : 0;\n                        var prevEnds = s.slice(0, StartPoint).match(/{{#endeach}}/g);\n                        prevEnds = prevEnds !== null ? prevEnds.length : 0;\n                        if (prevStarts > prevEnds) {\n                            isInnerEach = true;\n                            lvl = 0;\n                        }\n                        ////\n                        var string_Each = s.slice(StartPoint, EndPoint + 12);\n                        var expression = string_Each.slice(current.length, string_Each.length - 12);\n                        var ObjectName = current.replace(/{{#each\\s+([\\s\\S]+)}}/, function (a, name) {\n                            return name;\n                        });\n                        ObjectName = preParseObjectChecker(ObjectName);\n                        //the each template\n                        var eachComplied = '`+' + spaces.repeat(lvl) + '/* EACH */(function(inner, $parent){                                                                   \\r\\n' + spaces.repeat(lvl) + '    if (!inner || (Object.keys(inner).length === 0 && inner.constructor === Object && isNaN(inner)))   \\r\\n' + spaces.repeat(lvl) + '        return \"\";                                                                                     \\r\\n' + spaces.repeat(lvl) + '    let string_result= \"\";                                                                             \\r\\n' + spaces.repeat(lvl) + '    for(let j = 0; j < inner.length; j++){                                                             \\r\\n' + spaces.repeat(lvl) + '        let $this = inner[j];                                                                          \\r\\n' + spaces.repeat(lvl) + '        let o = inner[j];                                                                              \\r\\n' + spaces.repeat(lvl) + '        string_result = string_result + \\`' + preParse(expression) + '\\`;                                \\r\\n' + spaces.repeat(lvl) + '    }                                                                                                  \\r\\n' + spaces.repeat(lvl) + '    return string_result;                                                                              \\r\\n' + spaces.repeat(lvl) + '})(' + ObjectName + ', {$parent: typeof $parent !== \"undefined\"?$parent:null, $this: $this, i: i} ) +`         ';\n                        s = s.replace(string_Each, eachComplied);\n                    }\n                }\n                return s;\n            };\n            var preCompileEditable = function preCompileEditable(s) {\n                return s.replace(regexEditable, function (match, editable, content) {\n                    match = match.replace(/<[\\s\\S]+?(>)/, function (a, b) {\n                        return a.replace(b, ' data-line=\"{{i}}\" data-property=\"' + content.replace('{{', '').replace('}}', '') + '\">');\n                    });\n                    return match.replace(content, '<div class=\"editable-helper editable-value\">' + content + '</div><div class=\"editable-helper editable-icon\"></div>');\n                });\n            };\n            var preParseObjectChecker = function preParseObjectChecker(ObjectName) {\n                //ok check if it's expression\n                if (ObjectName.indexOf('Available + Dis') > -1) ; //debugger;\n                function checking(c) {\n\n                    var s = c.replace(/\\s/g, \"\");\n                    var containsSpecialObject = s.indexOf('$item') > -1 || s.indexOf('$this') > -1 || s.indexOf('$parent') > -1;\n                    var containsSpecialObjectTreeBuiler = s.indexOf('$index') > -1 || s.indexOf('$j') > -1 || s.indexOf('$key') > -1 || s.indexOf('$lvl') > -1 || s.indexOf('$g.') > -1;\n                    var isSpecialSymbol = s === \"?\" || s.indexOf(\"=\") > -1 || s.indexOf(\">\") > -1 || s.indexOf(\"<\") > -1;\n                    var isString = s.match(/^[\"'\\\\][\\s\\S]*[\"'\\\\]$/) !== null;\n                    var isIterator = s === \"i\" || s === \"j\";\n                    var isNumber = !isNaN(s);\n                    if (containsSpecialObject || containsSpecialObjectTreeBuiler || isIterator || isNumber || isString || isSpecialSymbol) {\n                        if (s.indexOf('$g.') > -1) {\n                            //if global object\n                            return s.replace('$g.', '');\n                        }\n                        return c;\n                    }\n                    return \"o.\" + s;\n                }\n                ObjectName = ObjectName.replace(/[^\\-+\\/%()*]+/g, function (c) {\n                    var parent = c.match(/&/g);\n                    if (parent !== null) {\n                        for (var i = 0; i < parent.length; i++) {\n                            if (i < parent.length - 1) c = c.replace('&', \"$parent\");else c = c.replace('&', \"$parent.$this\");\n                        }\n                        return c;\n                    } else {\n                        return checking(c);\n                    }\n                });\n                ObjectName = ObjectName.replace(/\\\\'/g, \"'\");\n                ObjectName = \"(\" + ObjectName + \")\"; //fucking concatenation shell\n                return ObjectName;\n            };\n            var preParse = function preParse(c) {\n                var isCheckExpression = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n                return c.replace(regexExpressions, function (bkt, expression) {\n                    if (isCheckExpression) return '${' + preParseObjectChecker(expression) + '}';else return '${' + expression + '}';\n                });\n            };\n            /**\r\n             * Template compiler\r\n             * @param {string} DomString\r\n             * @param {boolean} isListElement\r\n             * @return {Function}\r\n             * @constructor\r\n             */\n            this.Compile = function (DomString, isListElement) {\n                DomString = DomString.replace(/[\\n]+/g, \" \").replace(/[ ]{3,}/g, '');\n                //shell '\n                DomString = DomString.replace(/'/g, \"\\\\'\");\n                //.replace(/&gt;/g, \">\").replace(/&lt;/g, \"<\").replace(/&amp;/g, \"&\");\n                if (isListElement) {\n                    DomString = preCompileEditable(DomString);\n                    DomString = preCompileIfOuter(DomString);\n                    DomString = preCompileEach(DomString);\n                }\n\n                DomString = preParse(DomString);\n                DomString = preCompileIfInner(DomString);\n                var string_Function = '\\nlet $this = o;\\nlet $item = o;\\nlet $num = i+1;\\nlet $denum = length-i;\\n//treebuilder\\'s\\nlet $index;\\nlet $key;\\nlet $lvl;\\nlet $j;\\nif (extra){\\n    $index = extra.$index;\\n    $key = extra.$key;\\n    $lvl = extra.$lvl;\\n    $j = extra.$j;\\n}\\nlet string_Result = \"\";\\nif (o === undefined || (Object.keys(o).length === 0 && o.constructor === Object && isNaN(o)) ) \\n    return \\'\\';\\nreturn `';\n                string_Function += DomString + '`;';\n                //if ie\n                //let isUnbrowser = true;\n                //if (isUnbrowser){\n                string_Function = string_Function.replace(/`/g, '\\'').replace(/\\$\\{([^}]*)\\}/g, function (match, val) {\n                    return '\\'+' + val + '+\\'';\n                });\n                //}\n\n                var function_f = void 0;\n                try {\n                    function_f = new Function('o', 'i', 'length', 'extra', string_Function);\n                } catch (e) {\n                    console.info(string_Function);\n                    console.error(e);\n                }\n                //console.log('Compiled:');\n                //console.log(f);\n                return function_f;\n            };\n            this._EditablesEventListenerRun = function (content) {\n                $this.AddEventListenerGlobal('dblclick', '.editable', function (e) {\n                    $this.Editable.RemoveEdits();\n                    $this.Editable.AddEdits(e.currentTarget);\n                }, content);\n                $this.AddEventListenerGlobal('click', '.editable-icon', function (e) {\n                    $this.Editable.RemoveEdits();\n                    $this.Editable.AddEdits(e.currentTarget.closest('.editable'));\n                }, content);\n                $this.AddEventListenerGlobal('dblclick', '.editable', function (e) {\n                    $this.Editable.RemoveEdits();\n                    $this.Editable.AddEdits(e.currentTarget);\n                }, content);\n                //editing\n                $this.AddEventListenerGlobal('change', '.editable-editor', function (e) {\n                    var val = e.currentTarget.value;\n                    var valPrev = e.currentTarget.parentElement.dataset['value'];\n                    if (val !== valPrev) e.currentTarget.parentElement.classList.add('editable-waiting');else e.currentTarget.parentElement.classList.remove('editable-waiting');\n                }, content);\n\n                $this.AddEventListenerGlobal('keyup', '.editable-textbox', function (e) {\n                    if (e.keyCode === 13) {\n                        $this.Editable.Save(e.currentTarget.closest('.editable'), e.currentTarget.value);\n                        return false;\n                    }\n\n                    var val = e.currentTarget.value;\n                    var valPrev = e.currentTarget.parentElement.dataset['value'];\n                    if (val !== valPrev) e.currentTarget.parentElement.classList.add('editable-waiting');else e.currentTarget.parentElement.classList.remove('editable-waiting');\n                }, content);\n\n                //save\n                $this.AddEventListenerGlobal('click', '.editable-save-button', function (e) {\n                    var EditableElement = e.currentTarget.closest('.editable');\n                    $this.Editable.Save(e.currentTarget.closest('.editable'), EditableElement.querySelector('.editable-editor').value);\n                }, content);\n\n                if ($this.isHasEditablesEventsEnabled) return;\n                document.addEventListener('click', function (e) {\n                    if (e.target.classList.contains('editable-helper') && document.querySelectorAll('.editable-helper, .editable-editing') !== null) {\n                        return;\n                    }\n                    $this.Editable.RemoveEdits();\n                });\n                $this.isHasEditablesEventsEnabled = true;\n            };\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {DocumentFragment}\r\n             * @constructor\r\n             */\n            this.CreateElementFromString = function (string) {\n                var ownerTagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"div\";\n\n                var frag = document.createDocumentFragment();\n                var elem = document.createElement(ownerTagName);\n                elem.innerHTML = string;\n                while (elem.childNodes[0]) {\n                    frag.appendChild(elem.childNodes[0]);\n                }\n                return frag.childNodes[0];\n            };\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {Array}\r\n             * @constructor\r\n             */\n            this.CreateElementsFromString = function (string) {\n                var ownerTagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"div\";\n\n                var frag = document.createDocumentFragment();\n                var elem = document.createElement(ownerTagName);\n                elem.innerHTML = string;\n                while (elem.childNodes[0]) {\n                    frag.appendChild(elem.childNodes[0]);\n                }\n                if (frag.childNodes.length > 0) {\n                    var nodes = [];\n                    for (var i = 0; i < frag.childNodes.length; i++) {\n                        nodes.push(frag.childNodes[i]);\n                    }return nodes;\n                }\n                return null;\n            };\n            /**\r\n             *\r\n             * @param {css, HTMLElement} query\r\n             * @param parent\r\n             * @return {HTMLElement}\r\n             * @constructor\r\n             */\n            this.Select = function (query) {\n                var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n\n                if (query === '' || query === null) return null;\n                return query instanceof Node ? query : parent.querySelector(query);\n            };\n            /**\r\n             *\r\n             * @param {string} Selector\r\n             * @param {HTMLElement} parent\r\n             * @return {NodeList}\r\n             * @constructor\r\n             */\n            this.SelectAll = function (Selector) {\n                var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n\n                if (typeof Selector === 'undefined') return [];\n                if (typeof Selector.tagName !== 'undefined' || Selector === document) return [Selector];\n                return parent.querySelectorAll(Selector);\n            };\n            /**\r\n             *\r\n             * @param {string} eventName\r\n             * @param {string} selector\r\n             * @param {function} handler\r\n             * @param {HTMLElement} parent\r\n             * @param {MonsieurContent} thisArg\r\n             * @constructor\r\n             */\n            this.AddEventListenerGlobal = function (eventName, selector, handler) {\n                var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : document;\n                var thisArg = arguments[4];\n\n                parent.addEventListener(eventName, function (e) {\n                    var target = e.target;\n                    var isIt = false;\n                    var event = Lure._EventClone(e);\n                    var elems = parent.querySelectorAll(selector);\n                    if (elems[0] === target) {\n                        event.currentTarget = target;\n                        isIt = true;\n                    }\n                    if (!isIt) {\n                        for (var i = 0; i < elems.length; i++) {\n                            if (elems[i].contains(target)) {\n                                isIt = true;\n                                event.currentTarget = target.closest(selector);\n                                break;\n                            }\n                        }\n                    }\n                    if (isIt) {\n                        handler.call(thisArg ? thisArg : event.currentTarget, event);\n                    }\n                });\n            };\n            /**\r\n             *\r\n             * @param {HTMLElement} HTMLElement\r\n             * @return {boolean}\r\n             */\n            this.isVisible = function (HTMLElement) {\n                //check invisible state;\n                var isVisibleSelf = function isVisibleSelf(element) {\n                    var ContentStyle = window.getComputedStyle(element);\n                    if (ContentStyle.display === \"none\" || ContentStyle.opacity === \"0\" || ContentStyle.visibility === \"hidden\") return false;\n                    //check for null-size\n                    if ((parseInt(ContentStyle.minWidth) === 0 || ContentStyle.minWidth === \"auto\") && parseInt(ContentStyle.width) === 0) return false;\n                    if ((parseInt(ContentStyle.minHeight) === 0 || ContentStyle.minHeight === \"auto\") && parseInt(ContentStyle.height) === 0) return false;\n                    return true;\n                };\n                var isVisibleParent = function isVisibleParent(element) {\n                    while (element.parentElement) {\n                        if (!isVisibleSelf(element.parentElement)) {\n                            return false;\n                        }\n                        element = element.parentElement;\n                    }\n                    return true;\n                };\n                if (!isVisibleSelf(HTMLElement)) {\n                    return false;\n                }\n\n                return isVisibleParent(HTMLElement);\n\n                return true;\n            };\n            /**\r\n             *\r\n             * @param e\r\n             * @return {ClonedEvent}\r\n             * @constructor\r\n             */\n            this._EventClone = function (e) {\n                function ClonedEvent() {}\n                var clone = new ClonedEvent();\n                for (var p in e) {\n                    var d = Object.getOwnPropertyDescriptor(e, p);\n                    if (d && (!d.writable || !d.configurable || !d.enumerable || d.get || d.set)) {\n                        Object.defineProperty(clone, p, d);\n                    } else {\n                        clone[p] = e[p];\n                    }\n                }\n                Object.setPrototypeOf(clone, e);\n                return clone;\n            };\n\n            this.GetFileText = function (url) {\n                return new Promise(function (resolve, reject) {\n                    var xhr = new XMLHttpRequest();\n                    xhr.onload = function () {\n                        resolve(xhr.response);\n                    };\n                    xhr.onerror = function () {\n                        reject(new Error('XMLHttpRequest Error: ' + this.statusText));\n                    };\n                    if (url.indexOf('..') > -1) url = url.replace('..', document.location.protocol + \"//\" + document.location.host);else {\n                        url = document.location.href.substring(0, document.location.href.lastIndexOf('/') + 1) + url;\n                    }\n                    console.log('Lure.GetFileText', url);\n                    xhr.open('GET', url);\n                    //xhr.setRequestHeader('Content-Type',\"text/plain; charset=x-user-defined\");\n                    xhr.send();\n                });\n            };\n            this.GetInlineSize = function (elem) {\n                var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1rem';\n\n                var hiddenStyle = \"left:-10000px;top:-10000px;height:auto;width:auto;position:absolute;\";\n                var clone = document.createElement('div');\n                for (var k in elem.style) {\n                    try {\n                        if (elem.style[k] !== '' && elem.style[k].indexOf(\":\") > 0) {\n                            clone.style[k] = elem.style[k];\n                        }\n                    } catch (e) {}\n                }\n                document.all ? clone.style.setAttribute('cssText', hiddenStyle) : clone.setAttribute('style', hiddenStyle);\n                clone.style.fontSize = fontSize;\n                clone.innerHTML = elem.innerHTML;\n                parent.document.body.appendChild(clone);\n                var sizes = { width: clone.clientWidth, height: clone.clientHeight };\n                parent.document.body.removeChild(clone);\n                return sizes;\n            };\n            this.isNumeric = function (n) {\n                return !isNaN(parseFloat(n)) && isFinite(n);\n            };\n            //this.Content = MonsieurContent;\n            //this.Templator = Templator;\n            /*editable*/\n            //this.Editables = '.editable-waiting';\n            this._DateFormat = function (date) {\n                var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"DD.MM.YYYY HH:mm:ss\";\n\n                if (date === null || typeof date === 'undefined') return '';\n                var data = date.getDate();\n                var mo = date.getMonth();\n                var year = date.getFullYear();\n                var hour = date.getHours();\n                var min = date.getMinutes();\n                var sec = date.getSeconds();\n\n                return format.replace('DD', data.toString().length < 2 ? '0' + data : data).replace('D', data).replace('MMM', $this.Culture.MonthNames[mo]).replace('MM', mo.toString().length < 2 ? '0' + mo : mo).replace('M', mo).replace('YYYY', year).replace('YY', year.toString().substring(2, 2)).replace('Y', year).replace('HH', hour.toString().length < 2 ? '0' + hour : hour).replace('hh', hour).replace('mm', min.toString().length < 2 ? '0' + min : min).replace('ss', sec.toString().length < 2 ? '0' + sec : sec);\n            };\n            this.Editable = {\n                EditMode: false,\n                RemoveWaiting: function RemoveWaiting() {\n                    var waiedites = document.querySelectorAll('.editable-waiting');\n                    waiedites.forEach(function (item) {\n                        item.classList.remove('editable-waiting');\n                    });\n                },\n                RemoveEdits: function RemoveEdits() {\n                    if ($this.Editable.EditMode) return;\n                    var editables = document.querySelectorAll('.editable-editing');\n                    editables.forEach(function (item) {\n                        item.innerHTML = item._innerHTML;\n                        item.classList.remove('editable-editing');\n                    });\n                    $this.Editable.RemoveWaiting();\n                },\n                AddEdits: function AddEdits(EditableElement) {\n                    EditableElement._innerHTML = EditableElement.innerHTML;\n                    var ValuePrev = EditableElement.querySelector('.editable-value').innerHTML;\n                    EditableElement.classList.add('editable-editing');\n                    EditableElement.dataset['value'] = ValuePrev;\n                    // EditableElement.style.paddingBottom = '0px';\n                    //EditableElement.style.paddingTop = '0px';\n                    var SaveButton = $this.Editable.EditMode ? '' : '<div class=\"editable-helper editable-save-button\"></div>';\n                    if (!EditableElement.dataset['object']) //if no selectable data, just text editor is needed\n                        {\n                            var EditType = EditableElement.dataset['type'];\n                            if (typeof EditType === 'undefined') EditType = 'text';\n                            EditableElement.innerHTML = '<input class=\"textbox editable-helper editable-editor editable-textbox\" type=\"' + EditType + '\" value=\"' + ValuePrev + '\"> ' + SaveButton;\n                            EditableElement.querySelector('.editable-editor').focus();\n                            EditableElement.querySelector('.editable-editor').select();\n                        } else //selectable data\n                        {\n                            var string_Select = '<select class=\"select editable-helper editable-editor editable-select\">';\n                            var SelectData = eval(EditableElement.dataset['object']);\n                            //console.log('-SelectData data-', SelectData);\n                            var Property = EditableElement.dataset['property'];\n                            var SelectOptions = '';\n                            SelectData.forEach(function (item) {\n                                //SelectOptions += ``\n                                var attributes = '';\n                                if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === _typeof({})) {\n                                    for (var key in item) {\n                                        attributes += ' data-property_' + key + '=\"' + item[key] + '\"';\n                                    }\n                                    string_Select += '<option class=\"editable-helper\" ' + attributes + '>' + item[Property] + '</option>';\n                                } else {\n                                    string_Select += '<option class=\"editable-helper\" ' + (item === ValuePrev ? \"selected\" : \"\") + '>' + item + '</option>';\n                                }\n                            });\n                            string_Select += '</select>' + SaveButton + '</div>';\n                            //let Select = Lure.CreateElementFromString(string_Select);\n                            //Select.value = ValuePrev;\n                            EditableElement.innerHTML = string_Select;\n                        }\n                },\n                Save: function Save(EditableElement, ValueNew) {\n                    var Content = EditableElement.closest('.mt-content');\n                    var Controller = Content.MonsieurController;\n                    var i = EditableElement.dataset['line'];\n                    var Property = EditableElement.dataset['property'];\n                    var DataObject = Controller.Data[i];\n                    if (ValueNew === '' || ValueNew === null || typeof ValueNew === 'undefined') {\n                        console.info('New Value is empty');\n                        Lure.ErrorHint(EditableElement, \"Пустое поле или неправильные данные\");\n                        return;\n                    }\n                    EditableElement.innerHTML = EditableElement._innerHTML;\n                    EditableElement.dataset['value'] = ValueNew;\n                    EditableElement.querySelector('.editable-value').innerHTML = ValueNew;\n                    EditableElement.classList.remove('editable-editing');\n                    if (Property !== '$this' && Property !== \"$item\") DataObject[Property] = ValueNew;else DataObject = ValueNew;\n\n                    //so server now\n                    Controller.LineSave(i, Property, ValueNew, function () {\n                        Lure.Editable.RemoveWaiting();\n                        if (Property !== '$this' && Property !== \"$item\") Controller.Data[i][Property] = ValueNew;else Controller.Data[i] = ValueNew;\n                    });\n                }\n            };\n            ///\n            this.Settings = {\n                DialogBlur: null, //{string, jQuery, HTMLElement} - where blur on dialog\n                DialogAnimation: 'monsieur-animation-dialog', //{string} -  css-animation class\n                EditableClass: 'editable',\n                EditableWaiting: 'editable-waiting'\n            };\n            this.Culture = {\n                MonthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"],\n                MonthNamesShort: [\"янв.\", \"фев.\", \"мар.\", \"апр.\", \"май\", \"июн.\", \"июл.\", \"авг.\", \"сен.\", \"окт.\", \"ноя.\", \"дек.\"],\n                WeekDays: [\"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\", \"Воскресенье\"],\n                WeekDaysShort: [\"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\", \"вс\"]\n            };\n            this.TemplatorList = [];\n            this.ContentList = {};\n\n            /////\n            this._DialogCount = 0;\n        }\n\n        _createClass(LureClass, [{\n            key: 'Perf',\n            value: function Perf(perfStart) {\n                var text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Perf';\n\n                var x = Math.floor((window.performance.now() - perfStart) * 100) / 100;\n                console.info(\"[\" + text + \"]: \" + x + \"ms\");\n                return x;\n            }\n\n            /**\r\n             * Confirmation dialog\r\n             * @param Caption\r\n             * @param Message\r\n             * @param CaptionColor\r\n             * @param CaptionBackground\r\n             * @param OnAgree\r\n             * @param OnCancel\r\n             * @constructor\r\n             */\n\n        }, {\n            key: 'Confirm',\n            value: function Confirm() {\n                var Caption = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Achtung\";\n                var Message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n                var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n                    _ref$CaptionColor = _ref.CaptionColor,\n                    CaptionColor = _ref$CaptionColor === undefined ? '' : _ref$CaptionColor,\n                    _ref$CaptionBackgroun = _ref.CaptionBackground,\n                    CaptionBackground = _ref$CaptionBackgroun === undefined ? '' : _ref$CaptionBackgroun,\n                    _ref$OnAgree = _ref.OnAgree,\n                    OnAgree = _ref$OnAgree === undefined ? function () {} : _ref$OnAgree,\n                    _ref$OnCancel = _ref.OnCancel,\n                    OnCancel = _ref$OnCancel === undefined ? null : _ref$OnCancel;\n\n                document.activeElement.blur();\n\n                var dialog = document.createElement('div');\n                dialog.classList.add('monsieur-confirm');\n                if (Lure.Settings.DialogAnimation) dialog.classList.add(Lure.Settings.DialogAnimation);\n                //###title\n                var title = document.createElement(\"div\");\n                title.classList.add('cd-caption');\n                title.innerHTML = Caption;\n                title.style.color = CaptionColor;\n                title.style.background = CaptionBackground;\n                dialog.appendChild(title);\n                //###message field\n                var msg = document.createElement(\"div\");\n                msg.classList.add('cd-text');\n                msg.innerHTML = Message;\n                dialog.appendChild(msg);\n                //###buttonfield\n                var buttons = document.createElement(\"div\");\n                buttons.classList.add(\"cd-buttons\");\n                dialog.appendChild(buttons);\n                //###button confirm\n                var btnOk = document.createElement(\"div\");\n                btnOk.classList.add(\"button\", \"cd-button\", \"btn-diag-confirm\");\n                btnOk.innerHTML = \"Ok\";\n                btnOk.onclick = function () {\n                    Lure._DialogCount--;\n                    if (OnAgree !== null && OnAgree !== undefined) OnAgree();\n                    if (Lure.Settings.DialogBlur && Lure._DialogCount < 1) Lure.Select(Lure.Settings.DialogBlur).classList.remove('monsieur-blur');\n                    //$(Lure.Settings.DialogBlur).removeClass('monsieur-blur');\n                    wrap.remove();\n                    dialog.remove();\n                };\n                dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnOk);\n                //###button cancel\n                if (OnCancel !== null) {\n                    var btnCancel = document.createElement(\"div\");\n                    btnCancel.classList.add(\"button\", \"cd-button\", \"btn-diag-cancel\");\n                    btnCancel.innerHTML = \"Отмена\";\n                    btnCancel.onclick = function () {\n                        Lure._DialogCount--;\n                        if (OnCancel !== null) OnCancel();\n                        if (Lure.Settings.DialogBlur && Lure._DialogCount < 1) Lure.Select(Lure.Settings.DialogBlur).classList.remove('monsieur-blur');\n                        //$(Lure.Settings.DialogBlur).removeClass('monsieur-blur');\n                        wrap.remove();\n                        dialog.remove();\n                    };\n                    dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnCancel);\n                }\n                //### Dialog-Wrapper\n                var wrap = document.createElement(\"div\");\n                wrap.classList.add('ConfirmDialog-wrapper');\n                document.body.appendChild(wrap);\n                document.body.appendChild(dialog);\n                Lure._DialogCount++;\n                if (Lure.Settings.DialogBlur) {\n                    wrap.style.background = 'none';\n                    Lure.Select(Lure.Settings.DialogBlur).classList.add('monsieur-blur');\n                    //$(Lure.Settings.DialogBlur).addClass('monsieur-blur');\n                }\n            }\n            //Confirmation dialog teamplate just\n\n        }, {\n            key: 'NoFeature',\n            value: function NoFeature() {\n                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n                if (name !== \"\") name = \"\\\"\" + name + \"\\\"\";\n                this.Confirm(\"Error\", \"Sorry, function \" + name + \" is not available yet\");\n            }\n\n            /**\r\n             *\r\n             * @param object\r\n             * @param msg\r\n             * @constructor\r\n             */\n\n        }, {\n            key: 'ErrorHint',\n            value: function ErrorHint(object, msg) {\n                if (!msg) msg = \"Поле не может быть пустым\";\n                var div = document.createElement('div');\n                div.classList.add('monsieur-error-hint');\n                div.innerHTML = msg;\n                object.parentElement.style.position = 'relative';\n                object.parentElement.appendChild(div);\n                div.style.display = 'block';\n                try {\n                    div.animate({ opacity: [0, 1] }, { duration: 300 });\n                } catch (e) {}\n\n                setTimeout(function () {\n\n                    try {\n                        div.animate({ opacity: [1, 0] }, { duration: 300 }).onfinish = function () {\n                            div.style.display = 'none';\n                        };\n                    } catch (e) {\n                        div.style.display = 'none';\n                    }\n                    //TODO CHECK FADEIN FADEOUT\n                    setTimeout(function () {\n                        object.parentElement.style.position = '';\n                        div.remove();\n                    }, 500);\n                }, 2000);\n            }\n        }]);\n\n        return LureClass;\n    }();\n\n    return new LureClass();\n}();\n//sets = {\n//  SubContent: [\n//      {sets},                             -same object to create subs\n// ],\n//\n// Controller:{                                   - if needs some Template master\n//    Type: Templator,                                    - class link [optional] Templator by default\n//    Target: {string|HTMLElement}                        -[optional] if Controller.Target is undefined, Controller.Target = sets.Target\n//    Data: {array|object},                               - data array [optional] Data === [] by default\n//    ListElement: {string|HTMLElement},                  - repeated element\n//    EmptyMessage: \"no items\",                           - render if Data.length === 0;\n\n//  Control: {\n//    Target: {string, jQuery, HTMLElement},\n//    Global: {bool}                               - set global event listener. Set true if control renders after init or it renders dynamicly\n//    OnClick: {function}                          - here this === current MonsieurContent\n//    OnChange: {function}                         - here this === current MonsieurContent\n// },}\n\nLure.Plugin.Content = {};\nLure.Plugin.Content.Control = '';\nLure.Plugin.Content.Controller = {};\nLure.Plugin.Content.Controller.Templator = '';\nLure.Plugin.Content.Controller.TreeBuilder = '';\n\nLure.Content = function () {\n    function MonsieurContent(_ref2) {\n        var _ref2$Target = _ref2.Target,\n            Target = _ref2$Target === undefined ? null : _ref2$Target,\n            _ref2$Content = _ref2.Content,\n            Content = _ref2$Content === undefined ? null : _ref2$Content,\n            _ref2$CSS = _ref2.CSS,\n            CSS = _ref2$CSS === undefined ? '' : _ref2$CSS,\n            _ref2$Name = _ref2.Name,\n            Name = _ref2$Name === undefined ? null : _ref2$Name,\n            _ref2$Global = _ref2.Global,\n            Global = _ref2$Global === undefined ? false : _ref2$Global,\n            _ref2$Title = _ref2.Title,\n            Title = _ref2$Title === undefined ? \"\" : _ref2$Title,\n            _ref2$Type = _ref2.Type,\n            Type = _ref2$Type === undefined ? \"Untyped\" : _ref2$Type,\n            _ref2$Visible = _ref2.Visible,\n            Visible = _ref2$Visible === undefined ? undefined : _ref2$Visible,\n            _ref2$SubContent = _ref2.SubContent,\n            SubContent = _ref2$SubContent === undefined ? [] : _ref2$SubContent,\n            _ref2$Dialog = _ref2.Dialog,\n            Dialog = _ref2$Dialog === undefined ? false : _ref2$Dialog,\n            _ref2$DialogWrapper = _ref2.DialogWrapper,\n            DialogWrapper = _ref2$DialogWrapper === undefined ? true : _ref2$DialogWrapper,\n            _ref2$DialogBlur = _ref2.DialogBlur,\n            DialogBlur = _ref2$DialogBlur === undefined ? null : _ref2$DialogBlur,\n            _ref2$DialogAnimation = _ref2.DialogAnimation,\n            DialogAnimation = _ref2$DialogAnimation === undefined ? null : _ref2$DialogAnimation,\n            _ref2$Show = _ref2.Show,\n            Show = _ref2$Show === undefined ? null : _ref2$Show,\n            _ref2$Hide = _ref2.Hide,\n            Hide = _ref2$Hide === undefined ? null : _ref2$Hide,\n            _ref2$Shower = _ref2.Shower,\n            Shower = _ref2$Shower === undefined ? function () {\n            this.Content.style.display = '';\n        } : _ref2$Shower,\n            _ref2$Hider = _ref2.Hider,\n            Hider = _ref2$Hider === undefined ? function () {\n            this.Content.style.display = 'none';\n        } : _ref2$Hider,\n            _ref2$BeforeShow = _ref2.BeforeShow,\n            BeforeShow = _ref2$BeforeShow === undefined ? function () {} : _ref2$BeforeShow,\n            _ref2$Refresh = _ref2.Refresh,\n            Refresh = _ref2$Refresh === undefined ? function (data, i) {\n            if (this.Controller) this.Controller.Refresh(data, i);\n        } : _ref2$Refresh,\n            _ref2$Sorting = _ref2.Sorting,\n            Sorting = _ref2$Sorting === undefined ? false : _ref2$Sorting,\n            _ref2$Filtering = _ref2.Filtering,\n            Filtering = _ref2$Filtering === undefined ? false : _ref2$Filtering,\n            _ref2$OnClick = _ref2.OnClick,\n            OnClick = _ref2$OnClick === undefined ? null : _ref2$OnClick,\n            _ref2$Controller = _ref2.Controller,\n            Controller = _ref2$Controller === undefined ? null : _ref2$Controller,\n            _ref2$Control = _ref2.Control,\n            Control = _ref2$Control === undefined ? null : _ref2$Control,\n            _ref2$Props = _ref2.Props,\n            Props = _ref2$Props === undefined ? function () {} : _ref2$Props,\n            _ref2$Methods = _ref2.Methods,\n            Methods = _ref2$Methods === undefined ? function () {} : _ref2$Methods,\n            _ref2$GetSet = _ref2.GetSet,\n            GetSet = _ref2$GetSet === undefined ? {} : _ref2$GetSet,\n            _ref2$AfterBuild = _ref2.AfterBuild,\n            AfterBuild = _ref2$AfterBuild === undefined ? function () {} : _ref2$AfterBuild,\n            _ref2$Disabled = _ref2.Disabled,\n            Disabled = _ref2$Disabled === undefined ? false : _ref2$Disabled,\n            _ref2$Parent = _ref2.Parent,\n            Parent = _ref2$Parent === undefined ? null : _ref2$Parent;\n\n        _classCallCheck(this, MonsieurContent);\n\n        if (Disabled) return;\n        var $this = this;\n        this.isContent = true;\n        this.isActive = true;\n        if (Name === 'Tooltipchek') ; //debugger;\n\n        this.Parent = Parent;\n        if (Parent !== null) {\n            this.Target = Global ? Lure.Select(Target) : Lure.Select(Target, this.Parent.Content);\n            if (this.Target === null) this.Target = this.Parent.Content;\n        } else if (Target !== null) {\n            this.Target = Lure.Select(Target);\n        }\n        // debugger;\n        ////\n        if (Content === null) {\n            this.Content = this.Target;\n            construct.call($this);\n        } else {\n            if (Content.match(/<[^>]+>/) === null) {\n                //if not dom string\n                console.log('get load');\n                Lure.GetFileText(Content).then(function (x) {\n                    // debugger;\n                    //     console.log('x', x);\n                    MakeContent.call($this, x);\n                    construct.call($this);\n                });\n            } else {\n                MakeContent.call($this, Content);\n                construct.call($this);\n            }\n        }\n        function MakeContent(Content) {\n            if (Controller === null || Array.isArray(Controller.Data)) {\n                this.Content = Lure.CreateElementFromString(Content);\n            } else if (Controller !== null && !Array.isArray(Controller.Data)) {\n                /*Content = Content.replace(/<[^>]+>([^<]*{{([^#}]+)}}[^<]*)<[^>]+>/g, function (match, group) {\r\n                 let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                 return match.replace(match, `<span>${match}</span>`);\r\n                 });\r\n                 return  match.replace(group, newGroup);\r\n                 });*/\n                Content = Content.replace(/>[^>]*({{[^#}]+}})[^>]*</g, function (match, group) {\n                    /*let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                     return match.replace(match, `<span>${match}</span>`);\r\n                     });*/\n                    var x = match.replace(/{{[^#}]+}}/g, function (matche) {\n                        return '<span>' + matche + '</span>';\n                    });\n                    return x; // match.replace(group, `<span>${group}</span>`);\n                });\n                this.Content = Lure.CreateElementFromString(Content);\n            }\n            //this._Content = Content;\n            this.Target.appendChild(this.Content);\n        }\n\n        /////\n        if (this.Content === null || this.Target === null) {\n            this.isContent = false;\n            return;\n        }\n\n        //### CONSTRUCTION\n        if (CSS !== '') {\n            var node = document.createElement('style');\n            node.innerHTML = CSS;\n            document.body.appendChild(node);\n        }\n        function construct() {\n            this.Type = Type;\n            this.Name = Name;\n            this.AllContents = Lure.ContentList;\n\n            //### METHODS\n            /**\r\n             * @param {object} Data\r\n             * @param {int} index\r\n             */\n            this.Refresh = Refresh.bind(this);\n            /**\r\n             *\r\n             * @param {selector|HTMLElement} s\r\n             * @returns {HTMLElement}\r\n             * @constructor\r\n             */\n            this.Select = function (s) {\n                return Lure.Select(s, $this.Content);\n            };\n            /**\r\n             *\r\n             * @param {selector|HTMLElement} s\r\n             * @returns {NodeList}\r\n             * @constructor\r\n             */\n            this.SelectAll = function (s) {\n                return Lure.SelectAll(s, $this.Content);\n            };\n            /**\r\n             *\r\n             * @param {string}stringName\r\n             * @constructor\r\n             * @returns {MonsieurContent}\r\n             */\n            this.GetParent = function () {\n                var stringName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'root';\n\n                var content = $this;\n                while (content.Parent !== null && content.Name !== stringName) {\n                    content = content.Parent;\n                }return content;\n            };\n            /**\r\n             *\r\n             * @param {string}stringName\r\n             * @constructor\r\n             * @returns {MonsieurContent}\r\n             */\n            this.GetContent = function () {\n                var stringName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'root';\n\n                var parent = this.GetParent(stringName);\n                if (parent.Name === stringName) return parent;\n                // let root = parent;\n                var found = parent;\n                if (stringName === 'root') return found;\n                var searcher0 = function searcher0(content) {\n                    if (content.isContent && content.__private.ContentNames) for (var i = 0; i < content.__private.ContentNames.length; i++) {\n                        var name = content.__private.ContentNames[i];\n                        if (name === stringName) return content[name];\n                        found = searcher(content[name]);\n                    }\n                    return found;\n                };\n                var searcher = function searcher(content) {\n                    // debugger;\n                    for (var key in content) {\n                        if (key !== \"Parent\" && !!content[key] && content[key].isContent) {\n\n                            if (content[key].Name === stringName) return content[key];\n                            found = searcher(content[key]);\n                        }\n                    }\n                    return found;\n                };\n                return searcher(found);\n            };\n            /**\r\n             *\r\n             * @param {HTMLElement|string} HTMLElement\r\n             * @returns {number|Number}\r\n             * @constructor\r\n             */\n            this.GetIndex = function (HTMLElement) {\n                HTMLElement = $this.Select(HTMLElement);\n                return Array.prototype.slice.call(HTMLElement.parentElement.children).indexOf(HTMLElement);\n            };\n            /**\r\n             *\r\n             * @param {string} eventName\r\n             * @param {string} selector\r\n             * @param {function} func\r\n             * @constructor\r\n             */\n            this.AddEventListener = function (eventName, selector, func) {\n                Lure.AddEventListenerGlobal(eventName, selector, func, $this.Content, $this);\n            };\n            /**\r\n             *\r\n             * @param {string|HTMLElement} buttonTutorStarter\r\n             * @constructor\r\n             */\n            this.AddTutor = function (buttonTutorStarter) {\n                $this.MonsieurTutor = new MonsieurTutor($this.Select(buttonTutorStarter), $this.Content);\n            };\n            //private\n            this._SortBy = function (f, data) {\n                var isSorted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n                if (data.length < 2) return;\n                console.log('sort by', f);\n                data.sort(function (a, b) {\n                    if (a[f] < b[f] && $this._Sorting[f].Sorted) return 1;else if (a[f] > b[f] && $this._Sorting[f].Sorted) return -1;else if (a[f] < b[f] && !$this._Sorting[f].Sorted) return -1;else if (a[f] > b[f] && !$this._Sorting[f].Sorted) return 1;\n                    return 0;\n                });\n                $this._Sorting[f].Sorted = !$this._Sorting[f].Sorted;\n                for (var kf in $this._Sorting) {\n                    if ($this._Sorting.hasOwnProperty(kf) && kf !== '_sorter') {\n                        $this._Sorting[kf].Target.classList.remove('mt-sorting-up');\n                        $this._Sorting[kf].Target.classList.remove('mt-sorting-down');\n                        if (f !== kf) $this._Sorting[kf].Sorted = false;\n                    }\n                }\n                $this._Sorting[f].Target.classList.add($this._Sorting[f].Sorted ? 'mt-sorting-down' : 'mt-sorting-up');\n                $this.Refresh();\n            };\n            this._FilterBy = function () {\n                var p = performance.now();\n                var filters = 0;\n                var _d = $this._Filter._DataDefault.slice(0);\n\n                var _loop = function _loop(f) {\n                    if ($this._Filter.hasOwnProperty(f) && $this._Filter[f].Filter && $this._Filter[f].Filter !== '') {\n                        _d = _d.filter(function (x) {\n                            return x[f].toString().toLowerCase().indexOf($this._Filter[f].Filter) > -1;\n                        });\n                        filters++;\n                    }\n                };\n\n                for (var f in $this._Filter) {\n                    _loop(f);\n                }\n                console.log(_d);\n                if (filters === 0) {\n                    if ($this._Sorting._sorter) {\n                        $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\n                        $this._SortBy($this._Sorting._sorter, $this.Controller._Data);\n                    }\n                    $this.Controller.Refresh();\n                } else {\n                    if ($this._Sorting._sorter) {\n                        $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\n                        $this._SortBy($this._Sorting._sorter, _d);\n                    }\n                    $this.Controller.PageSize = $this._PageSize;\n                    $this.Controller._PageCursor = 0;\n                    $this.Controller._Rebuilder(_d);\n                }\n\n                mr.PerformanceNow(p, 'FilterBy');\n            };\n\n            //extra properties\n            Props.call(this);\n            //extra getters/setters\n            for (var k in GetSet) {\n                Object.defineProperty($this, k, Object.getOwnPropertyDescriptor(GetSet, k));\n            }\n            //extra methods\n            Methods.call(this);\n            //--\n            this.Show = function (e) {\n                this.isActive = true;\n                if (this.Control) this.Control.Active();\n                var style = window.getComputedStyle($this.Content);\n                var duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\n                var durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\n                if (duration < durationAni) duration = durationAni;\n                duration++;\n                if ($this.Type !== \"Untyped\" && !$this.isVisible) {\n                    Lure.ContentList[$this.Type].forEach(function (item) {\n                        if (item !== $this && item.isActive) item.Hide();\n                    });\n                }\n                if (Dialog) {\n                    Lure._DialogCount++;\n                    $this.Content.classList.add('monsieur-dialog');\n                    //    console.log('DialogWrapper', DialogWrapper);\n                    if (DialogWrapper) {\n                        $this.DialogWrapper = Lure.CreateElementFromString('<div class=\"dialog-wrapper\">');\n                        document.body.appendChild($this.DialogWrapper);\n                        $this.DialogWrapper.onclick = $this.Hide.bind($this);\n\n                        var zIndexWrapper = parseInt(window.getComputedStyle($this.DialogWrapper).zIndex);\n                        var zIndexContent = parseInt(window.getComputedStyle($this.Content).zIndex);\n                        if (Number.isNaN(zIndexContent) || zIndexContent < zIndexWrapper) $this.Content.style.zIndex = zIndexWrapper + 1;\n                    }\n\n                    if (DialogBlur) {\n                        $this.DialogWrapper.style.background = 'none';\n                        Lure.Select(DialogBlur).classList.add('monsieur-blur');\n                    }\n                    if (DialogAnimation) {\n                        $this.Content.classList.add(DialogAnimation);\n                    }\n                }\n                BeforeShow.call($this, e);\n                Shower.call($this, e);\n                $this.Content.style.display = '';\n                clearTimeout($this.__private.ToggleTimer);\n                //this.Content.addEventListener('transitionend', Show.bind($this, e));\n                if (Show !== null) {\n                    $this.__private.ToggleTimer = setTimeout(function () {\n                        Show.call($this, e);\n                    }, duration);\n                }\n            };\n            this.Hide = function (e) {\n                this.isActive = false;\n                if (this.Control) this.Control.Disactive();\n                var style = window.getComputedStyle($this.Content);\n                var duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\n                var durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\n                if (duration < durationAni) duration = durationAni;\n                duration++;\n                if (Dialog) {\n                    Lure._DialogCount--;\n                    if ($this.DialogWrapper) $this.DialogWrapper.remove();\n                    if (DialogBlur && Lure._DialogCount < 1) Lure.Select(DialogBlur).classList.remove('monsieur-blur');\n                }\n\n                Hider.call($this, e);\n                clearTimeout($this.__private.ToggleTimer);\n                if (Hide !== null) $this.__private.ToggleTimer = setTimeout(function () {\n                    Hide.call($this, e);\n                }, duration);\n            };\n            this.Toggle = function (e) {\n                if ($this.isVisible) $this.Hide(e);else $this.Show(e);\n            };\n\n            this.__private = {};\n            this.__private.ToggleTimer = null;\n            this.Control = new MonsieurControl(Control, $this);\n            this.Content.onclick = OnClick ? OnClick.bind($this) : null;\n            //SubContent\n            if (Array.isArray(SubContent)) {\n                for (var i = 0; i < SubContent.length; i++) {\n                    {\n                        if (!SubContent[i].Parent) SubContent[i].Parent = $this;\n                        //  $this.__private.ContentNames.push(SubContent[i].Name);\n                        $this[SubContent[i].Name] = new MonsieurContent(SubContent[i]);\n                    }\n                }\n            } else {\n                for (var cname in SubContent) {\n                    SubContent[cname].Parent = $this;\n                    SubContent[cname].Name = cname;\n                    //       $this.__private.ContentNames.push(cname);\n                    $this[cname] = new MonsieurContent(SubContent[cname]);\n                }\n            }\n            //title\n            this.TitleContent = Lure.Select(Title, this.Content);\n\n            if (Type === \"Untyped\" && Visible !== false && !Dialog) Visible = true;else if (Type !== \"Untyped\" && Visible !== true || Dialog && Visible !== true) Visible = false;\n            //if (Typed) Content is Visible\n            if (Visible) {\n                this.Content.style.display = '';\n                if (this.Control) this.Control.Active();\n            } else {\n                //not undefined\n                this.isActive = false;\n                this.Content.style.display = 'none';\n            }\n            if (Controller) {\n                if (Controller.isController) {\n                    this.Controller = Controller;\n                    this.Controller.Parent = this;\n                } else {\n                    if (!Controller.Target) Controller.Target = this.Content;\n                    if (!Controller.Type) Controller.Type = Templator;\n                    Controller.Parent = this;\n                    this.Controller = new Controller.Type(Controller);\n                }\n                if (this.Controller.isHasEditable) {\n                    Lure._EditablesEventListenerRun($this.Content);\n                }\n            }\n\n            if (Sorting) {\n                $this._Sorting = {};\n                $this._Sorting._sorter = null;\n\n                var _loop2 = function _loop2(f) {\n                    if (Sorting.hasOwnProperty(f) && f !== '_sorter') {\n                        $this._Sorting[f] = {\n                            Target: $this.Select(Sorting[f]),\n                            Sorted: false\n                        };\n                        $this._Sorting[f].Target.classList.add('mt-sorting');\n                        $this._Sorting[f].Target.addEventListener('click', function () {\n                            $this._Sorting._sorter = f;\n                            $this._SortBy(f, $this.Controller._Data);\n                        });\n                    }\n                };\n\n                for (var f in Sorting) {\n                    _loop2(f);\n                }\n                console.info('mt-sortable', $this._Sorting);\n            }\n            if (Filtering) {\n                $this._Filter = {};\n                $this._Filter._DataDefault = $this.Controller._Data.slice(0);\n\n                var _loop3 = function _loop3(f) {\n                    if (Filtering.hasOwnProperty(f) && f !== '_format') {\n                        $this._Filter[f] = {\n                            Target: $this.Select(Filtering[f]),\n                            Filter: ''\n                        };\n                        $this._Filter[f].Target.classList.add('mt-filtering');\n                        $this._Filter[f].Target.innerHTML = '<input type=\"text\" class=\"mt-filtering-input\">';\n                        $this._Filter[f].Target.querySelector('.mt-filtering-input').addEventListener('keyup', function (e) {\n                            //$this._SortBy(f);\n                            $this._Filter[f].Filter = e.target.value.toLowerCase();\n                            $this._FilterBy();\n                        });\n                    }\n                };\n\n                for (var f in Filtering) {\n                    _loop3(f);\n                }\n            }\n            if (!Lure.ContentList[$this.Type]) //if list is empty, create it, else just add\n                Lure.ContentList[$this.Type] = [];\n            Lure.ContentList[$this.Type].push(this);\n\n            //close button\n            Array.from(this.Content.children).forEach(function (item) {\n                if (item.classList.contains(\"close\")) item.onclick = function (e) {\n                    $this.Hide(e);\n                };\n            });\n\n            setTimeout(function () {\n                AfterBuild.call($this);\n            }, 1);\n        }\n    }\n\n    _createClass(MonsieurContent, [{\n        key: 'RefreshOne',\n        value: function RefreshOne(i) {\n            if (this.Controller) this.Controller.RefreshOne(i);\n        }\n    }, {\n        key: 'Remove',\n        value: function Remove(i, removeData) {\n            if (this.Controller) this.Controller.Remove(i, removeData);\n        }\n    }, {\n        key: 'Add',\n        value: function Add(itemData) {\n            var extraclass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            var isPrepend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            var addData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n            if (this.Controller) this.Controller.Add(itemData, extraclass, isPrepend, addData);\n        }\n\n        /**\r\n         *\r\n         * @param {object} itemData\r\n         * @param {int} index\r\n         * @constructor\r\n         */\n\n    }, {\n        key: 'Edit',\n        value: function Edit(itemData, index) {\n            if (this.Controller) this.Controller.Edit(itemData, index);\n        }\n    }, {\n        key: 'Dispose',\n        value: function Dispose() {\n            this.Content.remove();\n            this.Control.Disactive();\n            delete this.Controller;\n            delete this.Control;\n        }\n    }, {\n        key: 'isVisible',\n        get: function get() {\n            return Lure.isVisible(this.Content);\n        }\n    }, {\n        key: 'Title',\n        get: function get() {\n            return this.TitleContent.innerHTML;\n        },\n        set: function set(t) {\n            this.TitleContent.innerHTML = t;\n        }\n    }, {\n        key: 'Data',\n        get: function get() {\n            if (this.Controller) return this.Controller.Data;\n            return null;\n        },\n        set: function set(data) {\n            if (this.Controller) this.Controller.Data = data;\n        }\n    }, {\n        key: 'Items',\n        get: function get() {\n            if (this.Controller) return this.Controller.Items;\n            return null;\n        }\n    }]);\n\n    return MonsieurContent;\n}();\n\nvar MonsieurControl = function () {\n    function MonsieurControl(control, owner) {\n        var _this = this;\n\n        _classCallCheck(this, MonsieurControl);\n\n        if (control === null) return;\n        if (control.length > 0) //if control list not empty\n            {\n                (function () {\n                    var controls = _this;\n\n                    var _loop4 = function _loop4(i) {\n                        if (!control[i].Name) control[i].Name = \"unnamed_\" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);\n                        controls[control[i].Name] = {\n                            Content: Lure.SelectAll(control[i].Target),\n                            _Content: control[i].Target,\n                            Type: control[i].Type ? control[i].Type : \"Untyped\",\n                            isGlobal: control[i].Global,\n                            OnClick: control[i].OnClick ? control[i].OnClick : owner.Show,\n                            OnChange: control[i].OnChange,\n                            Active: function Active() {\n                                Lure.SelectAll(control[i].Target).forEach(function (item) {\n                                    item.classList.add('active');\n                                });\n                            },\n                            Disactive: function Disactive() {\n                                Lure.SelectAll(control[i].Target).forEach(function (item) {\n                                    item.classList.remove('active');\n                                });\n                            }\n\n                        };\n                        //onclick\n                        controls[control[i].Name].Content.forEach(function (item) {\n                            item.classList.add('pointer');\n                        });\n                        if (control[i].Global) {\n\n                            Lure.AddEventListenerGlobal('click', control[i].Target, function (e) {\n                                Lure.SelectAll(control[i].Target).forEach(function (item) {\n                                    item.classList.remove('active');\n                                });\n                                e.target.classList.add('active');\n                                if (controls[control[i].Name].OnClick) controls[control[i].Name].OnClick.call(owner, e);\n                            });\n                        } else {\n                            controls[control[i].Name].Content.forEach(function (item) {\n                                item.onclick = function (e) {\n                                    Lure.ContentList[owner.Type].forEach(function (item) {\n                                        if (item !== owner) {\n                                            if (item.Control) item.Control.Disactive();\n                                        }\n                                    });\n                                    //console.log('remover', e);\n                                    controls[control[i].Name].Content.forEach(function (item) {\n                                        item.classList.remove('active');\n                                    });\n                                    e.currentTarget.classList.add('active');\n                                    controls[control[i].Name].OnClick.call(owner, e);\n                                };\n                            });\n                        }\n\n                        if (control[i].OnChange) {\n                            if (control[i].Global) {\n                                Lure.AddEventListenerGlobal('change', control[i].Target, function (e) {\n                                    control[i].OnChange.call(owner, e);\n                                });\n                            } else {\n                                controls[control[i].Name].Content.forEach(function (item) {\n                                    item.onchange = function (e) {\n                                        control[i].OnChange.call(owner, e);\n                                    };\n                                });\n                            }\n                        }\n                    };\n\n                    for (var i = 0; i < control.length; i++) {\n                        _loop4(i);\n                    }\n                })();\n            }\n    }\n\n    _createClass(MonsieurControl, [{\n        key: 'Active',\n        value: function Active() {\n            var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Untyped\";\n\n            for (var k in this) {\n                if (this[k].Type === type) this[k].Content.forEach(function (item) {\n                    item.classList.add('active');\n                });\n            }\n        }\n    }, {\n        key: 'Disactive',\n        value: function Disactive() {\n            var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Untyped\";\n\n            for (var k in this) {\n                if (this[k].Type === type) {\n                    this[k].Content.forEach(function (item) {\n                        item.classList.remove('active');\n                    });\n                    if (this[k].isGlobal) Lure.SelectAll(this[k]._Content).forEach(function (item) {\n                        item.classList.remove('active');\n                    });\n                }\n            }\n        }\n    }]);\n\n    return MonsieurControl;\n}();\n\nvar Templator = function () {\n    function Templator() {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            _ref3$Target = _ref3.Target,\n            Target = _ref3$Target === undefined ? null : _ref3$Target,\n            _ref3$Data = _ref3.Data,\n            Data = _ref3$Data === undefined ? [] : _ref3$Data,\n            _ref3$ListElement = _ref3.ListElement,\n            ListElement = _ref3$ListElement === undefined ? \".list_element\" : _ref3$ListElement,\n            _ref3$EmptyMessage = _ref3.EmptyMessage,\n            EmptyMessage = _ref3$EmptyMessage === undefined ? \"\" : _ref3$EmptyMessage,\n            _ref3$EmptyHide = _ref3.EmptyHide,\n            EmptyHide = _ref3$EmptyHide === undefined ? false : _ref3$EmptyHide,\n            _ref3$PageSize = _ref3.PageSize,\n            PageSize = _ref3$PageSize === undefined ? -1 : _ref3$PageSize,\n            _ref3$DataCount = _ref3.DataCount,\n            DataCount = _ref3$DataCount === undefined ? -1 : _ref3$DataCount,\n            _ref3$PageGet = _ref3.PageGet,\n            PageGet = _ref3$PageGet === undefined ? null : _ref3$PageGet,\n            _ref3$ShowAllButton = _ref3.ShowAllButton,\n            ShowAllButton = _ref3$ShowAllButton === undefined ? true : _ref3$ShowAllButton,\n            _ref3$LineSave = _ref3.LineSave,\n            LineSave = _ref3$LineSave === undefined ? function (line, property, newValue) {\n            var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n            setTimeout(function () {\n                callback();\n            }, 500);\n        } : _ref3$LineSave,\n            _ref3$LineAdd = _ref3.LineAdd,\n            LineAdd = _ref3$LineAdd === undefined ? function (dataObject) {\n            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n            setTimeout(function () {\n                callback();\n            }, 500);\n        } : _ref3$LineAdd,\n            _ref3$EditModeSwitch = _ref3.EditModeSwitch,\n            EditModeSwitch = _ref3$EditModeSwitch === undefined ? null : _ref3$EditModeSwitch,\n            _ref3$DataSaveAll = _ref3.DataSaveAll,\n            DataSaveAll = _ref3$DataSaveAll === undefined ? function () {} : _ref3$DataSaveAll,\n            _ref3$NoAnimation = _ref3.NoAnimation,\n            NoAnimation = _ref3$NoAnimation === undefined ? false : _ref3$NoAnimation,\n            _ref3$NoBuild = _ref3.NoBuild,\n            NoBuild = _ref3$NoBuild === undefined ? false : _ref3$NoBuild,\n            _ref3$BeforeBuild = _ref3.BeforeBuild,\n            BeforeBuild = _ref3$BeforeBuild === undefined ? function () {} : _ref3$BeforeBuild,\n            _ref3$AfterBuild = _ref3.AfterBuild,\n            AfterBuild = _ref3$AfterBuild === undefined ? function () {} : _ref3$AfterBuild,\n            _ref3$AfterAdd = _ref3.AfterAdd,\n            AfterAdd = _ref3$AfterAdd === undefined ? function () {} : _ref3$AfterAdd,\n            _ref3$Parent = _ref3.Parent,\n            Parent = _ref3$Parent === undefined ? null : _ref3$Parent;\n\n        _classCallCheck(this, Templator);\n\n        //### DEFINES\n        var $this = this;\n        this.isController = true;\n        if (Parent !== null) this.Content = Lure.Select(Target, Parent.Content);else this.Content = Lure.Select(Target);\n        this.Target = this.Content;\n        this._Data = Data;\n        this.EmptyMessage = EmptyMessage;\n        this.ListElement = \"\";\n\n        this.BeforeBuild = BeforeBuild.bind(this);\n        this.AfterBuild = AfterBuild.bind(this);\n        this.AfterAdd = AfterAdd.bind(this);\n        this.Parent = Parent;\n        //paginating\n        this.PageSize = PageSize;\n        this._PageSize = PageSize;\n        this._DataCount = DataCount > 0 ? DataCount : this._Data.length;\n        this._PageCursor = 0;\n        this._PageGet = PageGet;\n\n        //server handling\n        this.LineAdd = LineAdd;\n        this.LineSave = LineSave;\n        this.Type = null; // Refresh or ItemList\n\n        //settings\n        this.isShowAllButton = ShowAllButton;\n        this.isNoAnimaton = NoAnimation;\n        this.isEmptyHide = EmptyHide;\n\n        //fields to refresh (for refresh type)\n        var Dictionary = [];\n        this._Dictionary = Dictionary;\n        var Refresher = function Refresher() {\n            //TODO refresh only changes\n            if (!$this._Data) $this._Data = {};\n            for (var i = 0; i < Dictionary.length; i++) {\n\n                for (var j = 0; j < Dictionary[i].fields.length; j++) {\n                    var isAttribute = Dictionary[i].fields[j].Target.indexOf('attributes') > -1;\n                    var NewValue = Dictionary[i].fields[j].BuildValue($this._Data);\n                    if (isAttribute) {\n\n                        Dictionary[i].obj.attributes[Dictionary[i].fields[j].Target.split(\".\")[1]].value = NewValue;\n                    } else {\n                        Dictionary[i].obj[Dictionary[i].fields[j].Target] = Dictionary[i].fields[j].BuildValue($this._Data);\n                    }\n                }\n            }\n        };\n        this._Rebuilder = function () {\n            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $this._Data;\n\n            var lines = \"\";\n            //$this.Content.style.display = '';\n            if ($this._PageCursor === 0) $this.Content.querySelectorAll('.mt-line, .mt-paginator, .mt-empty').forEach(function (item) {\n                item.remove();\n            });\n            //pagination check\n            var NextCount = void 0;\n            //let line;\n            var Limit = data.length;\n            $this._DataCount = DataCount > 0 ? DataCount : Limit;\n            if ($this.PageSize > 0) {\n                //  debugger;\n                $this._DataCount = $this._DataCount > 0 ? $this._DataCount : data.length;\n                var paginator = $this.Content.querySelector('.mt-paginator');\n                if (paginator !== null) paginator.remove();\n                Limit = parseInt($this._PageCursor) + parseInt($this.PageSize);\n                if (Limit > $this._DataCount && $this._DataCount > 0) Limit = $this._DataCount;\n                //how much will be load in next step\n                NextCount = $this._DataCount - Limit;\n                if (NextCount > $this.PageSize) NextCount = $this.PageSize;\n            }\n            if ($this.Type === \"ItemList\" && data.length === 0 && $this.EmptyMessage !== \"\" && !$this.isEmptyHide) {\n                var tag = $this.ListElement.match(/\\s?([\\w]+) /)[0].replace(/\\s/g, \"\");\n                var empty = document.createElement(tag);\n                empty.classList.add('mt-empty');\n                empty.innerHTML = $this.EmptyMessage;\n                $this.Content.appendChild(empty);\n                return;\n            } else if ($this.Type === \"ItemList\" && data.length === 0 && $this.isEmptyHide) {\n                $this.Content.style.display = 'none';\n                return;\n            } else if (data.length === 0) {\n                return;\n            }\n            //linebuilding\n            for (var i = $this._PageCursor; i < Limit; i++) {\n                lines += $this._LineBuilder(data[i], i, data.length);\n            } //appending\n            //   debugger;\n            if ($this.Content.children.length < 1) {\n                $this.Content.innerHTML = lines;\n            } else {\n                lines = Lure.CreateElementsFromString(lines, $this.Content.tagName);\n                if (lines !== null) lines.forEach(function (item) {\n                    $this.Content.appendChild(item);\n                });\n            }\n            /*{\r\n             lines += $this._LineBuilder(data[i], i, data.length);\r\n             //if should to save changed class list after rebuild\r\n             if (data[i] && data[i].$classlist)\r\n             {\r\n             line = $(line);\r\n             line.attr('class', data[i].$classlist);\r\n             lines +=line[0].outerHTML;\r\n             }\r\n             else{\r\n             lines += line;\r\n             }\r\n             }*/\n            //save cursor index\n            if ($this.PageSize > 0) $this._PageCursor = Limit;\n            //PAGINATION BUILD\n            //limit data case\n            if ($this.PageSize > 0 && $this._PageCursor < $this._DataCount) {\n                var also = void 0;\n                var showAll = '<span>  (\\u041D\\u0435 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0435\\u043D\\u043E ' + ($this._DataCount - $this._PageCursor) + ') </span>';\n                if ($this.isShowAllButton) {\n                    showAll = '<span> \\u0438\\u043B\\u0438 </span><span class=\"mt-btn-nextAll dotted pointer\"> \\u0412\\u0441\\u0435 ( ' + ($this._DataCount - $this._PageCursor) + ' )</span>';\n                }\n                var isTable = $this.Content.tagName === 'table' || $this.Content.tagName === 'thead' || $this.Content.tagName === 'tbody';\n                if (isTable) {\n                    var colspan = $this.Content.querySelector(\"tr:first-child th\").length + 1;\n\n                    also = '<tr class=\"mt-paginator\"><td colspan=\"' + colspan + '\" class=\"element block-head\"><span class=\"tpltr-next dotted pointer\">\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0435\\u0449\\u0435 ' + NextCount + '</span>' + showAll + '</td></tr>';\n                    also = Lure.CreateElementFromString(also, $this.Content.tagName);\n                } else {\n                    also = Lure.CreateElementFromString('<div class=\\'mt-paginator\\'><span class=\"mt-btn-next dotted pointer\">\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0435\\u0449\\u0435 ' + NextCount + '</span>' + showAll + '</div>');\n                }\n                var btnNext = also.querySelector('.mt-btn-next');\n                //console.log('btnNext', btnNext);\n                btnNext.onclick = function () {\n                    if ($this._PageCursor >= data.length) $this._PageGet($this._PageCursor, $this.PageSize, BuildWithIt);else Build();\n                };\n                var btnNextAll = also.querySelector('.mt-btn-nextAll');\n                btnNextAll.onclick = function () {\n                    $this.PageSize = $this._DataCount;\n                    if ($this._PageGet !== null) $this._PageGet($this._PageCursor, $this._DataCount - $this._PageCursor, BuildWithIt);else Build();\n                };\n                $this.Content.appendChild(also);\n            }\n        };\n        var Build = function Build() {\n            $this.BeforeBuild();\n\n            if ($this.Type === \"Refresh\") Refresher();else if ($this.Type === \"ItemList\" /* && $this._Data.length > 0*/) $this._Rebuilder();\n\n            $this.AfterBuild();\n        };\n        var BuildWithIt = function BuildWithIt(data) {\n            for (var i = 0; i < data.length; i++) {\n                $this._Data.push(data[i]);\n            }Build();\n        };\n        // = Rebuild1er;\n\n        //#### METHODS\n        this.FieldAdd = function (element) {\n            var elemAttributes = element.attributes;\n            var fields = [];\n            var WhatFields = -1; // 0-att only, 1-innerHTML only, 2-both\n            //find fields in attributes\n            for (var i = 0; i < elemAttributes.length; i++) {\n                if (elemAttributes[i].value.indexOf(\"{{\") > -1) {\n                    if (elemAttributes[i].name !== 'value') fields.push({\n                        Target: 'attributes.' + elemAttributes[i].name,\n                        BuildValue: Lure.Compile(elemAttributes[i].value)\n                    });else {\n                        fields.push({\n                            Target: elemAttributes[i].name,\n                            BuildValue: Lure.Compile(elemAttributes[i].value)\n                        });\n                    }\n                    WhatFields = 0;\n                }\n            }\n            //innerHTML check\n            if (element.childNodes.length < 2) {\n                if (element.innerHTML.indexOf(\"{{\") > -1) {\n                    fields.push({\n                        Target: \"innerHTML\",\n                        BuildValue: Lure.Compile(element.innerHTML)\n                    });\n                    WhatFields = WhatFields !== 0 ? 1 : 2; //1 if no att, 2 if att exists\n                }\n            }\n            if (WhatFields > -1) {\n                Dictionary.push({\n                    obj: element,\n                    fields: fields\n                });\n            }\n        };\n        this.Refresh = function () {\n            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            $this.PageSize = $this._PageSize;\n            $this._PageCursor = 0;\n            if (data !== null) $this._Data = data;\n            $this.PageCursor = 0;\n            if (index === null) Build();else $this.RefreshOne(index);\n        };\n        this.RefreshOne = function (i) {\n            var newItem = Lure.CreateElementFromString($this._LineBuilder($this._Data[i], i, $this._Data.length), $this.Content.tagName);\n            var itemOld = $this.Items[i];\n            $this.Items[i].parentNode.replaceChild(newItem, itemOld);\n        };\n        this.Add = function (item) {\n            var extraclass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            var isPrepend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            var addData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n            if ($this._Data.length === 0 && $this.Content.querySelector(\".mt-empty\") !== null) $this.Content.querySelector(\".mt-empty\").remove();\n            var fragment = document.createDocumentFragment();\n            var elem = document.createElement($this.Content.tagName);\n            var i = void 0;\n            if (!isPrepend) {\n                i = $this._Data.length;\n                if (!addData) i--;\n                elem.innerHTML = $this._LineBuilder(item, i, i + 1);\n                while (elem.childNodes[0]) {\n                    fragment.appendChild(elem.childNodes[0]);\n                }\n                if (extraclass) fragment.children[0].classList.add(extraclass);\n                if (addData) $this._Data.push(item);\n                $this.Content.appendChild(fragment);\n            } else {\n                i = 0;\n                //change data-line attributes\n                $this.Items.forEach(function (item) {\n                    console.log(item);\n                    console.log(item.dataset['line']);\n                    item.dataset['line'] = parseInt(item.dataset['line']) + 1;\n                });\n                //TODO rendered indexes not changings\n\n                elem.innerHTML = $this._LineBuilder(item, 0, $this._Data.length + 1);\n                while (elem.childNodes[0]) {\n                    fragment.appendChild(elem.childNodes[0]);\n                }\n                if (extraclass) fragment.children[0].classList.add(extraclass);\n                if (addData) $this._Data.unshift(item);\n                $this.Content.prepend(fragment);\n            }\n            //server saver\n            if ($this.LineAdd !== null) {\n                $this.LineAdd(item, function () {\n                    //remove extraclass callback\n                    var x = $this.Content.querySelector('.' + extraclass);\n                    if (x) x.classList.remove(extraclass);\n                });\n            }\n            $this.AfterAdd(item, i);\n        };\n        this.Edit = function (itemData, i) {\n            console.log('edit itemData', i, itemData);\n            Array.from($this.Items).filter(function (x) {\n                return parseInt(x.dataset['line']) === i;\n            })[0].classList.add('editable-waiting');\n            $this.LineSave(i, '$this', itemData, function () {\n                $this._Data[i] = itemData;\n                $this.RefreshOne(i);\n            });\n        };\n        /**\r\n         *\r\n         * @param {int} index\r\n         * @param {bool} removeData\r\n         * @constructor\r\n         */\n        this.Remove = function (index) {\n            var removeData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            //TODO rendered indexes not changings\n            $this.Content.querySelector('.mt-line[data-line=\"' + index + '\"]').remove();\n            for (var j = index; j < $this.Items.length; j++) {\n                $this.Items[j].dataset['line'] = parseInt($this.Items[j].dataset['line']) - 1;\n                $this.Items[j].querySelectorAll('[data-line]').forEach(function (item) {\n                    item.dataset['line'] = parseInt(item.dataset['line']) - 1;\n                });\n            }\n            if (removeData) $this._Data.splice(index, 1);\n            if ($this._Data.length === 0) $this.Refresh();\n        };\n        this.SwitchToEditMode = function () {\n            Lure.Editable.EditMode = true;\n            Lure.SelectAll('.editable', $this.Content).forEach(function (item) {\n                // console.log(item);\n                Lure.Editable.AddEdits(item);\n            });\n        };\n\n        //### CONSTRUCTOR\n        if (Array.isArray(this._Data)) {\n            this.Type = \"ItemList\";\n            var isListElementCssSelector = ListElement.match(/^[a-zA-Z0-9.,\\-_ *#]+$/g) !== null;\n            if (isListElementCssSelector) {\n                var element = this.Content.querySelector(ListElement);\n                element.classList.add('mt-line');\n                ListElement = element.outerHTML;\n                element.remove();\n            } else {\n                var list_element = ListElement.match(/<[^>]+>/)[0];\n                var list_elementClassed = void 0;\n                var pos = list_element.indexOf('class=\"');\n                if (pos < 0) {\n                    list_elementClassed = list_element.substr(0, list_element.length - 1) + ' class=\"mt-line\"' + list_element.substr(list_element.length - 1);\n                } else {\n                    pos = list_element.indexOf('\"', pos + 8);\n                    list_elementClassed = list_element.substr(0, pos) + \" mt-line\" + list_element.substr(pos);\n                }\n                ListElement = ListElement.replace(list_element, list_elementClassed);\n            }\n            //add data-line attribute\n            ListElement = ListElement.replace(/<[\\s\\S]+?(>)/, function (a, b) {\n                return a.replace(b, ' data-line=\"{{i}}\">');\n            });\n            this.ListElement = ListElement;\n            this._LineBuilder = Lure.Compile(ListElement, true);\n            if (ListElement.match(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/) !== null) {\n                this.isHasEditable = true;\n                if (EditModeSwitch !== null) Lure.Select(EditModeSwitch).addEventListener('change', function (e) {\n                    if (e.currentTarget.checked) {\n                        $this.SwitchToEditMode();\n                    } else {\n                        Lure.Editable.EditMode = false;\n                        document.body.click();\n                    }\n                });\n            }\n            this.Content.MonsieurController = this;\n            this.Content.classList.add('mt-content');\n        } else {\n            this.Type = \"Refresh\";\n            var AllChildren = Array.prototype.slice.call(this.Content.querySelectorAll('*:not(g):not(path):not(clipPath):not(text):not(br)'));\n            AllChildren.push(this.Content);\n            AllChildren.forEach(function (item) {\n                $this.FieldAdd(item);\n            });\n        }\n        Lure.TemplatorList.push(this);\n        if (!NoBuild) Build();\n    }\n\n    _createClass(Templator, [{\n        key: 'Data',\n        get: function get() {\n            return this._Data;\n        },\n        set: function set(data) {\n            this._Data = data;\n        }\n    }, {\n        key: 'Items',\n        get: function get() {\n            return this.Content.querySelectorAll('.mt-line');\n        }\n    }]);\n\n    return Templator;\n}();\n\nvar TreeBuilder = function () {\n    function TreeBuilder(_ref4) {\n        var _ref4$Target = _ref4.Target,\n            Target = _ref4$Target === undefined ? null : _ref4$Target,\n            _ref4$Data = _ref4.Data,\n            Data = _ref4$Data === undefined ? [] : _ref4$Data,\n            _ref4$ListElement = _ref4.ListElement,\n            ListElement = _ref4$ListElement === undefined ? null : _ref4$ListElement,\n            _ref4$Drop = _ref4.Drop,\n            Drop = _ref4$Drop === undefined ? false : _ref4$Drop,\n            _ref4$SubSelector = _ref4.SubSelector,\n            SubSelector = _ref4$SubSelector === undefined ? null : _ref4$SubSelector,\n            _ref4$SubSelectorHand = _ref4.SubSelectorHandler,\n            SubSelectorHandler = _ref4$SubSelectorHand === undefined ? function () {} : _ref4$SubSelectorHand,\n            _ref4$BeforeBuild = _ref4.BeforeBuild,\n            BeforeBuild = _ref4$BeforeBuild === undefined ? function () {} : _ref4$BeforeBuild,\n            _ref4$AfterBuild = _ref4.AfterBuild,\n            AfterBuild = _ref4$AfterBuild === undefined ? function () {} : _ref4$AfterBuild,\n            _ref4$Parent = _ref4.Parent,\n            Parent = _ref4$Parent === undefined ? null : _ref4$Parent;\n\n        _classCallCheck(this, TreeBuilder);\n\n        //### DEFINES\n        this.isController = true;\n        this.Content = Lure.Select(Target);\n        this.Target = this.Content;\n        this.Parent = Parent;\n        this._Data = Data;\n        this.SubSelector = SubSelector;\n        this.SubSelectorHandler = SubSelectorHandler.bind(this);\n        this.BeforeBuild = BeforeBuild.bind(this);\n        this.AfterBuild = AfterBuild.bind(this);\n        var SubTreeClass = Drop ? 'mtb-sub_tree dropable' : 'mtb-sub_tree';\n        var Lvl = 0;\n        var Branch = ListElement === null ? this.Content.innerHTML : ListElement;\n        if (this.SubSelector === null) {\n            this.SubSelector = '.mtb-sub_tree';\n            Branch = Branch.replace(/^([\\s\\S]*)(<\\/\\w+>)$/, function (match, html, entag) {\n                entag = '<div class=\"' + SubTreeClass + '\"></div>' + entag;\n                return html + entag;\n            });\n        }\n        this.LineBuilder = Lure.Compile(Branch, true);\n        var $this = this;\n\n        var Index = 0; //unque serial number of branch\n\n        var BuildElement = function BuildElement(obj, key, indexJ) {\n            Index++;\n            var extra = {\n                $lvl: Lvl,\n                $key: key,\n                $index: Index,\n                $j: indexJ\n            };\n            var line = Lure.CreateElementFromString($this.LineBuilder(obj, Index, null, extra));\n            line.classList.add('mtb-branch');\n            for (var _key in obj) {\n                var ObjItem = obj[_key];\n                if (Array.isArray(ObjItem)) {\n                    Lvl++;\n                    for (var i = 0; i < ObjItem.length; i++) {\n                        if ($this.SubSelector === null) {\n                            line.appendChild(BuildElement(ObjItem[i], _key, i));\n                        } else {\n                            line.classList.add('mtb-has_tree');\n                            if (Drop) line.classList.add('dropable');\n                            var sub = line.querySelector($this.SubSelector);\n                            sub.appendChild(BuildElement(ObjItem[i], _key, i));\n                        }\n                    }\n                    Lvl--;\n                }\n            }\n            return line;\n        };\n        var Build = function Build() {\n            $this.BeforeBuild();\n            if (Array.isArray($this._Data)) {\n                $this.Content.innerHTML = '';\n                Lvl++;\n                for (var j = 0; j < $this._Data.length; j++) {\n                    $this.Content.appendChild(BuildElement($this._Data[j], \"root\", 0));\n                }Lvl--;\n            } else {\n                $this.Content.appendChild(BuildElement($this._Data, \"root\", 0));\n            }\n            Lvl = 0;\n            Index = 0;\n            $this.AfterBuild();\n        };\n\n        Build(this._Data);\n\n        //### METHODS\n        this.Refresh = function () {\n            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $this._Data;\n\n            $this._Data = data;\n            Build();\n        };\n    }\n\n    _createClass(TreeBuilder, [{\n        key: 'Data',\n        get: function get() {\n            return this._Data;\n        },\n        set: function set(data) {\n            this._Data = data;\n        }\n    }]);\n\n    return TreeBuilder;\n}();\n\n//Tutorial\n//TargetButton = {string, HTMLElement} - button who start the tutor\n//TargetContent = {string, HTMLElement} - select/element where search tutors\n\n\nvar MonsieurTutor =\n/**\r\n *\r\n * @param {HTMLElement} TargetButton\r\n * @param {HTMLElement} TargetContent\r\n */\nfunction MonsieurTutor() {\n    var TargetButton = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var TargetContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, MonsieurTutor);\n\n    //### DEFINES\n    var $this = this;\n    this.TargetButton = Lure.Select(TargetButton);\n    this.TargetContent = Lure.Select(TargetContent);\n    var MT = '<div class=\"monsieur-tutor\">\\n                        <div class=\"cd-caption\">\\n                            <span>\\u0428\\u0430\\u0433 </span>\\n                            <span class=\"monsieur-tutor_step\"></span>\\n                        </div>\\n                        <div class=\"monsieur-tutor_desc\"></div>\\n                        <div class=\"monsieur-tutor_btns\">\\n                            <button class=\"button btn-tutor btn-tutor-stop\">\\u041F\\u0440\\u0435\\u0440\\u0432\\u0430\\u0442\\u044C \\u043E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435</button>\\n                            <button class=\"button btn-tutor btn-tutor-next\">\\u0414\\u0430\\u043Be\\u0435 \\u2192</button></div>\\n                   </div>';\n    this.Content = Lure.CreateElementFromString(MT);\n    this.ContentBG = Lure.CreateElementFromString('<div class=\"monsieur-tutor-bg dialog-wrapper\"></div>');\n    this.Content.style.display = 'none';\n    this.ContentBG.style.display = 'none';\n    this._Description = this.Content.querySelector('.monsieur-tutor_desc');\n    this._Step = this.Content.querySelector('.monsieur-tutor_step');\n    this._ButtonNext = this.Content.querySelector('.btn-tutor-next');\n    this._ButtonStop = this.Content.querySelector('.btn-tutor-stop');\n\n    $this.Data = [];\n    var ButtonNextText = this._ButtonNext.innerHTML;\n    var TutorPosition = 0;\n    /*get transparent*/\n    var temp = document.createElement('div');\n    temp.style.display = 'none';\n    document.body.appendChild(temp);\n    var ColorTransparent = window.getComputedStyle(temp).backgroundColor;\n    temp.remove();\n    //---\n    var ElemCssRestore = function ElemCssRestore() {\n        var Element = $this.Data[TutorPosition - 1].obj;\n        if (Element.tagName.toLowerCase() !== 'tr') {\n            Element.style.zIndex = '';\n            Element.style.position = '';\n            Element.style.outline = '';\n            Element.style.display = '';\n            Element.style.backgroundColor = '';\n            return;\n        }\n        var nElements = Element.querySelectorAll('th, td');\n        nElements.forEach(function (elem) {\n            elem.style.position = '';\n            elem.style.zIndex = '';\n        });\n    };\n    var ElemCssSet = function ElemCssSet(Element) {\n        if (Element.tagName.toLowerCase() !== 'tr') {\n            Element.style.zIndex = '11';\n            Element.style.position = 'relative';\n            Element.style.outline = '5px #bee0ff solid';\n            var style = window.getComputedStyle(Element);\n            if (style.backgroundColor === ColorTransparent) Element.style.backgroundColor = \"#fff\";\n            if (!Lure.isVisible(Element)) {\n                if (Element.tagName.toLowerCase() !== \"table\") Element.style.display = 'block';else Element.style.display = 'table';\n            }\n            /* if (Element.length > 1)\r\n             Element.eq(1).css({zIndex: '', outline: ''});*/\n            return;\n        }\n        var nElements = Element.querySelectorAll('th, td');\n        nElements.forEach(function (elem) {\n            elem.style.zIndex = \"11\";\n            elem.style.position = \"relative\";\n            var style = window.getComputedStyle(elem);\n            if (style.backgroundColor === ColorTransparent) {\n                elem.style.backgroundColor = \"#fff\";\n            }\n        });\n        /* if (Element.length > 1)\r\n         Element.eq(1).css({zIndex: '', outline: ''});*/\n    };\n    var Run = function Run() {\n        console.log(\"tutor run\");\n        if ($this.TargetContent === null) return;\n        var Items = $this.TargetContent.querySelectorAll('*[data-tutor]:not([data-line]), *[data-tutor][data-line=\"0\"]');\n        if (Items.length < 1) {\n            Lure.Confirm(\"Сообщение\", \"На этом экране нет подсказок\");\n            return;\n        }\n        // document.body.style.position = 'relative';\n\n        Items.forEach(function (item) {\n            $this.Data.push({\n                obj: item,\n                desc: item.dataset['tutor']\n            });\n        });\n        $this.Content.style.display = '';\n        $this.ContentBG.style.display = '';\n        GoStep();\n    };\n    var GoStep = function GoStep() {\n        //restore prev element's css\n        if (TutorPosition > 0) ElemCssRestore();\n        if (TutorPosition === $this.Data.length) {\n            Stop();\n            return;\n        }\n        //select next elem\n        var Element = $this.Data[TutorPosition].obj;\n        var ElementDesc = $this.Data[TutorPosition].desc;\n        // check for invisible parent\n        var ElemParent = ElementDesc.match(/{([\\s\\S]+)}/);\n        if (ElemParent !== null) {\n            ElemParent = ElemParent[1];\n            ElementDesc = ElementDesc.replace(/{([\\s\\S]+)}/, '');\n            Element = Element.closest(ElemParent);\n            $this.Data[TutorPosition].obj = Element;\n            //Element.push( );\n        }\n        //set element visible\n        ElemCssSet(Element);\n        //write new element title and desc\n        $this._Step.innerHTML = TutorPosition + 1 + \"/\" + $this.Data.length;\n        $this._Description.innerHTML = ElementDesc;\n        //caption next button\n        if (TutorPosition + 1 === $this.Data.length) {\n            $this._ButtonNext.innerHTML = 'Завершить';\n            $this._ButtonStop.style.opacity = '0';\n        }\n\n        //move tutor desc box\n        var posX = Element.offsetLeft + Element.clientWidth + 10;\n        var posY = Element.offsetTop - $this.Content.clientHeight - 10;\n        if (posY < 10) posY = 10;\n        if (posX + $this.Content.clientWidth > window.innerWidth) {\n            posX = Element.offsetLeft - $this.Content.clientWidth - 10;\n            if (window.innerWidth < $this.Content.clientWidth + Element.clientWidth) {\n                posX = Element.offsetLeft + Element.clientWidth - $this.Content.clientWidth - 20;\n            }\n        }\n        if (document.documentElement.scrollTop > posY || document.documentElement.scrollTop + window.innerHeight < Element.offsetTop + Element.offsetHeight) {\n            //$('html, body').animate({scrollTop: posY - 10}, 300);\n            document.documentElement.scrollTop = posY - 10 + 'px';\n        }\n        if (posX < 10) posX = 10;\n        $this.Content.style.left = posX + 'px';\n        $this.Content.style.top = posY + 'px';\n\n        TutorPosition++;\n    };\n    var Stop = function Stop() {\n        //     document.body.style.position = '';\n        ElemCssRestore();\n        $this.Content.style.display = 'none';\n        $this.ContentBG.style.display = 'none';\n        $this._ButtonNext.innerHTML = ButtonNextText;\n        $this._ButtonStop.style.opacity = '';\n        TutorPosition = 0;\n        $this.Data = [];\n    };\n    //### CONSTRUCT\n\n    this.TargetButton.onclick = Run;\n    this._ButtonNext.onclick = GoStep;\n    this._ButtonStop.onclick = Stop;\n\n    document.body.appendChild(this.Content);\n    document.body.appendChild(this.ContentBG);\n\n    //### METHODS\n    this.Run = Run;\n};\n\nvar MonsieurLoading = function () {\n    function MonsieurLoading() {\n        var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            _ref5$Target = _ref5.Target,\n            Target = _ref5$Target === undefined ? 'body' : _ref5$Target;\n\n        _classCallCheck(this, MonsieurLoading);\n\n        this.Target = Lure.Select(Target);\n        this.Target.style.position = 'relative';\n        this.Content = Lure.CreateElementFromString('<div class=\"ajax-loading\" style=\"display: none\"></div>');\n        var cx = 60; //diameter\n        var cy = 60;\n        var _DoArc = function _DoArc(radius, maxAngle) {\n            var d = \" M \" + (cx + radius) + \" \" + cy;\n            for (var angle = 0; angle < maxAngle; angle++) {\n                var rad = angle * (Math.PI / 180); //deg to rad\n                var x = cx + Math.cos(rad) * radius;\n                var y = cy + Math.sin(rad) * radius;\n                d += \" L \" + x + \" \" + y;\n            }\n            return d;\n        };\n        var svg = '<svg xmlns=\"http://www.w3.org/2000/svg\">\\n                     <path d=\"' + _DoArc(45, 160) + '\" class=\"monsieur-arc1\" fill=\"none\" stroke=\"#449b22\" stroke-width=\"5\"></path>\\n                     <path d=\"' + _DoArc(40, 130) + '\" class=\"monsieur-arc2\" fill=\"none\" stroke=\"#61c8de\" stroke-width=\"5\"></path>\\n                     <path d=\"' + _DoArc(35, 100) + '\" class=\"monsieur-arc3\" fill=\"none\" stroke=\"#761c19\" stroke-width=\"5\"></path>\\n                     <path d=\"' + _DoArc(30, 70) + '\"  class=\"monsieur-arc4\" fill=\"none\" stroke=\"#333333\" stroke-width=\"5\"></path>\\n                   </svg>';\n        this.Target.appendChild(this.Content);\n        this.Content.innerHTML = svg;\n        this.Timeout = null;\n    }\n\n    _createClass(MonsieurLoading, [{\n        key: 'Show',\n        value: function Show() {\n            var $this = this;\n            this.Content.style.display = '';\n            clearTimeout(this.TimeoutHide);\n            this.Timeout = setTimeout(function () {\n                $this.Content.style.display = 'block';\n            }, 70);\n        }\n    }, {\n        key: 'Hide',\n        value: function Hide() {\n            var $this = this;\n            clearTimeout(this.Timeout);\n            this.TimeoutHide = setTimeout(function () {\n                $this.Content.style.display = 'none';\n            }, 250); //hide may be called in same time as the show()\n        }\n    }]);\n\n    return MonsieurLoading;\n}();\n\nvar MonsieurTooltip = function MonsieurTooltip(_ref6) {\n    var _ref6$Target = _ref6.Target,\n        Target = _ref6$Target === undefined ? document : _ref6$Target,\n        _ref6$Attribute = _ref6.Attribute,\n        Attribute = _ref6$Attribute === undefined ? \"data-tooltip\" : _ref6$Attribute,\n        _ref6$Delay = _ref6.Delay,\n        Delay = _ref6$Delay === undefined ? 400 : _ref6$Delay,\n        _ref6$Time = _ref6.Time,\n        Time = _ref6$Time === undefined ? 1100 : _ref6$Time,\n        _ref6$Cursor = _ref6.Cursor,\n        Cursor = _ref6$Cursor === undefined ? \"help\" : _ref6$Cursor,\n        _ref6$Custom = _ref6.Custom,\n        Custom = _ref6$Custom === undefined ? '<div class=\"monsieur-tooltip\">' : _ref6$Custom,\n        _ref6$AfterBuild = _ref6.AfterBuild,\n        AfterBuild = _ref6$AfterBuild === undefined ? function () {} : _ref6$AfterBuild;\n\n    _classCallCheck(this, MonsieurTooltip);\n\n    var $this = this;\n    this.ToolTip = Lure.CreateElementFromString(Custom);\n    var Timer = null;\n    var Destr = null;\n    this.Target = Lure.Select(Target);\n    var Show = function (text) {\n        this.ToolTip.innerHTML = text;\n        $this.Target.appendChild(this.ToolTip);\n    }.bind(this);\n    Lure.AddEventListenerGlobal('mouseover', '[' + Attribute + ']', function (e) {\n        var text = e.currentTarget.dataset[Attribute.replace('data-', '')];\n        clearTimeout(Destr);\n        Timer = setTimeout(function () {\n            Show(text);\n        }, Delay);\n    }, this.Target);\n    Lure.AddEventListenerGlobal('mouseout', '[' + Attribute + ']', function (e) {\n        clearTimeout(Timer);\n        Destr = setTimeout(function () {\n            //$this.ToolTip.remove();\n        }, Time);\n    }, this.Target);\n    setTimeout(function () {\n        AfterBuild.bind($this);\n    }, 0);\n};\n\n//Lure.Content = MonsieurContent;","//\r\n// Lure Framework v0.9.1 [29.08.2017]\r\n//\r\n//<utils>;\r\nif (!Date.prototype.format){\r\n    Date.prototype.format = function (format) {\r\n        return Lure._DateFormat(this, format);\r\n    }\r\n}\r\n//</utils>\r\nlet Lure = (function(){\r\n    class LureClass {\r\n        constructor() {\r\n            this.Plugin = {};\r\n            let $this = this;\r\n            this.Debug = false;\r\n            this.isEditableEventsEnabled = false;\r\n            //regexes\r\n            const regexEach = new RegExp(/{{#each\\s+([^}]+)}}/g);\r\n            const regexIfOuter = new RegExp(/{{#if\\s+([^}]+)}}([\\s\\S]*?){{#endif}}/g);\r\n            const regexIfInner = new RegExp(/{{#if([\\s\\S]*?)}}/g);\r\n            const regexExpressions = new RegExp(/{{([^#}]+)}}/g);\r\n            const regexEditable = new RegExp(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/g);\r\n            //compile helpers\r\n            const spaces = \"    \";\r\n            const preCompileIfOuter = function(s){\r\n                s = s\r\n                    .replace(/#IF/g, '#if')\r\n                    .replace(/#ENDIF/g, '#endif')\r\n                    .replace(regexIfOuter, function (bkt, condition, expression ) {\r\n                        return `\\`+\r\n/* OUTER \"IF\" */\r\n(function($this){\r\n    if (${preParseObjectChecker(condition)}) {\r\n        return \\`${expression}\\`;\r\n    }\r\n    return '';\r\n})($this)+\\``;\r\n                    });\r\n                return s;\r\n            };\r\n            const preCompileIfInner = function(s){\r\n                s = s.replace(regexIfInner, function (s, condition) {\r\n                    condition = condition\r\n                        .replace(/&gt;/g,  \">\")\r\n                        .replace(/&lt;/g,  \"<\")\r\n                        .replace(/#less/g, \" < \")\r\n                        .replace(/#more/g, \" > \")\r\n                        .replace(/&amp;/g, \"&\")\r\n                        .replace(/\\|/g,    '\"');\r\n                    return `\\`+\r\n    /* LOCAL \"IF\" */\r\n    (function(){\r\n        return (${condition}); \r\n        return '';})()+\\``;\r\n                });\r\n                return s;\r\n            };\r\n            const preCompileEach = function(s){\r\n                s = s\r\n                    .replace(/{{#EACH/g, \"{{#each\")\r\n                    .replace(/{{#ENDEACH/g, \"{{#endeach\");\r\n                let EachList = s.match(regexEach);\r\n                let lvl = 0;\r\n                if (EachList !== null){\r\n                    for (let i = EachList.length-1; i >= 0; i--){\r\n                        let current = EachList[i];\r\n                        let isInnerEach = false;\r\n                        lvl++;\r\n                        let StartPoint = s.indexOf(current);\r\n                        let EndPoint   = s.indexOf(\"{{#endeach}}\", StartPoint);\r\n\r\n                        let prevStarts = s.slice(0, StartPoint).match(regexEach);\r\n                        prevStarts = prevStarts!==null ? prevStarts.length: 0;\r\n                        let prevEnds = s.slice(0, StartPoint).match(/{{#endeach}}/g);\r\n                        prevEnds = prevEnds!==null ? prevEnds.length: 0;\r\n                        if ( (prevStarts > prevEnds ))\r\n                        {\r\n                            isInnerEach = true;\r\n                            lvl = 0;\r\n                        }\r\n                        ////\r\n                        let string_Each = s.slice(StartPoint, EndPoint+12);\r\n                        let expression  = string_Each.slice(current.length, string_Each.length-12);\r\n                        let ObjectName = current.replace(/{{#each\\s+([\\s\\S]+)}}/, function(a,name){\r\n                            return name;\r\n                        });\r\n                        ObjectName = preParseObjectChecker(ObjectName);\r\n                        //the each template\r\n                        let eachComplied = '`+' +\r\n                            spaces.repeat(lvl)+'/* EACH */(function(inner, $parent){                                                                   \\r\\n' +\r\n                            spaces.repeat(lvl)+'    if (!inner || (Object.keys(inner).length === 0 && inner.constructor === Object && isNaN(inner)))   \\r\\n' +\r\n                            spaces.repeat(lvl)+'        return \"\";                                                                                     \\r\\n' +\r\n                            spaces.repeat(lvl)+'    let string_result= \"\";                                                                             \\r\\n' +\r\n                            spaces.repeat(lvl)+'    for(let j = 0; j < inner.length; j++){                                                             \\r\\n' +\r\n                            spaces.repeat(lvl)+'        let $this = inner[j];                                                                          \\r\\n' +\r\n                            spaces.repeat(lvl)+'        let o = inner[j];                                                                              \\r\\n' +\r\n                            spaces.repeat(lvl)+'        string_result = string_result + \\`'+preParse(expression) + '\\`;                                \\r\\n' +\r\n                            spaces.repeat(lvl)+'    }                                                                                                  \\r\\n' +\r\n                            spaces.repeat(lvl)+'    return string_result;                                                                              \\r\\n' +\r\n                            spaces.repeat(lvl)+'})('+ObjectName+', {$parent: typeof $parent !== \"undefined\"?$parent:null, $this: $this, i: i} ) +`         ';\r\n                        s = s.replace(string_Each, eachComplied)\r\n\r\n                    }\r\n                }\r\n                return s;\r\n            };\r\n            const preCompileEditable = function(s){\r\n                return  s.replace(regexEditable, function (match, editable, content) {\r\n                    match = match.replace(/<[\\s\\S]+?(>)/, function (a, b) {\r\n                        return a.replace(b, ` data-line=\"{{i}}\" data-property=\"${content.replace('{{','').replace('}}','')}\">`);\r\n                    });\r\n                    return match.replace(content, `<div class=\"editable-helper editable-value\">${content}</div><div class=\"editable-helper editable-icon\"></div>`);\r\n                });\r\n\r\n            };\r\n            const preParseObjectChecker = function (ObjectName) {\r\n                //ok check if it's expression\r\n                if (ObjectName.indexOf('Available + Dis')>-1)\r\n                    ;//debugger;\r\n                function checking(c) {\r\n\r\n                    let s = c.replace(/\\s/g, \"\");\r\n                    let containsSpecialObject = (s.indexOf('$item')> -1 || s.indexOf('$this') > -1 || s.indexOf('$parent') > -1 ) ;\r\n                    let containsSpecialObjectTreeBuiler = (s.indexOf('$index')> -1 || s.indexOf('$j')> -1 || s.indexOf('$key') > -1 || s.indexOf('$lvl') > -1 || s.indexOf('$g.') > -1 ) ;\r\n                    let isSpecialSymbol = (s === \"?\" || s.indexOf(\"=\") > -1 || s.indexOf(\">\") > -1|| s.indexOf(\"<\") > -1);\r\n                    let isString = s.match(/^[\"'\\\\][\\s\\S]*[\"'\\\\]$/) !== null;\r\n                    let isIterator = s === \"i\" || s === \"j\";\r\n                    let isNumber = !isNaN(s);\r\n                    if (containsSpecialObject || containsSpecialObjectTreeBuiler || isIterator || isNumber || isString ||isSpecialSymbol){\r\n                        if (s.indexOf('$g.') > -1){ //if global object\r\n                            return s.replace('$g.', '');\r\n                        }\r\n                        return c;\r\n                    }\r\n                    return \"o.\"+s;\r\n                }\r\n                ObjectName = ObjectName.replace(/[^\\-+\\/%()*]+/g, function (c) {\r\n                    let parent = c.match(/&/g);\r\n                    if (parent !== null){\r\n                        for (let i = 0; i < parent.length; i++){\r\n                            if (i < parent.length-1)\r\n                                c = c.replace('&', \"$parent\");\r\n                            else\r\n                                c = c.replace('&', \"$parent.$this\");\r\n                        }\r\n                        return c;\r\n                    }\r\n                    else {\r\n                        return checking(c);\r\n                    }\r\n                });\r\n                ObjectName = ObjectName.replace(/\\\\'/g,\"'\");\r\n                ObjectName = \"(\"+ObjectName+\")\"; //fucking concatenation shell\r\n                return ObjectName;\r\n            };\r\n            const preParse = function(c, isCheckExpression = true){\r\n                return c.replace(regexExpressions, function(bkt, expression){\r\n                    if (isCheckExpression)\r\n                        return '${'+preParseObjectChecker(expression)+'}';\r\n                    else\r\n                        return '${'+expression+'}';\r\n                });\r\n            };\r\n            /**\r\n             * Template compiler\r\n             * @param {string} DomString\r\n             * @param {boolean} isListElement\r\n             * @return {Function}\r\n             * @constructor\r\n             */\r\n            this.Compile = function(DomString, isListElement) {\r\n                DomString = DomString.replace(/[\\n]+/g, \" \").replace(/[ ]{3,}/g, '');\r\n                //shell '\r\n                DomString = DomString.replace(/'/g, \"\\\\'\");\r\n                //.replace(/&gt;/g, \">\").replace(/&lt;/g, \"<\").replace(/&amp;/g, \"&\");\r\n                if (isListElement)\r\n                {\r\n                    DomString = preCompileEditable(DomString);\r\n                    DomString = preCompileIfOuter(DomString);\r\n                    DomString = preCompileEach(DomString);\r\n                }\r\n\r\n                DomString = preParse(DomString);\r\n                DomString = preCompileIfInner(DomString);\r\n                let string_Function = `\r\nlet $this = o;\r\nlet $item = o;\r\nlet $num = i+1;\r\nlet $denum = length-i;\r\n//treebuilder's\r\nlet $index;\r\nlet $key;\r\nlet $lvl;\r\nlet $j;\r\nif (extra){\r\n    $index = extra.$index;\r\n    $key = extra.$key;\r\n    $lvl = extra.$lvl;\r\n    $j = extra.$j;\r\n}\r\nlet string_Result = \"\";\r\nif (o === undefined || (Object.keys(o).length === 0 && o.constructor === Object && isNaN(o)) ) \r\n    return '';\r\nreturn \\``;\r\n                string_Function += DomString +'`;';\r\n                //if ie\r\n                //let isUnbrowser = true;\r\n                //if (isUnbrowser){\r\n                    string_Function = string_Function\r\n                        .replace(/`/g, `'`)\r\n                        .replace(/\\$\\{([^}]*)\\}/g, function(match, val){\r\n                        return `'+${val}+'`\r\n                    });\r\n                //}\r\n\r\n                let function_f;\r\n                try {\r\n                    function_f = new Function('o', 'i', 'length', 'extra', string_Function);\r\n                }\r\n                catch (e){\r\n                    console.info(string_Function);\r\n                    console.error(e);\r\n                }\r\n                //console.log('Compiled:');\r\n                //console.log(f);\r\n                return function_f;\r\n            };\r\n            this._EditablesEventListenerRun = function(content){\r\n                $this.AddEventListenerGlobal('dblclick', '.editable', function (e) {\r\n                    $this.Editable.RemoveEdits();\r\n                    $this.Editable.AddEdits(e.currentTarget);\r\n                }, content);\r\n                $this.AddEventListenerGlobal('click', '.editable-icon', function (e) {\r\n                    $this.Editable.RemoveEdits();\r\n                    $this.Editable.AddEdits(e.currentTarget.closest('.editable'));\r\n                }, content);\r\n                $this.AddEventListenerGlobal('dblclick', '.editable', function (e) {\r\n                    $this.Editable.RemoveEdits();\r\n                    $this.Editable.AddEdits(e.currentTarget);\r\n                }, content);\r\n                //editing\r\n                $this.AddEventListenerGlobal('change', '.editable-editor', function (e) {\r\n                    let val = e.currentTarget.value;\r\n                    let valPrev = e.currentTarget.parentElement.dataset['value'];\r\n                    if (val !== valPrev)\r\n                        e.currentTarget.parentElement.classList.add('editable-waiting');\r\n                    else\r\n                        e.currentTarget.parentElement.classList.remove('editable-waiting');\r\n                }, content);\r\n\r\n                $this.AddEventListenerGlobal('keyup', '.editable-textbox', function (e) {\r\n                    if(e.keyCode === 13) {\r\n                        $this.Editable.Save(e.currentTarget.closest('.editable'),  e.currentTarget.value);\r\n                        return false;\r\n                    }\r\n\r\n                    let val = e.currentTarget.value;\r\n                    let valPrev = e.currentTarget.parentElement.dataset['value'];\r\n                    if (val !== valPrev)\r\n                        e.currentTarget.parentElement.classList.add('editable-waiting');\r\n                    else\r\n                        e.currentTarget.parentElement.classList.remove('editable-waiting');\r\n\r\n                }, content);\r\n\r\n                //save\r\n                $this.AddEventListenerGlobal('click', '.editable-save-button', function (e) {\r\n                    let EditableElement = e.currentTarget.closest('.editable');\r\n                    $this.Editable.Save(e.currentTarget.closest('.editable'),  EditableElement.querySelector('.editable-editor').value);\r\n                }, content);\r\n\r\n\r\n\r\n                if ($this.isHasEditablesEventsEnabled)\r\n                    return;\r\n                document.addEventListener('click', function (e) {\r\n                    if ( e.target.classList.contains('editable-helper') && document.querySelectorAll('.editable-helper, .editable-editing') !== null)\r\n                    {\r\n                        return;\r\n                    }\r\n                    $this.Editable.RemoveEdits();\r\n                });\r\n                $this.isHasEditablesEventsEnabled = true;\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {DocumentFragment}\r\n             * @constructor\r\n             */\r\n            this.CreateElementFromString = function(string, ownerTagName = \"div\"){\r\n                let frag = document.createDocumentFragment();\r\n                let elem = document.createElement(ownerTagName);\r\n                elem.innerHTML = string;\r\n                while (elem.childNodes[0]) {\r\n                    frag.appendChild(elem.childNodes[0]);\r\n                }\r\n                return frag.childNodes[0];\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {Array}\r\n             * @constructor\r\n             */\r\n            this.CreateElementsFromString = function(string, ownerTagName = \"div\"){\r\n                let frag = document.createDocumentFragment();\r\n                let elem = document.createElement(ownerTagName);\r\n                elem.innerHTML = string;\r\n                while (elem.childNodes[0]) {\r\n                    frag.appendChild(elem.childNodes[0]);\r\n                }\r\n                if (frag.childNodes.length > 0)\r\n                {\r\n                    let nodes = [];\r\n                    for (let i = 0; i < frag.childNodes.length; i++)\r\n                        nodes.push(frag.childNodes[i]);\r\n                    return nodes;\r\n                }\r\n                return null;\r\n            };\r\n            /**\r\n             *\r\n             * @param {css, HTMLElement} query\r\n             * @param parent\r\n             * @return {HTMLElement}\r\n             * @constructor\r\n             */\r\n            this.Select = function(query, parent = document){\r\n                if (query === '' || query === null)\r\n                    return null;\r\n                return query instanceof Node ? query : parent.querySelector(query);\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} Selector\r\n             * @param {HTMLElement} parent\r\n             * @return {NodeList}\r\n             * @constructor\r\n             */\r\n            this.SelectAll = function(Selector, parent = document){\r\n                if (typeof Selector === 'undefined')\r\n                    return [];\r\n                if (typeof Selector.tagName !== 'undefined' || Selector === document)\r\n                    return [Selector];\r\n                return parent.querySelectorAll(Selector);\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} eventName\r\n             * @param {string} selector\r\n             * @param {function} handler\r\n             * @param {HTMLElement} parent\r\n             * @param {MonsieurContent} thisArg\r\n             * @constructor\r\n             */\r\n            this.AddEventListenerGlobal = function(eventName, selector, handler, parent = document, thisArg){\r\n                parent.addEventListener(eventName, function(e) {\r\n                    let target = e.target;\r\n                    let isIt = false;\r\n                    let event = Lure._EventClone(e);\r\n                    let elems = parent.querySelectorAll(selector);\r\n                    if (elems[0] === target)\r\n                    {\r\n                        event.currentTarget = target;\r\n                        isIt = true;\r\n                    }\r\n                    if (!isIt){\r\n                        for (let i = 0; i < elems.length; i++){\r\n                            if (elems[i].contains(target)){\r\n                                isIt = true;\r\n                                event.currentTarget = target.closest(selector);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (isIt){\r\n                        handler.call(thisArg? thisArg : event.currentTarget, event);\r\n                    }\r\n                });\r\n            };\r\n            /**\r\n             *\r\n             * @param {HTMLElement} HTMLElement\r\n             * @return {boolean}\r\n             */\r\n            this.isVisible = function (HTMLElement){\r\n                //check invisible state;\r\n                let isVisibleSelf = function(element){\r\n                    let ContentStyle = window.getComputedStyle(element);\r\n                    if ( (ContentStyle.display === \"none\") || (ContentStyle.opacity === \"0\") || (ContentStyle.visibility === \"hidden\") )\r\n                        return false;\r\n                    //check for null-size\r\n                    if ( (parseInt(ContentStyle.minWidth) === 0 || ContentStyle.minWidth === \"auto\")  && parseInt(ContentStyle.width) === 0)\r\n                        return false;\r\n                    if ( (parseInt(ContentStyle.minHeight) === 0 || ContentStyle.minHeight === \"auto\") && parseInt(ContentStyle.height) === 0)\r\n                        return false;\r\n                    return true;\r\n                };\r\n                let isVisibleParent = function (element) {\r\n                    while (element.parentElement){\r\n                        if (!isVisibleSelf(element.parentElement))\r\n                        {\r\n                            return false;\r\n                        }\r\n                        element = element.parentElement;\r\n                    }\r\n                    return true;\r\n                };\r\n                if (!isVisibleSelf(HTMLElement))\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                return isVisibleParent(HTMLElement);\r\n\r\n                return true;\r\n            };\r\n            /**\r\n             *\r\n             * @param e\r\n             * @return {ClonedEvent}\r\n             * @constructor\r\n             */\r\n            this._EventClone = function(e) {\r\n                function ClonedEvent() {}\r\n                let clone=new ClonedEvent();\r\n                for (let p in e) {\r\n                    let d = Object.getOwnPropertyDescriptor(e, p);\r\n                    if (d && (!d.writable || !d.configurable || !d.enumerable || d.get || d.set)) {\r\n                        Object.defineProperty(clone, p, d);\r\n                    }\r\n                    else {\r\n                        clone[p] = e[p];\r\n                    }\r\n                }\r\n                Object.setPrototypeOf(clone, e);\r\n                return clone;\r\n            };\r\n\r\n            this.GetFileText = function (url) {\r\n                return new Promise(function (resolve, reject) {\r\n                    let xhr = new XMLHttpRequest();\r\n                    xhr.onload = function () {\r\n                        resolve( xhr.response);\r\n                    };\r\n                    xhr.onerror = function () {\r\n                        reject(new Error(\r\n                            'XMLHttpRequest Error: '+this.statusText));\r\n                    };\r\n                    if (url.indexOf('..') > -1)\r\n                        url = url.replace('..', document.location.protocol + \"//\" + document.location.host);\r\n                    else {\r\n                        url = document.location.href.substring(0, document.location.href.lastIndexOf('/')+1) + url;\r\n                    }\r\n                    console.log('Lure.GetFileText', url);\r\n                    xhr.open('GET', url);\r\n                    //xhr.setRequestHeader('Content-Type',\"text/plain; charset=x-user-defined\");\r\n                    xhr.send();\r\n                });\r\n\r\n\r\n            };\r\n            this.GetInlineSize = function(elem, fontSize='1rem'){\r\n                const hiddenStyle = \"left:-10000px;top:-10000px;height:auto;width:auto;position:absolute;\";\r\n                const clone = document.createElement('div');\r\n                for (let k in elem.style) {\r\n                    try {\r\n                        if ((elem.style[k] !== '') && (elem.style[k].indexOf(\":\") > 0)) {\r\n                            clone.style[k] = elem.style[k];\r\n                        }\r\n                    } catch (e) {}\r\n                }\r\n                document.all ? clone.style.setAttribute('cssText', hiddenStyle) : clone.setAttribute('style', hiddenStyle);\r\n                clone.style.fontSize = fontSize;\r\n                clone.innerHTML = elem.innerHTML;\r\n                parent.document.body.appendChild(clone);\r\n                const sizes = {width:clone.clientWidth,height:clone.clientHeight};\r\n                parent.document.body.removeChild(clone);\r\n                return sizes;\r\n            };\r\n            this.isNumeric = function(n) {\r\n                return !isNaN(parseFloat(n)) && isFinite(n);\r\n            };\r\n            //this.Content = MonsieurContent;\r\n            //this.Templator = Templator;\r\n            /*editable*/\r\n            //this.Editables = '.editable-waiting';\r\n            this._DateFormat = function (date, format = \"DD.MM.YYYY HH:mm:ss\") {\r\n                if (date === null || typeof date === 'undefined')\r\n                    return '';\r\n                let data = date.getDate();\r\n                let mo = date.getMonth();\r\n                let year = date.getFullYear();\r\n                let hour = date.getHours();\r\n                let min = date.getMinutes();\r\n                let sec = date.getSeconds();\r\n\r\n                return format\r\n                    .replace('DD', data.toString().length < 2? `0${data}`: data )\r\n                    .replace('D', data )\r\n                    .replace('MMM', $this.Culture.MonthNames[mo] )\r\n                    .replace('MM', mo.toString().length < 2 ? `0${mo}`:mo )\r\n                    .replace('M', mo )\r\n                    .replace('YYYY',year )\r\n                    .replace('YY',year.toString().substring(2,2) )\r\n                    .replace('Y',year )\r\n                    .replace('HH',hour.toString().length < 2 ? `0${hour}`:hour )\r\n                    .replace('hh',hour )\r\n                    .replace('mm',min.toString().length < 2 ? `0${min}`:min )\r\n                    .replace('ss',sec.toString().length < 2 ? `0${sec}`:sec );\r\n            };\r\n            this.Editable = {\r\n                EditMode: false,\r\n                RemoveWaiting(){\r\n                    let waiedites = document.querySelectorAll('.editable-waiting');\r\n                    waiedites.forEach(function (item) {\r\n                        item.classList.remove('editable-waiting');\r\n                    });\r\n                },\r\n                RemoveEdits(){\r\n                    if ($this.Editable.EditMode)\r\n                        return;\r\n                    let editables = document.querySelectorAll('.editable-editing');\r\n                    editables.forEach(function (item) {\r\n                        item.innerHTML = item._innerHTML;\r\n                        item.classList.remove('editable-editing');\r\n                    });\r\n                    $this.Editable.RemoveWaiting();\r\n                },\r\n                AddEdits(EditableElement){\r\n                    EditableElement._innerHTML = EditableElement.innerHTML;\r\n                    let ValuePrev = EditableElement.querySelector('.editable-value').innerHTML;\r\n                    EditableElement.classList.add('editable-editing');\r\n                    EditableElement.dataset['value'] = ValuePrev;\r\n                   // EditableElement.style.paddingBottom = '0px';\r\n                    //EditableElement.style.paddingTop = '0px';\r\n                    let SaveButton = $this.Editable.EditMode? '': `<div class=\"editable-helper editable-save-button\"></div>`;\r\n                    if (!EditableElement.dataset['object']) //if no selectable data, just text editor is needed\r\n                    {\r\n                        let EditType = EditableElement.dataset['type'];\r\n                        if (typeof EditType === 'undefined')\r\n                            EditType = 'text';\r\n                        EditableElement.innerHTML = `<input class=\"textbox editable-helper editable-editor editable-textbox\" type=\"${EditType}\" value=\"${ValuePrev}\"> ${SaveButton}`;\r\n                        EditableElement.querySelector('.editable-editor').focus();\r\n                        EditableElement.querySelector('.editable-editor').select();\r\n                    }\r\n                    else    //selectable data\r\n                    {\r\n                        let string_Select = `<select class=\"select editable-helper editable-editor editable-select\">`;\r\n                        let SelectData = eval(EditableElement.dataset['object']);\r\n                        //console.log('-SelectData data-', SelectData);\r\n                        let Property = EditableElement.dataset['property'];\r\n                        let SelectOptions = '';\r\n                        SelectData.forEach(function (item) {\r\n                            //SelectOptions += ``\r\n                            let attributes = '';\r\n                            if (typeof item === typeof {}){\r\n                                for (let key in item)\r\n                                {\r\n                                    attributes += ` data-property_${key}=\"${item[key]}\"`;\r\n                                }\r\n                                string_Select += `<option class=\"editable-helper\" ${attributes}>${item[Property]}</option>`;\r\n                            }\r\n                            else{\r\n                                string_Select += `<option class=\"editable-helper\" ${(item === ValuePrev)? \"selected\":\"\"}>${item}</option>`;\r\n                            }\r\n                        });\r\n                        string_Select += `</select>${SaveButton}</div>`;\r\n                        //let Select = Lure.CreateElementFromString(string_Select);\r\n                        //Select.value = ValuePrev;\r\n                        EditableElement.innerHTML = string_Select;\r\n\r\n                    }\r\n\r\n\r\n                },\r\n                Save(EditableElement, ValueNew){\r\n                    let Content = EditableElement.closest('.mt-content');\r\n                    let Controller = Content.MonsieurController;\r\n                    let i = EditableElement.dataset['line'];\r\n                    let Property = EditableElement.dataset['property'];\r\n                    let DataObject = Controller.Data[i];\r\n                    if (ValueNew === '' || ValueNew === null || typeof ValueNew === 'undefined'){\r\n                        console.info('New Value is empty');\r\n                        Lure.ErrorHint(EditableElement, \"Пустое поле или неправильные данные\");\r\n                        return;\r\n                    }\r\n                    EditableElement.innerHTML = EditableElement._innerHTML;\r\n                    EditableElement.dataset['value'] = ValueNew;\r\n                    EditableElement.querySelector('.editable-value').innerHTML = ValueNew;\r\n                    EditableElement.classList.remove('editable-editing');\r\n                    if (Property !== '$this' && Property !== \"$item\")\r\n                        DataObject[Property] = ValueNew;\r\n                    else\r\n                        DataObject = ValueNew;\r\n\r\n\r\n                    //so server now\r\n                    Controller.LineSave(i, Property, ValueNew, function () {\r\n                        Lure.Editable.RemoveWaiting();\r\n                        if (Property !== '$this' && Property !== \"$item\")\r\n                            Controller.Data[i][Property] = ValueNew;\r\n                        else\r\n                            Controller.Data[i] = ValueNew;\r\n                    });\r\n                }\r\n            };\r\n            ///\r\n            this.Settings = {\r\n                DialogBlur: null,                    //{string, jQuery, HTMLElement} - where blur on dialog\r\n                DialogAnimation: 'monsieur-animation-dialog', //{string} -  css-animation class\r\n                EditableClass:  'editable',\r\n                EditableWaiting:  'editable-waiting',\r\n            };\r\n            this.Culture = {\r\n                MonthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"],\r\n                MonthNamesShort: [\"янв.\", \"фев.\", \"мар.\", \"апр.\", \"май\", \"июн.\", \"июл.\", \"авг.\", \"сен.\", \"окт.\", \"ноя.\", \"дек.\"],\r\n                WeekDays: [\"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\", \"Воскресенье\"],\r\n                WeekDaysShort: [\"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\", \"вс\"],\r\n            };\r\n            this.TemplatorList = [];\r\n            this.ContentList = {};\r\n\r\n            /////\r\n            this._DialogCount = 0;\r\n        };\r\n\r\n        Perf(perfStart, text='Perf'){\r\n            const x = Math.floor((window.performance.now()-perfStart)*100)/100;\r\n            console.info(\"[\" + text + \"]: \" + x + \"ms\");\r\n            return x;\r\n        }\r\n\r\n        /**\r\n         * Confirmation dialog\r\n         * @param Caption\r\n         * @param Message\r\n         * @param CaptionColor\r\n         * @param CaptionBackground\r\n         * @param OnAgree\r\n         * @param OnCancel\r\n         * @constructor\r\n         */\r\n        Confirm(Caption  = \"Achtung\", Message = '', {\r\n            CaptionColor =  '',\r\n            CaptionBackground = '',\r\n            OnAgree = () => {},\r\n            OnCancel = null\r\n        } = {})\r\n        {\r\n\r\n            document.activeElement.blur();\r\n\r\n\r\n            let dialog = document.createElement('div');\r\n            dialog.classList.add('monsieur-confirm');\r\n            if (Lure.Settings.DialogAnimation)\r\n                dialog.classList.add(Lure.Settings.DialogAnimation);\r\n            //###title\r\n            let title = document.createElement(\"div\");\r\n            title.classList.add('cd-caption');\r\n            title.innerHTML = Caption;\r\n            title.style.color = CaptionColor;\r\n            title.style.background = CaptionBackground;\r\n            dialog.appendChild(title);\r\n            //###message field\r\n            let msg = document.createElement(\"div\");\r\n            msg.classList.add('cd-text');\r\n            msg.innerHTML = Message;\r\n            dialog.appendChild(msg);\r\n            //###buttonfield\r\n            let buttons = document.createElement(\"div\");\r\n            buttons.classList.add(\"cd-buttons\");\r\n            dialog.appendChild(buttons);\r\n            //###button confirm\r\n            let btnOk = document.createElement(\"div\");\r\n            btnOk.classList.add(\"button\", \"cd-button\", \"btn-diag-confirm\");\r\n            btnOk.innerHTML = \"Ok\";\r\n            btnOk.onclick = function(){\r\n                Lure._DialogCount--;\r\n                if (OnAgree !== null && OnAgree !== undefined)\r\n                    OnAgree();\r\n                if (Lure.Settings.DialogBlur && Lure._DialogCount < 1 )\r\n                    Lure.Select(Lure.Settings.DialogBlur).classList.remove('monsieur-blur');\r\n                //$(Lure.Settings.DialogBlur).removeClass('monsieur-blur');\r\n                wrap.remove();\r\n                dialog.remove();\r\n\r\n            };\r\n            dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnOk);\r\n            //###button cancel\r\n            if (OnCancel !== null)\r\n            {\r\n                let btnCancel = document.createElement(\"div\");\r\n                btnCancel.classList.add(\"button\", \"cd-button\", \"btn-diag-cancel\");\r\n                btnCancel.innerHTML = \"Отмена\";\r\n                btnCancel.onclick = function(){\r\n                    Lure._DialogCount--;\r\n                    if (OnCancel !== null)\r\n                        OnCancel();\r\n                    if (Lure.Settings.DialogBlur  && Lure._DialogCount < 1)\r\n                        Lure.Select(Lure.Settings.DialogBlur).classList.remove('monsieur-blur');\r\n                    //$(Lure.Settings.DialogBlur).removeClass('monsieur-blur');\r\n                    wrap.remove();\r\n                    dialog.remove();\r\n\r\n                };\r\n                dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnCancel);\r\n            }\r\n            //### Dialog-Wrapper\r\n            let wrap = document.createElement(\"div\");\r\n            wrap.classList.add('ConfirmDialog-wrapper');\r\n            document.body.appendChild(wrap);\r\n            document.body.appendChild(dialog);\r\n            Lure._DialogCount++;\r\n            if (Lure.Settings.DialogBlur)\r\n            {\r\n                wrap.style.background = 'none';\r\n                Lure.Select(Lure.Settings.DialogBlur).classList.add('monsieur-blur');\r\n                //$(Lure.Settings.DialogBlur).addClass('monsieur-blur');\r\n            }\r\n        }\r\n        //Confirmation dialog teamplate just\r\n        NoFeature(name = \"\"){\r\n            if (name !== \"\")\r\n                name = \"\\\"\"+name+\"\\\"\";\r\n            this.Confirm(\r\n                \"Error\",\r\n                \"Sorry, function \"+name+\" is not available yet\"\r\n            )\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param object\r\n         * @param msg\r\n         * @constructor\r\n         */\r\n        ErrorHint(object, msg) {\r\n            if (!msg)\r\n                msg = \"Поле не может быть пустым\";\r\n            let div = document.createElement('div');\r\n            div.classList.add('monsieur-error-hint');\r\n            div.innerHTML = msg;\r\n            object.parentElement.style.position = 'relative';\r\n            object.parentElement.appendChild(div);\r\n            div.style.display = 'block';\r\n            try {\r\n                div.animate({opacity: [0, 1]}, {duration : 300});\r\n            }\r\n            catch (e){}\r\n\r\n            setTimeout(function(){\r\n\r\n                try {\r\n                    div.animate({opacity: [1, 0]}, {duration : 300})\r\n                        .onfinish = ()=>{div.style.display = 'none'};\r\n                }\r\n                catch (e){\r\n                    div.style.display = 'none';\r\n                }\r\n                //TODO CHECK FADEIN FADEOUT\r\n                setTimeout(function(){\r\n                    object.parentElement.style.position = '';\r\n                    div.remove();\r\n                }, 500)\r\n            }, 2000)\r\n        }\r\n    }\r\n    return new LureClass();\r\n})();","//sets = {\r\n//  SubContent: [\r\n//      {sets},                             -same object to create subs\r\n// ],\r\n//\r\n// Controller:{                                   - if needs some Template master\r\n//    Type: Templator,                                    - class link [optional] Templator by default\r\n//    Target: {string|HTMLElement}                        -[optional] if Controller.Target is undefined, Controller.Target = sets.Target\r\n//    Data: {array|object},                               - data array [optional] Data === [] by default\r\n//    ListElement: {string|HTMLElement},                  - repeated element\r\n//    EmptyMessage: \"no items\",                           - render if Data.length === 0;\r\n\r\n//  Control: {\r\n//    Target: {string, jQuery, HTMLElement},\r\n//    Global: {bool}                               - set global event listener. Set true if control renders after init or it renders dynamicly\r\n//    OnClick: {function}                          - here this === current MonsieurContent\r\n//    OnChange: {function}                         - here this === current MonsieurContent\r\n// },}\r\n\r\nLure.Plugin.Content = {};\r\nLure.Plugin.Content.Control = '';\r\nLure.Plugin.Content.Controller = {};\r\nLure.Plugin.Content.Controller.Templator = '';\r\nLure.Plugin.Content.Controller.TreeBuilder = '';\r\n\r\nLure.Content = class MonsieurContent {\r\n    constructor({                       //--MonsieurContent Settings--\r\n                    Target     = null,              //{string, HTMLElement} - where to render       [by default this.Parent.Content];\r\n                    Content    = null,              //{string}  - html content string, if           [by default this.Target.innerHTML]\r\n                    CSS        = '',                //{string}  - css classes string\r\n                    Name       = null,              //{string}  - MonsieurContent's name. Need for search content by .GetContent(contentName)\r\n                    Global     = false,             //{bool}    - actual for SubContent. Set true, if SubContent is outside of Parent\r\n                    Title      = \"\",                //{string}  -  header element, contains name/caption/title of content\r\n                    Type       = \"Untyped\",         //{string}  - if has - this.Content will be invisible by default, if need be visible set next property:\r\n                    Visible    = undefined,         //{bool}    - make visible by default (if has no Type - visible by default)\r\n                    SubContent = [],                //{Array} of MonsieurContent Settings\r\n                    Dialog     = false,             //{bool} - make dialog absolute window with dialog wrapper\r\n                    DialogWrapper = true,           //{bool} - show dialog  wrapper bg\r\n                    DialogBlur = null,              //{string, jQuery, HTMLElement} target background for blur when dialog\r\n                    DialogAnimation = null,         //{string} - css animation name\r\n                    Show       = null,              //{function} - show action\r\n                    Hide       = null,              //{function} - hide action\r\n                    Shower     = function(){this.Content.style.display = '';},       //custom show handler [calls before .Show]\r\n                    Hider      = function(){this.Content.style.display = 'none';},   //custom hide handler [calls before .Hide]\r\n                    BeforeShow = function(){},      //{function} - calls before .Shower and .Show\r\n                    Refresh    = function(data, i){\r\n                        if (this.Controller)\r\n                            this.Controller.Refresh(data, i)\r\n                    },                              //{function} - refresh content, may be call on page resize for example\r\n                    Sorting    = false,             //{object}   - sort controls by field like 'field' -> '{css|HTMLElement}'  ex.: { count: '.head .count'}\r\n                    Filtering  = false,             //{object}   - like sorting, but fast filter textbox would be\r\n                    OnClick    = null,              //{function} - this.Content.onclick event\r\n                    Controller = null,              //{object} contoller settings(Templator or TreeBuilder)\r\n                    Control    = null,              //{object} (help upper)\r\n\r\n\r\n                    Props      = function(){},      //{function}  - recomented for extra fields  for MonsieurContent (this.Extrafield =...)\r\n                    Methods    = function(){},      //{function}  - recomented for extra methods for MonsieurContent (this.ExtraMethod = function(){...} )\r\n                    GetSet     = {},                //{function}  - recomenter for extra getters and setters for MonsieurContent\r\n                    AfterBuild = function(){},      //{function} - calls after MonsieurContent init\r\n                    Disabled   = false,             //debugging,\r\n                    Parent     = null               //link to parent MonsieurContent of SubContent\r\n                })\r\n\r\n    {\r\n        if (Disabled)\r\n            return;\r\n        let $this = this;\r\n        this.isContent = true;\r\n        this.isActive = true;\r\n        if (Name  === 'Tooltipchek')\r\n            ;//debugger;\r\n\r\n        this.Parent = Parent;\r\n        if (Parent !== null){\r\n            this.Target = Global? Lure.Select(Target) : Lure.Select(Target, this.Parent.Content);\r\n            if (this.Target === null)\r\n                this.Target = this.Parent.Content;\r\n        }\r\n        else if (Target !== null){\r\n            this.Target = Lure.Select(Target);\r\n        }\r\n        // debugger;\r\n        ////\r\n        if (Content === null){\r\n            this.Content = this.Target;\r\n            construct.call($this);\r\n        }else{\r\n            if (Content.match(/<[^>]+>/) === null) {//if not dom string\r\n                console.log('get load');\r\n                Lure.GetFileText(Content).then(x => {\r\n                    // debugger;\r\n                    //     console.log('x', x);\r\n                    MakeContent.call($this, x);\r\n                    construct.call($this);\r\n                });\r\n            }else {\r\n                MakeContent.call($this, Content);\r\n                construct.call($this);\r\n            }\r\n\r\n\r\n        }\r\n        function MakeContent(Content){\r\n            if (Controller === null || Array.isArray(Controller.Data))\r\n            {\r\n                this.Content = Lure.CreateElementFromString(Content);\r\n            }\r\n            else if (Controller !== null && !Array.isArray(Controller.Data))\r\n            {\r\n                /*Content = Content.replace(/<[^>]+>([^<]*{{([^#}]+)}}[^<]*)<[^>]+>/g, function (match, group) {\r\n                 let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                 return match.replace(match, `<span>${match}</span>`);\r\n                 });\r\n                 return  match.replace(group, newGroup);\r\n                 });*/\r\n                Content = Content.replace(/>[^>]*({{[^#}]+}})[^>]*</g, function (match, group) {\r\n                    /*let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                     return match.replace(match, `<span>${match}</span>`);\r\n                     });*/\r\n                    const x = match.replace(/{{[^#}]+}}/g, function (matche) {\r\n                        return `<span>${matche}</span>`\r\n                    });\r\n                    return x;// match.replace(group, `<span>${group}</span>`);\r\n                });\r\n                this.Content = Lure.CreateElementFromString(Content);\r\n            }\r\n            //this._Content = Content;\r\n            this.Target.appendChild(this.Content);\r\n        }\r\n\r\n        /////\r\n        if (this.Content === null || this.Target === null)\r\n        {\r\n            this.isContent = false;\r\n            return;\r\n        }\r\n\r\n\r\n\r\n\r\n        //### CONSTRUCTION\r\n        if (CSS !== ''){\r\n            let node = document.createElement('style');\r\n            node.innerHTML = CSS;\r\n            document.body.appendChild(node);\r\n        }\r\n        function construct(){\r\n            this.Type = Type;\r\n            this.Name = Name;\r\n            this.AllContents = Lure.ContentList;\r\n\r\n\r\n            //### METHODS\r\n            /**\r\n             * @param {object} Data\r\n             * @param {int} index\r\n             */\r\n            this.Refresh = Refresh.bind(this);\r\n            /**\r\n             *\r\n             * @param {selector|HTMLElement} s\r\n             * @returns {HTMLElement}\r\n             * @constructor\r\n             */\r\n            this.Select = function(s){\r\n                return Lure.Select(s, $this.Content)\r\n            };\r\n            /**\r\n             *\r\n             * @param {selector|HTMLElement} s\r\n             * @returns {NodeList}\r\n             * @constructor\r\n             */\r\n            this.SelectAll = function(s){\r\n                return Lure.SelectAll(s, $this.Content)\r\n            };\r\n            /**\r\n             *\r\n             * @param {string}stringName\r\n             * @constructor\r\n             * @returns {MonsieurContent}\r\n             */\r\n            this.GetParent = function(stringName='root'){\r\n                let content = $this;\r\n                while (content.Parent !== null && content.Name !== stringName)\r\n                    content = content.Parent;\r\n                return content;\r\n            };\r\n            /**\r\n             *\r\n             * @param {string}stringName\r\n             * @constructor\r\n             * @returns {MonsieurContent}\r\n             */\r\n            this.GetContent = function (stringName='root') {\r\n                let parent = this.GetParent(stringName);\r\n                if (parent.Name === stringName)\r\n                    return parent;\r\n                // let root = parent;\r\n                let found = parent;\r\n                if (stringName === 'root')\r\n                    return found;\r\n                let searcher0 = function (content) {\r\n                    if (content.isContent && content.__private.ContentNames)\r\n\r\n                        for( let i = 0; i < content.__private.ContentNames.length; i++){\r\n                            let name = content.__private.ContentNames[i];\r\n                            if (name === stringName)\r\n                                return content[name];\r\n                            found = searcher(content[name])\r\n                        }\r\n                    return found;\r\n                };\r\n                let searcher = function (content) {\r\n                    // debugger;\r\n                    for(let key in content){\r\n                        if (key !== \"Parent\" && !!content[key] && content[key].isContent){\r\n\r\n                            if (content[key].Name === stringName)\r\n                                return content[key];\r\n                            found = searcher(content[key]);\r\n                        }\r\n\r\n                    }\r\n                    return found;\r\n                };\r\n                return searcher(found);\r\n\r\n            };\r\n            /**\r\n             *\r\n             * @param {HTMLElement|string} HTMLElement\r\n             * @returns {number|Number}\r\n             * @constructor\r\n             */\r\n            this.GetIndex = function (HTMLElement) {\r\n                HTMLElement = $this.Select(HTMLElement);\r\n                return Array.prototype.slice.call( HTMLElement.parentElement.children ).indexOf(HTMLElement);\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} eventName\r\n             * @param {string} selector\r\n             * @param {function} func\r\n             * @constructor\r\n             */\r\n            this.AddEventListener = function (eventName, selector, func) {\r\n                Lure.AddEventListenerGlobal(eventName,selector,func, $this.Content, $this);\r\n            };\r\n            /**\r\n             *\r\n             * @param {string|HTMLElement} buttonTutorStarter\r\n             * @constructor\r\n             */\r\n            this.AddTutor = function (buttonTutorStarter) {\r\n                $this.MonsieurTutor = new MonsieurTutor($this.Select(buttonTutorStarter), $this.Content);\r\n            };\r\n            //private\r\n            this._SortBy = function(f, data, isSorted = false){\r\n                if (data.length < 2)\r\n                    return;\r\n                console.log('sort by', f);\r\n                data.sort(function (a, b) {\r\n                    if      ((a[f] < b[f]) && $this._Sorting[f].Sorted)\r\n                        return 1;\r\n                    else if ((a[f] > b[f]) && $this._Sorting[f].Sorted)\r\n                        return -1;\r\n                    else if ((a[f] < b[f]) && !$this._Sorting[f].Sorted)\r\n                        return -1;\r\n                    else if ((a[f] > b[f]) && !$this._Sorting[f].Sorted)\r\n                        return 1;\r\n                    return 0;\r\n                });\r\n                $this._Sorting[f].Sorted = !$this._Sorting[f].Sorted;\r\n                for (let kf in $this._Sorting){\r\n                    if ($this._Sorting.hasOwnProperty(kf) && kf !== '_sorter'){\r\n                        $this._Sorting[kf].Target.classList.remove('mt-sorting-up');\r\n                        $this._Sorting[kf].Target.classList.remove('mt-sorting-down');\r\n                        if (f !==kf)\r\n                            $this._Sorting[kf].Sorted = false;\r\n                    }\r\n                }\r\n                $this._Sorting[f].Target.classList.add($this._Sorting[f].Sorted ? 'mt-sorting-down':'mt-sorting-up');\r\n                $this.Refresh();\r\n            };\r\n            this._FilterBy = function () {\r\n                let p = performance.now();\r\n                let filters = 0;\r\n                let _d = $this._Filter._DataDefault.slice(0);\r\n                for (let f in $this._Filter){\r\n                    if ($this._Filter.hasOwnProperty(f) && $this._Filter[f].Filter && $this._Filter[f].Filter !==''){\r\n                        _d = _d.filter(x=>x[f].toString().toLowerCase().indexOf($this._Filter[f].Filter) > -1);\r\n                        filters++;\r\n                    }\r\n                }\r\n                console.log(_d);\r\n                if (filters === 0)\r\n                {\r\n                    if ($this._Sorting._sorter){\r\n                        $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\r\n                        $this._SortBy($this._Sorting._sorter, $this.Controller._Data);\r\n                    }\r\n                    $this.Controller.Refresh();\r\n                }\r\n                else\r\n                {\r\n                    if ($this._Sorting._sorter){\r\n                        $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\r\n                        $this._SortBy($this._Sorting._sorter, _d);\r\n                    }\r\n                    $this.Controller.PageSize = $this._PageSize;\r\n                    $this.Controller._PageCursor = 0;\r\n                    $this.Controller._Rebuilder(_d);\r\n\r\n                }\r\n\r\n                mr.PerformanceNow(p, 'FilterBy')\r\n            };\r\n\r\n            //extra properties\r\n            Props.call(this);\r\n            //extra getters/setters\r\n            for(let k in GetSet){\r\n                Object.defineProperty($this, k, Object.getOwnPropertyDescriptor(GetSet, k));\r\n            }\r\n            //extra methods\r\n            Methods.call(this);\r\n            //--\r\n            this.Show = function(e) {\r\n                this.isActive = true;\r\n                if (this.Control)\r\n                    this.Control.Active();\r\n                let style = window.getComputedStyle($this.Content);\r\n                let duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                let durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                if (duration < durationAni)\r\n                    duration = durationAni;\r\n                duration++;\r\n                if ($this.Type !== \"Untyped\" && !$this.isVisible)\r\n                {\r\n                    Lure.ContentList[$this.Type].forEach((item) =>\r\n                    {\r\n                        if ((item) !== $this && item.isActive)\r\n                            item.Hide();\r\n                    });\r\n                }\r\n                if (Dialog){\r\n                    Lure._DialogCount++;\r\n                    $this.Content.classList.add('monsieur-dialog');\r\n                    //    console.log('DialogWrapper', DialogWrapper);\r\n                    if (DialogWrapper){\r\n                        $this.DialogWrapper = Lure.CreateElementFromString('<div class=\"dialog-wrapper\">');\r\n                        document.body.appendChild($this.DialogWrapper);\r\n                        $this.DialogWrapper.onclick = $this.Hide.bind($this);\r\n\r\n                        let zIndexWrapper = parseInt(window.getComputedStyle($this.DialogWrapper).zIndex);\r\n                        let zIndexContent = parseInt(window.getComputedStyle($this.Content).zIndex);\r\n                        if (Number.isNaN(zIndexContent) || zIndexContent < zIndexWrapper)\r\n                            $this.Content.style.zIndex = zIndexWrapper+1;\r\n                    }\r\n\r\n                    if (DialogBlur)\r\n                    {\r\n                        $this.DialogWrapper.style.background = 'none';\r\n                        Lure.Select(DialogBlur).classList.add('monsieur-blur');\r\n                    }\r\n                    if (DialogAnimation){\r\n                        $this.Content.classList.add(DialogAnimation);\r\n                    }\r\n                }\r\n                BeforeShow.call($this, e);\r\n                Shower.call($this, e);\r\n                $this.Content.style.display = '';\r\n                clearTimeout($this.__private.ToggleTimer);\r\n                //this.Content.addEventListener('transitionend', Show.bind($this, e));\r\n                if (Show !== null) {\r\n                    $this.__private.ToggleTimer = setTimeout(function() {\r\n                        Show.call($this, e);\r\n                    },duration);\r\n                }\r\n            };\r\n            this.Hide = function(e) {\r\n                this.isActive = false;\r\n                if (this.Control)\r\n                    this.Control.Disactive();\r\n                let style = window.getComputedStyle($this.Content);\r\n                let duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                let durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                if (duration < durationAni)\r\n                    duration = durationAni;\r\n                duration++;\r\n                if (Dialog)\r\n                {\r\n                    Lure._DialogCount--;\r\n                    if ($this.DialogWrapper)\r\n                        $this.DialogWrapper.remove();\r\n                    if (DialogBlur  && Lure._DialogCount < 1)\r\n                        Lure.Select(DialogBlur).classList.remove('monsieur-blur');\r\n                }\r\n\r\n                Hider.call($this, e);\r\n                clearTimeout($this.__private.ToggleTimer);\r\n                if (Hide !== null)\r\n                    $this.__private.ToggleTimer = setTimeout(function () {\r\n                        Hide.call($this, e);\r\n                    }, duration);\r\n\r\n            };\r\n            this.Toggle = function(e){\r\n                if ($this.isVisible)\r\n                    $this.Hide(e);\r\n                else\r\n                    $this.Show(e);\r\n            };\r\n\r\n            this.__private = {};\r\n            this.__private.ToggleTimer = null;\r\n            this.Control = new MonsieurControl(Control, $this);\r\n            this.Content.onclick = OnClick? OnClick.bind($this) : null;\r\n            //SubContent\r\n            if (Array.isArray(SubContent)){\r\n                for (let i = 0; i < SubContent.length; i++){\r\n                    {\r\n                        if (!SubContent[i].Parent)\r\n                            SubContent[i].Parent = $this;\r\n                        //  $this.__private.ContentNames.push(SubContent[i].Name);\r\n                        $this[SubContent[i].Name] = new MonsieurContent( SubContent[i] );\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (let cname in SubContent){\r\n                    SubContent[cname].Parent = $this;\r\n                    SubContent[cname].Name = cname;\r\n                    //       $this.__private.ContentNames.push(cname);\r\n                    $this[cname] = new MonsieurContent(SubContent[cname]);\r\n                }\r\n            }\r\n            //title\r\n            this.TitleContent = Lure.Select(Title, this.Content);\r\n\r\n            if ( (Type === \"Untyped\" && Visible !== false) && !Dialog)\r\n                Visible = true;\r\n            else if ( (Type !== \"Untyped\" && Visible !== true) || ( Dialog && Visible !== true) )\r\n                Visible = false;\r\n            //if (Typed) Content is Visible\r\n            if (Visible){\r\n                this.Content.style.display = '';\r\n                if (this.Control)\r\n                    this.Control.Active();\r\n            }\r\n            else { //not undefined\r\n                this.isActive = false;\r\n                this.Content.style.display = 'none';\r\n            }\r\n            if (Controller){\r\n                if (Controller.isController){\r\n                    this.Controller = Controller;\r\n                    this.Controller.Parent = this;\r\n                }\r\n                else{\r\n                    if (!Controller.Target)\r\n                        Controller.Target = this.Content;\r\n                    if (!Controller.Type)\r\n                        Controller.Type = Templator;\r\n                    Controller.Parent = this;\r\n                    this.Controller = new Controller.Type(Controller);\r\n                }\r\n                if (this.Controller.isHasEditable)\r\n                {\r\n                    Lure._EditablesEventListenerRun($this.Content);\r\n                }\r\n            }\r\n\r\n            if (Sorting){\r\n                $this._Sorting = {};\r\n                $this._Sorting._sorter = null;\r\n                for (let f in Sorting){\r\n                    if (Sorting.hasOwnProperty(f) && f !== '_sorter'){\r\n                        $this._Sorting[f] = {\r\n                            Target: $this.Select(Sorting[f]),\r\n                            Sorted: false,\r\n                        };\r\n                        $this._Sorting[f].Target.classList.add('mt-sorting');\r\n                        $this._Sorting[f].Target.addEventListener('click', function () {\r\n                            $this._Sorting._sorter = f;\r\n                            $this._SortBy(f, $this.Controller._Data);\r\n                        })\r\n                    }\r\n                }\r\n                console.info('mt-sortable', $this._Sorting);\r\n            }\r\n            if (Filtering){\r\n                $this._Filter = {};\r\n                $this._Filter._DataDefault = $this.Controller._Data.slice(0);\r\n                for (let f in Filtering){\r\n                    if (Filtering.hasOwnProperty(f) && f !== '_format'){\r\n                        $this._Filter[f] = {\r\n                            Target: $this.Select(Filtering[f]),\r\n                            Filter: '',\r\n                        };\r\n                        $this._Filter[f].Target.classList.add('mt-filtering');\r\n                        $this._Filter[f].Target.innerHTML = '<input type=\"text\" class=\"mt-filtering-input\">';\r\n                        $this._Filter[f].Target.querySelector('.mt-filtering-input').addEventListener('keyup', function (e) {\r\n                            //$this._SortBy(f);\r\n                            $this._Filter[f].Filter = e.target.value.toLowerCase();\r\n                            $this._FilterBy();\r\n\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            if (!Lure.ContentList[$this.Type]) //if list is empty, create it, else just add\r\n                Lure.ContentList[$this.Type] = [];\r\n            Lure.ContentList[$this.Type].push(this);\r\n\r\n            //close button\r\n            Array.from(this.Content.children).forEach(function(item){\r\n                if (item.classList.contains(\"close\"))\r\n                    item.onclick = function (e) {\r\n                        $this.Hide(e);\r\n                    }\r\n            });\r\n\r\n            setTimeout(function () {\r\n                AfterBuild.call($this);\r\n            }, 1);\r\n        }\r\n\r\n    }\r\n    get isVisible(){\r\n        return Lure.isVisible(this.Content);\r\n    }\r\n    get Title(){\r\n        return this.TitleContent.innerHTML;\r\n    }\r\n    set Title(t){\r\n        this.TitleContent.innerHTML = t;\r\n    }\r\n    get Data(){\r\n        if (this.Controller)\r\n            return this.Controller.Data;\r\n        return null;\r\n    }\r\n    set Data(data){\r\n        if (this.Controller)\r\n            this.Controller.Data = data;\r\n    }\r\n    get Items(){\r\n        if (this.Controller)\r\n            return this.Controller.Items;\r\n        return null;\r\n    }\r\n    RefreshOne(i){\r\n        if (this.Controller)\r\n            this.Controller.RefreshOne(i);\r\n    }\r\n    Remove(i, removeData){\r\n        if (this.Controller)\r\n            this.Controller.Remove(i, removeData);\r\n    }\r\n    Add(itemData, extraclass = false, isPrepend = false, addData = true){\r\n        if (this.Controller)\r\n            this.Controller.Add(itemData, extraclass, isPrepend, addData);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} itemData\r\n     * @param {int} index\r\n     * @constructor\r\n     */\r\n    Edit(itemData, index){\r\n        if (this.Controller)\r\n            this.Controller.Edit(itemData, index);\r\n    }\r\n    Dispose(){\r\n        this.Content.remove();\r\n        this.Control.Disactive();\r\n        delete this.Controller;\r\n        delete this.Control;\r\n    }\r\n};\r\n\r\nclass MonsieurControl{\r\n    constructor(control, owner){\r\n        if (control === null)\r\n            return;\r\n        if (control.length > 0) //if control list not empty\r\n        {\r\n            let controls = this;\r\n            for (let i = 0; i < control.length; i++)\r\n            {\r\n                if (!control[i].Name)\r\n                    control[i].Name = \"unnamed_\" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);\r\n                controls[control[i].Name] = {\r\n                    Content: Lure.SelectAll(control[i].Target),\r\n                    _Content: control[i].Target,\r\n                    Type: control[i].Type ? control[i].Type : \"Untyped\",\r\n                    isGlobal: control[i].Global,\r\n                    OnClick: control[i].OnClick ? control[i].OnClick : owner.Show,\r\n                    OnChange: control[i].OnChange,\r\n                    Active: function(){\r\n                        Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                            item.classList.add('active');\r\n                        })\r\n                    },\r\n                    Disactive: function(){\r\n                        Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                            item.classList.remove('active');\r\n                        });\r\n                    }\r\n\r\n                };\r\n                //onclick\r\n                controls[control[i].Name].Content.forEach(function (item) {\r\n                    item.classList.add('pointer');\r\n                });\r\n                if (control[i].Global){\r\n\r\n                    Lure.AddEventListenerGlobal('click', control[i].Target, function (e) {\r\n                        Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                            item.classList.remove('active');\r\n                        });\r\n                        e.target.classList.add('active');\r\n                        if (controls[control[i].Name].OnClick)\r\n                            controls[control[i].Name].OnClick.call(owner, e);\r\n                    });\r\n                }\r\n                else{\r\n                    controls[control[i].Name].Content.forEach(function (item) {\r\n                        item.onclick = function (e) {\r\n                            Lure.ContentList[owner.Type].forEach((item) =>\r\n                            {\r\n                                if ((item) !== owner)\r\n                                {\r\n                                    if (item.Control)\r\n                                        item.Control.Disactive();\r\n                                }\r\n                            });\r\n                            //console.log('remover', e);\r\n                            controls[control[i].Name].Content.forEach(function (item) {\r\n                                item.classList.remove('active');\r\n                            });\r\n                            e.currentTarget.classList.add('active');\r\n                            controls[control[i].Name].OnClick.call(owner, e);\r\n                        };\r\n\r\n                    })\r\n                }\r\n\r\n                if (control[i].OnChange)\r\n                {\r\n                    if (control[i].Global){\r\n                        Lure.AddEventListenerGlobal('change', control[i].Target, function (e) {\r\n                            control[i].OnChange.call(owner, e);\r\n                        } )\r\n                    }\r\n                    else{\r\n                        controls[control[i].Name].Content.forEach(function (item) {\r\n                            item.onchange = function (e) {\r\n                                control[i].OnChange.call(owner, e);\r\n                            };\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Active(type = \"Untyped\"){\r\n        for (let k in this)\r\n            if (this[k].Type === type)\r\n                this[k].Content.forEach(function (item) {\r\n                    item.classList.add('active')\r\n                })\r\n    }\r\n    Disactive(type = \"Untyped\"){\r\n        for (let k in this)\r\n            if (this[k].Type === type)\r\n            {\r\n                this[k].Content.forEach(function (item) {\r\n                    item.classList.remove('active');\r\n                });\r\n                if (this[k].isGlobal)\r\n                    Lure.SelectAll(this[k]._Content).forEach(function(item){\r\n                        item.classList.remove('active');\r\n                    })\r\n            }\r\n\r\n    }\r\n}\r\nclass Templator{\r\n    constructor(\r\n        {\r\n            Target = null,                              //{HTMLelement}\r\n            Data = [],                                  // {object}, {array} - if object Templator would be refresh, if array - rebuild\r\n            ListElement = \".list_element\",              //{string} - css selector or dom string\r\n            //ListElementOnClick = null,                //{function} -\r\n            EmptyMessage = \"\",\r\n            EmptyHide = false,      //{bool} - Templator.Content would be hidden if Data.length = 0\r\n            //DataType = \"untyped\",  //--BAD EXPERIENCE-- ODO when refresh one of typed Templator, would be refreshed/added/removed all of same type Templators (exclude untyped ofcourse)\r\n\r\n            PageSize = -1,\r\n            DataCount = -1,         //if > 0 PageGet is requied!!!\r\n            PageGet = null,         //{function} - requied if DataCount > 0\r\n\r\n            ShowAllButton = true,\r\n\r\n            LineSave = function(line, property, newValue, callback=()=>{}){setTimeout(()=>{callback()}, 500)},            // callback would remove editable-waiting css class;\r\n            LineAdd = function(dataObject, callback=()=>{}){setTimeout(()=>{ callback()}, 500)},                     // callback would remove editable-waiting css class;\r\n            EditModeSwitch = null,     //checkbox, which toggle to edit mode\r\n            DataSaveAll = function(){},//TODO\r\n\r\n            //Sortable = false, //sort data columns\r\n\r\n            NoAnimation = false,    //TODO\r\n            NoBuild = false,\r\n\r\n            BeforeBuild = function(){},\r\n            AfterBuild = function(){},\r\n            AfterAdd = function(){},\r\n            Parent = null           //MonsieurContent, which owns this Controller\r\n\r\n        } = {})\r\n    {\r\n        //### DEFINES\r\n        let $this = this;\r\n        this.isController = true;\r\n        if (Parent !== null)\r\n            this.Content = Lure.Select(Target, Parent.Content);\r\n        else\r\n            this.Content = Lure.Select(Target);\r\n        this.Target = this.Content;\r\n        this._Data = Data;\r\n        this.EmptyMessage = EmptyMessage;\r\n        this.ListElement = \"\";\r\n\r\n        this.BeforeBuild = BeforeBuild.bind(this);\r\n        this.AfterBuild = AfterBuild.bind(this);\r\n        this.AfterAdd = AfterAdd.bind(this);\r\n        this.Parent = Parent;\r\n        //paginating\r\n        this.PageSize = PageSize;\r\n        this._PageSize = PageSize;\r\n        this._DataCount = DataCount > 0 ? DataCount : this._Data.length ;\r\n        this._PageCursor = 0;\r\n        this._PageGet = PageGet;\r\n\r\n        //server handling\r\n        this.LineAdd = LineAdd;\r\n        this.LineSave = LineSave;\r\n        this.Type = null; // Refresh or ItemList\r\n\r\n        //settings\r\n        this.isShowAllButton = ShowAllButton;\r\n        this.isNoAnimaton = NoAnimation;\r\n        this.isEmptyHide = EmptyHide;\r\n\r\n        //fields to refresh (for refresh type)\r\n        let Dictionary = [];\r\n        this._Dictionary = Dictionary;\r\n        const Refresher = function () {\r\n            //TODO refresh only changes\r\n            if (!$this._Data)\r\n                $this._Data = {};\r\n            for (let i = 0; i < Dictionary.length; i++)\r\n            {\r\n\r\n                for (let j = 0; j < Dictionary[i].fields.length; j++)\r\n                {\r\n                    let isAttribute = Dictionary[i].fields[j].Target.indexOf('attributes') > -1;\r\n                    let NewValue = Dictionary[i].fields[j].BuildValue($this._Data);\r\n                    if (isAttribute)\r\n                    {\r\n\r\n                        Dictionary[i].obj.attributes[Dictionary[i].fields[j].Target.split(\".\")[1]].value = NewValue;\r\n                    }\r\n                    else {\r\n                        Dictionary[i].obj[Dictionary[i].fields[j].Target] = Dictionary[i].fields[j].BuildValue($this._Data);\r\n                    }\r\n\r\n                }\r\n            }\r\n        };\r\n        this._Rebuilder = function (data = $this._Data) {\r\n            let lines = \"\";\r\n            //$this.Content.style.display = '';\r\n            if ($this._PageCursor === 0 )\r\n                $this.Content.querySelectorAll('.mt-line, .mt-paginator, .mt-empty').forEach(function(item) {item.remove();});\r\n            //pagination check\r\n            let NextCount;\r\n            //let line;\r\n            let Limit = data.length;\r\n            $this._DataCount = DataCount > 0 ? DataCount : Limit ;\r\n            if ($this.PageSize > 0)\r\n            {\r\n                //  debugger;\r\n                $this._DataCount = $this._DataCount > 0 ? $this._DataCount : data.length ;\r\n                let paginator = $this.Content.querySelector('.mt-paginator');\r\n                if (paginator !== null)\r\n                    paginator.remove();\r\n                Limit = parseInt($this._PageCursor) + parseInt($this.PageSize);\r\n                if (Limit > $this._DataCount && $this._DataCount > 0)\r\n                    Limit = $this._DataCount;\r\n                //how much will be load in next step\r\n                NextCount = $this._DataCount - Limit;\r\n                if (NextCount > $this.PageSize)\r\n                    NextCount = $this.PageSize;\r\n            }\r\n            if ($this.Type === \"ItemList\" && data.length === 0 && $this.EmptyMessage !== \"\" && !$this.isEmptyHide)\r\n            {\r\n                let tag = $this.ListElement.match(/\\s?([\\w]+) /)[0].replace(/\\s/g, \"\");\r\n                let empty = document.createElement(tag);\r\n                empty.classList.add('mt-empty');\r\n                empty.innerHTML = $this.EmptyMessage;\r\n                $this.Content.appendChild(empty);\r\n                return;\r\n            }\r\n            else if ($this.Type === \"ItemList\" && data.length === 0 && $this.isEmptyHide){\r\n                $this.Content.style.display = 'none';\r\n                return;\r\n            }\r\n            else if (data.length === 0) {\r\n                return;\r\n            }\r\n            //linebuilding\r\n            for (let i = $this._PageCursor; i < Limit; i++)\r\n                lines += $this._LineBuilder(data[i], i, data.length);\r\n            //appending\r\n            //   debugger;\r\n            if ($this.Content.children.length < 1)\r\n            {\r\n                $this.Content.innerHTML = lines;\r\n            }\r\n            else{\r\n                lines = Lure.CreateElementsFromString(lines, $this.Content.tagName);\r\n                if (lines !== null)\r\n                    lines.forEach(function (item) {\r\n                        $this.Content.appendChild(item);\r\n                    });\r\n            }\r\n            /*{\r\n             lines += $this._LineBuilder(data[i], i, data.length);\r\n             //if should to save changed class list after rebuild\r\n             if (data[i] && data[i].$classlist)\r\n             {\r\n             line = $(line);\r\n             line.attr('class', data[i].$classlist);\r\n             lines +=line[0].outerHTML;\r\n             }\r\n             else{\r\n             lines += line;\r\n             }\r\n             }*/\r\n            //save cursor index\r\n            if ($this.PageSize > 0)\r\n                $this._PageCursor = Limit;\r\n            //PAGINATION BUILD\r\n            //limit data case\r\n            if ($this.PageSize > 0 && $this._PageCursor < $this._DataCount){\r\n                let also;\r\n                let showAll = `<span>  (Не загружено ${($this._DataCount- $this._PageCursor)}) </span>`;\r\n                if ($this.isShowAllButton)\r\n                {\r\n                    showAll = `<span> или </span><span class=\"mt-btn-nextAll dotted pointer\"> Все ( ${($this._DataCount - $this._PageCursor)} )</span>`;\r\n                }\r\n                let isTable = $this.Content.tagName === 'table' || $this.Content.tagName === 'thead' || $this.Content.tagName === 'tbody';\r\n                if (isTable)\r\n                {\r\n                    let colspan = $this.Content.querySelector(\"tr:first-child th\").length + 1;\r\n\r\n                    also = `<tr class=\"mt-paginator\"><td colspan=\"${colspan}\" class=\"element block-head\"><span class=\"tpltr-next dotted pointer\">Показать еще ${NextCount}</span>${showAll}</td></tr>`;\r\n                    also = Lure.CreateElementFromString(also, $this.Content.tagName);\r\n                }\r\n                else {\r\n                    also = Lure.CreateElementFromString(`<div class='mt-paginator'><span class=\"mt-btn-next dotted pointer\">Показать еще ${NextCount}</span>${showAll}</div>`);\r\n\r\n                }\r\n                let btnNext = also.querySelector('.mt-btn-next');\r\n                //console.log('btnNext', btnNext);\r\n                btnNext.onclick = function(){\r\n                    if ($this._PageCursor >= data.length)\r\n                        $this._PageGet($this._PageCursor, $this.PageSize, BuildWithIt);\r\n                    else\r\n                        Build();\r\n\r\n                };\r\n                let btnNextAll = also.querySelector('.mt-btn-nextAll');\r\n                btnNextAll.onclick = function(){\r\n                    $this.PageSize = $this._DataCount;\r\n                    if ($this._PageGet !== null)\r\n                        $this._PageGet($this._PageCursor, ($this._DataCount - $this._PageCursor), BuildWithIt);\r\n                    else\r\n                        Build();\r\n                };\r\n                $this.Content.appendChild(also);\r\n\r\n            }\r\n\r\n        };\r\n        const Build = function () {\r\n            $this.BeforeBuild();\r\n\r\n            if ($this.Type === \"Refresh\")\r\n                Refresher();\r\n            else if ($this.Type === \"ItemList\"/* && $this._Data.length > 0*/)\r\n                $this._Rebuilder();\r\n\r\n\r\n            $this.AfterBuild();\r\n        };\r\n        const BuildWithIt = function (data) {\r\n            for (let i = 0; i < data.length; i++)\r\n                $this._Data.push(data[i]);\r\n            Build();\r\n        };\r\n        // = Rebuild1er;\r\n\r\n        //#### METHODS\r\n        this.FieldAdd = function (element) {\r\n            let elemAttributes = element.attributes;\r\n            let fields = [];\r\n            let WhatFields = -1; // 0-att only, 1-innerHTML only, 2-both\r\n            //find fields in attributes\r\n            for (let i = 0; i < elemAttributes.length; i++)\r\n            {\r\n                if (elemAttributes[i].value.indexOf(\"{{\") > -1)\r\n                {\r\n                    if (elemAttributes[i].name !== 'value')\r\n                        fields.push({\r\n                            Target: 'attributes.'+elemAttributes[i].name,\r\n                            BuildValue: Lure.Compile(elemAttributes[i].value)\r\n                        });\r\n                    else {\r\n                        fields.push({\r\n                            Target: elemAttributes[i].name,\r\n                            BuildValue: Lure.Compile(elemAttributes[i].value)\r\n                        });\r\n                    }\r\n                    WhatFields = 0;\r\n                }\r\n            }\r\n            //innerHTML check\r\n            if (element.childNodes.length < 2)\r\n            {\r\n                if (element.innerHTML.indexOf(\"{{\") > -1)\r\n                {\r\n                    fields.push({\r\n                        Target: \"innerHTML\",\r\n                        BuildValue: Lure.Compile(element.innerHTML)\r\n                    });\r\n                    WhatFields = WhatFields !==0 ? 1:2; //1 if no att, 2 if att exists\r\n\r\n                }\r\n\r\n            }\r\n            if (WhatFields > -1)\r\n            {\r\n                Dictionary.push( {\r\n                    obj: element,\r\n                    fields: fields\r\n                } );\r\n            }\r\n        };\r\n        this.Refresh = function(data = null, index = null){\r\n            $this.PageSize = $this._PageSize;\r\n            $this._PageCursor = 0;\r\n            if (data !== null)\r\n                $this._Data = data;\r\n            $this.PageCursor = 0;\r\n            if (index === null)\r\n                Build();\r\n            else\r\n                $this.RefreshOne(index);\r\n        };\r\n        this.RefreshOne = function (i) {\r\n            let newItem = Lure.CreateElementFromString($this._LineBuilder($this._Data[i], i, $this._Data.length), $this.Content.tagName);\r\n            let itemOld = $this.Items[i];\r\n            $this.Items[i].parentNode.replaceChild(newItem, itemOld);\r\n        };\r\n        this.Add = function(item, extraclass = false, isPrepend = false, addData = true){\r\n            if ($this._Data.length === 0 && $this.Content.querySelector(\".mt-empty\") !== null)\r\n                $this.Content.querySelector(\".mt-empty\").remove();\r\n            let fragment = document.createDocumentFragment();\r\n            let elem = document.createElement($this.Content.tagName);\r\n            let i;\r\n            if (!isPrepend)\r\n            {\r\n                i = $this._Data.length;\r\n                if (!addData)\r\n                    i--;\r\n                elem.innerHTML = $this._LineBuilder(item, i, i+1);\r\n                while (elem.childNodes[0]) {\r\n                    fragment.appendChild(elem.childNodes[0]);\r\n                }\r\n                if (extraclass)\r\n                    fragment.children[0].classList.add(extraclass);\r\n                if (addData)\r\n                    $this._Data.push(item);\r\n                $this.Content.appendChild(fragment);\r\n            }\r\n            else{\r\n                i = 0;\r\n                //change data-line attributes\r\n                $this.Items.forEach(function (item) {\r\n                    console.log(item);\r\n                    console.log(item.dataset['line']);\r\n                    item.dataset['line'] =  parseInt( item.dataset['line'] ) + 1;\r\n                });\r\n                //TODO rendered indexes not changings\r\n\r\n                elem.innerHTML =  $this._LineBuilder(item, 0, $this._Data.length+1);\r\n                while (elem.childNodes[0]) {\r\n                    fragment.appendChild(elem.childNodes[0]);\r\n                }\r\n                if (extraclass)\r\n                    fragment.children[0].classList.add(extraclass);\r\n                if (addData)\r\n                    $this._Data.unshift(item);\r\n                $this.Content.prepend(fragment);\r\n            }\r\n            //server saver\r\n            if ($this.LineAdd !== null)\r\n            {\r\n                $this.LineAdd(item, function () { //remove extraclass callback\r\n                    let x = $this.Content.querySelector('.'+extraclass);\r\n                    if (x)\r\n                        x.classList.remove(extraclass);\r\n                });\r\n            }\r\n            $this.AfterAdd(item, i);\r\n        };\r\n        this.Edit = function (itemData, i){\r\n            console.log('edit itemData', i, itemData);\r\n            Array.from($this.Items).filter(x => parseInt(x.dataset['line'])===i)[0].classList.add('editable-waiting');\r\n            $this.LineSave(i, '$this', itemData,\r\n                function () {\r\n                    $this._Data[i] = itemData;\r\n                    $this.RefreshOne(i);\r\n                });\r\n\r\n        };\r\n        /**\r\n         *\r\n         * @param {int} index\r\n         * @param {bool} removeData\r\n         * @constructor\r\n         */\r\n        this.Remove = function(index, removeData = true){\r\n            //TODO rendered indexes not changings\r\n            $this.Content.querySelector(`.mt-line[data-line=\"${index}\"]`).remove();\r\n            for (let j = index; j < $this.Items.length; j++){\r\n                $this.Items[j].dataset['line'] =  parseInt( $this.Items[j].dataset['line'] ) - 1;\r\n                $this.Items[j].querySelectorAll('[data-line]').forEach(function (item) {\r\n                    item.dataset['line'] = parseInt( item.dataset['line'] ) - 1;\r\n                })\r\n            }\r\n            if (removeData)\r\n                $this._Data.splice(index, 1);\r\n            if ($this._Data.length === 0)\r\n                $this.Refresh();\r\n        };\r\n        this.SwitchToEditMode = function () {\r\n            Lure.Editable.EditMode = true;\r\n            Lure.SelectAll('.editable', $this.Content).forEach(function (item) {\r\n                // console.log(item);\r\n                Lure.Editable.AddEdits(item);\r\n            });\r\n        };\r\n\r\n        //### CONSTRUCTOR\r\n        if ( Array.isArray(this._Data) ){\r\n            this.Type = \"ItemList\";\r\n            const isListElementCssSelector = ListElement.match(/^[a-zA-Z0-9.,\\-_ *#]+$/g) !== null;\r\n            if (isListElementCssSelector){\r\n                let element = this.Content.querySelector(ListElement);\r\n                element.classList.add('mt-line');\r\n                ListElement = element.outerHTML;\r\n                element.remove();\r\n            }\r\n            else{\r\n                let list_element = ListElement.match(/<[^>]+>/)[0];\r\n                let list_elementClassed;\r\n                let pos = list_element.indexOf('class=\"');\r\n                if (pos < 0)\r\n                {\r\n                    list_elementClassed = list_element.substr(0,list_element.length - 1) + ' class=\"mt-line\"' + list_element.substr(list_element.length-1);\r\n                }\r\n                else\r\n                {\r\n                    pos = list_element.indexOf('\"', pos+8);\r\n                    list_elementClassed = list_element.substr(0,pos) + \" mt-line\" + list_element.substr(pos);\r\n                }\r\n                ListElement = ListElement.replace(list_element, list_elementClassed);\r\n            }\r\n            //add data-line attribute\r\n            ListElement = ListElement.replace(/<[\\s\\S]+?(>)/, function (a, b) {\r\n                return a.replace(b, ' data-line=\"{{i}}\">')\r\n            });\r\n            this.ListElement = ListElement;\r\n            this._LineBuilder = Lure.Compile(ListElement, true);\r\n            if (ListElement.match(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/) !== null)\r\n            {\r\n                this.isHasEditable = true;\r\n                if (EditModeSwitch !== null)\r\n                    Lure.Select(EditModeSwitch).addEventListener('change', function (e) {\r\n                        if ( e.currentTarget.checked ){\r\n                            $this.SwitchToEditMode();\r\n                        }\r\n                        else{\r\n                            Lure.Editable.EditMode = false;\r\n                            document.body.click();\r\n                        }\r\n                    });\r\n            }\r\n            this.Content.MonsieurController = this;\r\n            this.Content.classList.add('mt-content');\r\n\r\n        }\r\n        else {\r\n            this.Type = \"Refresh\";\r\n            let AllChildren = Array.prototype.slice.call( this.Content.querySelectorAll('*:not(g):not(path):not(clipPath):not(text):not(br)'));\r\n            AllChildren.push( this.Content);\r\n            AllChildren.forEach(function (item) {\r\n                $this.FieldAdd(item);\r\n            })\r\n        }\r\n        Lure.TemplatorList.push(this);\r\n        if (!NoBuild)\r\n            Build();\r\n    }\r\n    get Data(){\r\n        return this._Data;\r\n    }\r\n    set Data(data){\r\n        this._Data = data;\r\n    }\r\n    get Items(){\r\n        return this.Content.querySelectorAll('.mt-line');\r\n    }\r\n}\r\nclass TreeBuilder{\r\n    constructor(\r\n        {\r\n            Target = null,                          //{string, HTMLElement}\r\n            Data = [],\r\n            ListElement = null,\r\n            Drop = false,                       //{bool}   - horisontal menu with drop down subtrees;\r\n            SubSelector = null,                 //{string} - cssselector of element, where put branches\r\n            SubSelectorHandler = function(){},  //{function} - click handle on SubSelector Element (hide/show branch for exaple)\r\n\r\n            BeforeBuild = function(){},\r\n            AfterBuild = function(){},\r\n\r\n            Parent = null               //MonsieurContent, which owns this Controller\r\n        }\r\n    )\r\n    {\r\n        //### DEFINES\r\n        this.isController = true;\r\n        this.Content = Lure.Select(Target);\r\n        this.Target = this.Content;\r\n        this.Parent = Parent;\r\n        this._Data = Data;\r\n        this.SubSelector = SubSelector;\r\n        this.SubSelectorHandler = SubSelectorHandler.bind(this);\r\n        this.BeforeBuild = BeforeBuild.bind(this);\r\n        this.AfterBuild = AfterBuild.bind(this);\r\n        let SubTreeClass = Drop ? 'mtb-sub_tree dropable':'mtb-sub_tree';\r\n        let Lvl = 0;\r\n        let Branch = ListElement === null ? this.Content.innerHTML : ListElement;\r\n        if (this.SubSelector === null){\r\n            this.SubSelector = '.mtb-sub_tree';\r\n            Branch = Branch.replace(/^([\\s\\S]*)(<\\/\\w+>)$/, function (match, html, entag) {\r\n                entag = `<div class=\"${SubTreeClass}\"></div>${entag}`;\r\n                return html+entag\r\n            })\r\n        }\r\n        this.LineBuilder = Lure.Compile(Branch, true);\r\n        let $this = this;\r\n\r\n        let Index = 0;          //unque serial number of branch\r\n\r\n        let BuildElement = function(obj, key, indexJ) {\r\n            Index++;\r\n            let extra = {\r\n                $lvl: Lvl,\r\n                $key: key,\r\n                $index: Index,\r\n                $j: indexJ\r\n            };\r\n            let line = Lure.CreateElementFromString($this.LineBuilder(obj, Index, null, extra));\r\n            line.classList.add('mtb-branch');\r\n            for (let key in obj)\r\n            {\r\n                let ObjItem = obj[key];\r\n                if (Array.isArray(ObjItem))\r\n                {\r\n                    Lvl++;\r\n                    for (let i = 0; i < ObjItem.length; i++)\r\n                    {\r\n                        if ($this.SubSelector === null)\r\n                        {\r\n                            line.appendChild(  BuildElement(ObjItem[i], key, i) );\r\n                        }\r\n                        else\r\n                        {\r\n                            line.classList.add('mtb-has_tree');\r\n                            if (Drop)\r\n                                line.classList.add('dropable');\r\n                            let sub = line.querySelector($this.SubSelector);\r\n                            sub.appendChild(  BuildElement(ObjItem[i], key, i) );\r\n                        }\r\n                    }\r\n                    Lvl--;\r\n                }\r\n            }\r\n            return line;\r\n        };\r\n        let Build = function () {\r\n            $this.BeforeBuild();\r\n            if (Array.isArray($this._Data))\r\n            {\r\n                $this.Content.innerHTML = '';\r\n                Lvl++;\r\n                for (let j = 0; j < $this._Data.length; j++)\r\n                    $this.Content.appendChild(  BuildElement($this._Data[j], \"root\", 0) );\r\n                Lvl--;\r\n            }\r\n            else{\r\n                $this.Content.appendChild(BuildElement($this._Data, \"root\", 0));\r\n            }\r\n            Lvl = 0;\r\n            Index = 0;\r\n            $this.AfterBuild();\r\n\r\n        };\r\n\r\n        Build(this._Data);\r\n\r\n        //### METHODS\r\n        this.Refresh = function (data=$this._Data) {\r\n            $this._Data = data;\r\n            Build();\r\n        }\r\n\r\n    }\r\n    get Data(){\r\n        return this._Data;\r\n    }\r\n    set Data(data){\r\n        this._Data = data;\r\n    }\r\n}\r\n\r\n//Tutorial\r\n//TargetButton = {string, HTMLElement} - button who start the tutor\r\n//TargetContent = {string, HTMLElement} - select/element where search tutors\r\nclass MonsieurTutor{\r\n    /**\r\n     *\r\n     * @param {HTMLElement} TargetButton\r\n     * @param {HTMLElement} TargetContent\r\n     */\r\n    constructor(TargetButton = null, TargetContent = null){\r\n        //### DEFINES\r\n        let $this = this;\r\n        this.TargetButton = Lure.Select(TargetButton);\r\n        this.TargetContent = Lure.Select(TargetContent);\r\n        const MT = `<div class=\"monsieur-tutor\">\r\n                        <div class=\"cd-caption\">\r\n                            <span>Шаг </span>\r\n                            <span class=\"monsieur-tutor_step\"></span>\r\n                        </div>\r\n                        <div class=\"monsieur-tutor_desc\"></div>\r\n                        <div class=\"monsieur-tutor_btns\">\r\n                            <button class=\"button btn-tutor btn-tutor-stop\">Прервать обучение</button>\r\n                            <button class=\"button btn-tutor btn-tutor-next\">Далeе →</button></div>\r\n                   </div>`;\r\n        this.Content = Lure.CreateElementFromString(MT);\r\n        this.ContentBG = Lure.CreateElementFromString('<div class=\"monsieur-tutor-bg dialog-wrapper\"></div>');\r\n        this.Content.style.display = 'none';\r\n        this.ContentBG.style.display = 'none';\r\n        this._Description = this.Content.querySelector('.monsieur-tutor_desc');\r\n        this._Step = this.Content.querySelector('.monsieur-tutor_step');\r\n        this._ButtonNext = this.Content.querySelector('.btn-tutor-next');\r\n        this._ButtonStop = this.Content.querySelector('.btn-tutor-stop');\r\n\r\n        $this.Data = [];\r\n        const ButtonNextText = this._ButtonNext.innerHTML;\r\n        let TutorPosition = 0;\r\n        /*get transparent*/\r\n        let temp = document.createElement('div');\r\n        temp.style.display = 'none';\r\n        document.body.appendChild(temp);\r\n        const ColorTransparent = window.getComputedStyle(temp).backgroundColor;\r\n        temp.remove();\r\n        //---\r\n        const ElemCssRestore = function () {\r\n            let Element = $this.Data[TutorPosition-1].obj;\r\n            if (Element.tagName.toLowerCase() !== 'tr')\r\n            {\r\n                Element.style.zIndex = '';\r\n                Element.style.position = '';\r\n                Element.style.outline = '';\r\n                Element.style.display = '';\r\n                Element.style.backgroundColor = '';\r\n                return;\r\n            }\r\n            let nElements = Element.querySelectorAll('th, td');\r\n            nElements.forEach(function (elem) {\r\n                elem.style.position = '';\r\n                elem.style.zIndex = '';\r\n            });\r\n        };\r\n        const ElemCssSet = function (Element) {\r\n            if (Element.tagName.toLowerCase() !== 'tr')\r\n            {\r\n                Element.style.zIndex = '11';\r\n                Element.style.position = 'relative';\r\n                Element.style.outline = '5px #bee0ff solid';\r\n                let style = window.getComputedStyle(Element);\r\n                if (style.backgroundColor === ColorTransparent)\r\n                    Element.style.backgroundColor = \"#fff\";\r\n                if (!Lure.isVisible(Element) )\r\n                {\r\n                    if (Element.tagName.toLowerCase() !== \"table\" )\r\n                        Element.style.display = 'block';\r\n                    else\r\n                        Element.style.display = 'table';\r\n                }\r\n                /* if (Element.length > 1)\r\n                 Element.eq(1).css({zIndex: '', outline: ''});*/\r\n                return;\r\n            }\r\n            let nElements = Element.querySelectorAll('th, td');\r\n            nElements.forEach(function (elem) {\r\n                elem.style.zIndex = \"11\";\r\n                elem.style.position = \"relative\";\r\n                let style = window.getComputedStyle(elem);\r\n                if (style.backgroundColor === ColorTransparent){\r\n                    elem.style.backgroundColor = \"#fff\";\r\n                }\r\n            });\r\n            /* if (Element.length > 1)\r\n             Element.eq(1).css({zIndex: '', outline: ''});*/\r\n        };\r\n        const Run = function () {\r\n            console.log(\"tutor run\");\r\n            if ($this.TargetContent === null)\r\n                return;\r\n            let Items = $this.TargetContent.querySelectorAll('*[data-tutor]:not([data-line]), *[data-tutor][data-line=\"0\"]');\r\n            if (Items.length < 1){\r\n                Lure.Confirm(\"Сообщение\", \"На этом экране нет подсказок\");\r\n                return;\r\n            }\r\n            // document.body.style.position = 'relative';\r\n\r\n            Items.forEach(function (item) {\r\n                $this.Data.push({\r\n                    obj: item,\r\n                    desc: item.dataset['tutor']\r\n                })\r\n            });\r\n            $this.Content.style.display = '';\r\n            $this.ContentBG.style.display = '';\r\n            GoStep();\r\n        };\r\n        const GoStep = function () {\r\n            //restore prev element's css\r\n            if (TutorPosition > 0)\r\n                ElemCssRestore();\r\n            if (TutorPosition === $this.Data.length)\r\n            {\r\n                Stop();\r\n                return;\r\n            }\r\n            //select next elem\r\n            let Element = $this.Data[TutorPosition].obj;\r\n            let ElementDesc = $this.Data[TutorPosition].desc;\r\n            // check for invisible parent\r\n            let ElemParent = ElementDesc.match(/{([\\s\\S]+)}/);\r\n            if (ElemParent !== null)\r\n            {\r\n                ElemParent = ElemParent[1];\r\n                ElementDesc = ElementDesc.replace(/{([\\s\\S]+)}/, '');\r\n                Element = Element.closest(ElemParent);\r\n                $this.Data[TutorPosition].obj = Element;\r\n                //Element.push( );\r\n            }\r\n            //set element visible\r\n            ElemCssSet(Element);\r\n            //write new element title and desc\r\n            $this._Step.innerHTML = (TutorPosition+1) + \"/\"+$this.Data.length;\r\n            $this._Description.innerHTML = ElementDesc;\r\n            //caption next button\r\n            if ((TutorPosition+1) === $this.Data.length)\r\n            {\r\n                $this._ButtonNext.innerHTML = 'Завершить';\r\n                $this._ButtonStop.style.opacity = '0';\r\n            }\r\n\r\n            //move tutor desc box\r\n            let posX = Element.offsetLeft + Element.clientWidth + 10;\r\n            let posY = Element.offsetTop - $this.Content.clientHeight - 10;\r\n            if (posY < 10)\r\n                posY = 10;\r\n            if ( (posX + $this.Content.clientWidth) > window.innerWidth )\r\n            {\r\n                posX = Element.offsetLeft - $this.Content.clientWidth - 10;\r\n                if (window.innerWidth < $this.Content.clientWidth + Element.clientWidth)\r\n                {\r\n                    posX = Element.offsetLeft + Element.clientWidth - $this.Content.clientWidth - 20;\r\n                }\r\n\r\n            }\r\n            if (document.documentElement.scrollTop  > posY || document.documentElement.scrollTop + window.innerHeight < Element.offsetTop + Element.offsetHeight)\r\n            {\r\n                //$('html, body').animate({scrollTop: posY - 10}, 300);\r\n                document.documentElement.scrollTop =  (posY - 10)  +'px';\r\n            }\r\n            if (posX < 10)\r\n                posX = 10;\r\n            $this.Content.style.left = posX +'px';\r\n            $this.Content.style.top = posY +'px';\r\n\r\n            TutorPosition++;\r\n        };\r\n        const Stop = function () {\r\n            //     document.body.style.position = '';\r\n            ElemCssRestore();\r\n            $this.Content.style.display = 'none';\r\n            $this.ContentBG.style.display = 'none';\r\n            $this._ButtonNext.innerHTML = ButtonNextText;\r\n            $this._ButtonStop.style.opacity = '';\r\n            TutorPosition = 0;\r\n            $this.Data = [];\r\n        };\r\n        //### CONSTRUCT\r\n\r\n        this.TargetButton.onclick = Run;\r\n        this._ButtonNext.onclick = GoStep;\r\n        this._ButtonStop.onclick = Stop;\r\n\r\n        document.body.appendChild(this.Content);\r\n        document.body.appendChild(this.ContentBG);\r\n\r\n        //### METHODS\r\n        this.Run = Run;\r\n\r\n    }\r\n}\r\nclass MonsieurLoading{\r\n    constructor(\r\n        {\r\n            Target = 'body'\r\n        } = {}\r\n    ){\r\n        this.Target = Lure.Select(Target);\r\n        this.Target.style.position = 'relative';\r\n        this.Content = Lure.CreateElementFromString(`<div class=\"ajax-loading\" style=\"display: none\"></div>`);\r\n        let cx = 60; //diameter\r\n        let cy = 60;\r\n        let _DoArc = function(radius, maxAngle){\r\n            let d = \" M \"+ (cx + radius) + \" \" + cy;\r\n            for (let angle = 0; angle < maxAngle; angle++)\r\n            {\r\n                let rad = angle * (Math.PI / 180);  //deg to rad\r\n                let x = cx + Math.cos(rad) * radius;\r\n                let y = cy + Math.sin(rad) * radius;\r\n                d += \" L \"+x + \" \" + y;\r\n            }\r\n            return d;\r\n        };\r\n        let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\">\r\n                     <path d=\"${_DoArc(45, 160)}\" class=\"monsieur-arc1\" fill=\"none\" stroke=\"#449b22\" stroke-width=\"5\"></path>\r\n                     <path d=\"${_DoArc(40, 130)}\" class=\"monsieur-arc2\" fill=\"none\" stroke=\"#61c8de\" stroke-width=\"5\"></path>\r\n                     <path d=\"${_DoArc(35, 100)}\" class=\"monsieur-arc3\" fill=\"none\" stroke=\"#761c19\" stroke-width=\"5\"></path>\r\n                     <path d=\"${_DoArc(30, 70)}\"  class=\"monsieur-arc4\" fill=\"none\" stroke=\"#333333\" stroke-width=\"5\"></path>\r\n                   </svg>`;\r\n        this.Target.appendChild(this.Content);\r\n        this.Content.innerHTML = svg;\r\n        this.Timeout = null;\r\n    }\r\n    Show(){\r\n        let $this = this;\r\n        this.Content.style.display = '';\r\n        clearTimeout(this.TimeoutHide);\r\n        this.Timeout = setTimeout(function(){\r\n            $this.Content.style.display = 'block';\r\n        }, 70);\r\n    }\r\n    Hide(){\r\n        let $this = this;\r\n        clearTimeout(this.Timeout);\r\n        this.TimeoutHide = setTimeout(function(){\r\n            $this.Content.style.display = 'none';\r\n        }, 250); //hide may be called in same time as the show()\r\n    }\r\n}\r\nclass MonsieurTooltip{\r\n    constructor({\r\n                    Target    = document,           //Target-listener (global document by default)\r\n                    Attribute = \"data-tooltip\",     // data-tooltip=\"Help text here\"\r\n                    Delay     = 400,                //delay before tooltip show\r\n                    Time      = 1100,               //showing time\r\n                    Cursor    = \"help\",             //item:hover cursor\r\n                    Custom    = `<div class=\"monsieur-tooltip\">`,               //custom html of tooltip\r\n                    AfterBuild = function(){}\r\n\r\n                })\r\n    {\r\n        let $this = this;\r\n        this.ToolTip = Lure.CreateElementFromString(Custom);\r\n        let Timer = null;\r\n        let Destr = null;\r\n        this.Target = Lure.Select(Target);\r\n        const Show = function (text){\r\n            this.ToolTip.innerHTML = text;\r\n            $this.Target.appendChild(this.ToolTip);\r\n\r\n        }.bind(this);\r\n        Lure.AddEventListenerGlobal('mouseover', `[${Attribute}]`, function (e) {\r\n            let text = e.currentTarget.dataset[Attribute.replace('data-', '')];\r\n            clearTimeout(Destr);\r\n            Timer = setTimeout(function(){\r\n                Show(text);\r\n            }, Delay);\r\n        }, this.Target);\r\n        Lure.AddEventListenerGlobal('mouseout', `[${Attribute}]`, function (e) {\r\n            clearTimeout(Timer);\r\n            Destr = setTimeout(function () {\r\n                //$this.ToolTip.remove();\r\n            }, Time)\r\n        }, this.Target);\r\n        setTimeout(function () {\r\n            AfterBuild.bind($this);\r\n        }, 0)\r\n    }\r\n\r\n}\r\n\r\n//Lure.Content = MonsieurContent;\r\n\r\n"]}